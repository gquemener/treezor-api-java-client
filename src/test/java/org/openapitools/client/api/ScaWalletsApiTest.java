/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetSCAWalletsDefaultResponseInner;
import org.openapitools.client.model.PostScaWalletRequest;
import org.openapitools.client.model.PutScaWalletRequest;
import org.openapitools.client.model.ScaWalletObject;
import org.openapitools.client.model.SetPasscodeRequest;
import org.openapitools.client.model.SwapSCAWalletsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScaWalletsApi
 */
@Disabled
public class ScaWalletsApiTest {

    private final ScaWalletsApi api = new ScaWalletsApi();

    /**
     * Delete SCA Wallet
     *
     * Permanently delete an SCA Wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScaWalletTest() throws ApiException {
        String scaWalletId = null;
        ScaWalletObject response = api.deleteScaWallet(scaWalletId);
        // TODO: test validations
    }

    /**
     * Search SCA Wallets
     *
     * Retrieve the list of [SCA Wallets](/guide/strong-customer-authentication/sca-wallets.html) for a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSCAWalletsTest() throws ApiException {
        String userId = null;
        String cursor = null;
        ScaWalletObject response = api.getSCAWallets(userId, cursor);
        // TODO: test validations
    }

    /**
     * Get SCA Wallet
     *
     * Retrieve an SCA Wallet by providing its &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScaWalletTest() throws ApiException {
        String scaWalletId = null;
        ScaWalletObject response = api.getScaWallet(scaWalletId);
        // TODO: test validations
    }

    /**
     * Create SCA Wallet
     *
     * Create a new [SCA Wallet](/guide/strong-customer-authentication/sca-wallets.html) manually.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScaWalletTest() throws ApiException {
        PostScaWalletRequest postScaWalletRequest = null;
        ScaWalletObject response = api.postScaWallet(postScaWalletRequest);
        // TODO: test validations
    }

    /**
     * Lock SCA Wallet
     *
     * Locks an SCA Wallet so that none of the services it offers can be unlocked until it is unlocked. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putScaWalletTest() throws ApiException {
        String scaWalletId = null;
        PutScaWalletRequest putScaWalletRequest = null;
        ScaWalletObject response = api.putScaWallet(scaWalletId, putScaWalletRequest);
        // TODO: test validations
    }

    /**
     * Reset PIN
     *
     * This endpoint is used to reset the PIN code of a Wallet. &lt;br&gt; This web service should be used when a Customer has locked their Wallet after too many consecutive wrong PIN attempts. &lt;br&gt; Once the PIN has been reset, the Customer is able to set a new PIN via the mobile application, without having to enter the previous PIN. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetScaWalletPinTest() throws ApiException {
        String scaWalletId = null;
        ScaWalletObject response = api.resetScaWalletPin(scaWalletId);
        // TODO: test validations
    }

    /**
     * Change Passcode
     *
     * Change the passcode ([Web Native SCA](/guide/strong-customer-authentication/web-native.html)). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPasscodeTest() throws ApiException {
        SetPasscodeRequest setPasscodeRequest = null;
        api.setPasscode(setPasscodeRequest);
        // TODO: test validations
    }

    /**
     * Swap SCA Wallets
     *
     * Create an SCA Wallet while deleting the previous one as users should have only one device enrolled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void swapSCAWalletsTest() throws ApiException {
        SwapSCAWalletsRequest swapSCAWalletsRequest = null;
        ScaWalletObject response = api.swapSCAWallets(swapSCAWalletsRequest);
        // TODO: test validations
    }

    /**
     * Unlock SCA Wallet
     *
     * Unlock an SCA Wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockScaWalletTest() throws ApiException {
        String scaWalletId = null;
        ScaWalletObject response = api.unlockScaWallet(scaWalletId);
        // TODO: test validations
    }

}
