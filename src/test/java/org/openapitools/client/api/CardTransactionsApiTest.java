/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCardtransaction200Response;
import org.openapitools.client.model.GetCoCardTransactions200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ReadCardTransaction200Response;
import org.openapitools.client.model.SimulateCardTransactions201ResponseInner;
import org.openapitools.client.model.SimulateCardTransactionsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardTransactionsApi
 */
@Disabled
public class CardTransactionsApiTest {

    private final CardTransactionsApi api = new CardTransactionsApi();

    /**
     * Get Card Transaction
     *
     * Retrieve a Card Transaction based on its &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardtransactionTest() throws ApiException {
        Long cardtransactionId = null;
        GetCardtransaction200Response response = api.getCardtransaction(cardtransactionId);
        // TODO: test validations
    }

    /**
     * Get Card Transactions
     *
     * Retrieve the Card Transactions for a specific card. This request is preferred for a dashboard-oriented usage. You shouldn&#39;t expose this endpoint to your end users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCoCardTransactionTest() throws ApiException {
        String cardId = null;
        String cursor = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        BigDecimal amountFrom = null;
        BigDecimal amountTo = null;
        List<String> paymentStatus = null;
        List<String> paymentType = null;
        String merchantId = null;
        GetCoCardTransactions200Response response = api.getCoCardTransaction(cardId, cursor, createdDateFrom, createdDateTo, amountFrom, amountTo, paymentStatus, paymentType, merchantId);
        // TODO: test validations
    }

    /**
     * Get all Card Transactions
     *
     * Retrieve all the Card Transactions. This is the preferred request for a dashboard-oriented approach. You shouldn&#39;t expose this endpoint to your end users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCoCardTransactionsTest() throws ApiException {
        String cursor = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        GetCoCardTransactions200Response response = api.getCoCardTransactions(cursor, createdDateFrom, createdDateTo);
        // TODO: test validations
    }

    /**
     * Search Card Transactions
     *
     * Retrieve Card Transactions based at least on one of the following intputs: &#x60;cardId&#x60;, &#x60;paymentId&#x60;, &#x60;publicToken&#x60;, &#x60;walletId&#x60;. This is the preferred request for end-user-oriented usage. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCardTransactionTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer cardtransactionId = null;
        Integer cardId = null;
        Integer walletId = null;
        String merchantId = null;
        String publicToken = null;
        Integer paymentId = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        ReadCardTransaction200Response response = api.readCardTransaction(accessSignature, accessTag, accessUserId, accessUserIp, cardtransactionId, cardId, walletId, merchantId, publicToken, paymentId, pageNumber, pageCount, sortBy);
        // TODO: test validations
    }

    /**
     * Simulate Card Transactions
     *
     * Simulate Card Transactions in Sandbox environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateCardTransactionsTest() throws ApiException {
        SimulateCardTransactionsRequest simulateCardTransactionsRequest = null;
        List<SimulateCardTransactions201ResponseInner> response = api.simulateCardTransactions(simulateCardTransactionsRequest);
        // TODO: test validations
    }

}
