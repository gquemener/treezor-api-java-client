/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetPayouts200Response;
import org.openapitools.client.model.GetProofPayout200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostPayout200Response;
import org.openapitools.client.model.PostPayoutRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayoutsApi
 */
@Disabled
public class PayoutsApiTest {

    private final PayoutsApi api = new PayoutsApi();

    /**
     * Cancel Payout
     *
     * Change payout status to &#x60;CANCELED&#x60;. A &#x60;VALIDATED&#x60; payout can&#39;t be canceled. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayoutTest() throws ApiException {
        Long payoutId = null;
        PostPayout200Response response = api.deletePayout(payoutId);
        // TODO: test validations
    }

    /**
     * Get Payout
     *
     * Retrieve a given Payout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayoutTest() throws ApiException {
        Long payoutId = null;
        PostPayout200Response response = api.getPayout(payoutId);
        // TODO: test validations
    }

    /**
     * Search Payouts
     *
     * Retrieve Payouts that match search criteria. The request must contain at least one of the following inputs: &#x60;userId&#x60;, &#x60;walletId&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayoutsTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer payoutId = null;
        String payoutTag = null;
        String payoutStatus = null;
        Integer payoutTypeId = null;
        Integer walletId = null;
        Integer userId = null;
        OffsetDateTime payoutDate = null;
        Integer bankaccountId = null;
        Integer beneficiaryId = null;
        String amount = null;
        String currency = null;
        String cursor = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        GetPayouts200Response response = api.getPayouts(accessSignature, accessTag, accessUserId, accessUserIp, payoutId, payoutTag, payoutStatus, payoutTypeId, walletId, userId, payoutDate, bankaccountId, beneficiaryId, amount, currency, cursor, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        // TODO: test validations
    }

    /**
     * Create Payout Proof
     *
     * Generate and download a proof of payout in .PDF format. See [Proof of Payout](/guide/transfers/proof-of-payout.html) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProofPayoutTest() throws ApiException {
        String payoutId = null;
        GetProofPayout200Response response = api.getProofPayout(payoutId);
        // TODO: test validations
    }

    /**
     * Create Payout
     *
     * Create a new payout.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPayoutTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        PostPayoutRequest postPayoutRequest = null;
        PostPayout200Response response = api.postPayout(accessSignature, accessTag, accessUserId, accessUserIp, postPayoutRequest);
        // TODO: test validations
    }

}
