/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetAllUsers200Response;
import org.openapitools.client.model.GetConfig200Response;
import org.openapitools.client.model.GetConfig200ResponseInner;
import org.openapitools.client.model.GetPasswordConfig200Response;
import org.openapitools.client.model.OnboardUserRequest;
import org.openapitools.client.model.PostForgotPasswordRequest;
import org.openapitools.client.model.PutChangePasswordRequest;
import org.openapitools.client.model.PutUserPasswordRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserOnboardingApi
 */
@Disabled
public class UserOnboardingApiTest {

    private final UserOnboardingApi api = new UserOnboardingApi();

    /**
     * Configure Onboarding File
     *
     * Configure onboarding file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configTest() throws ApiException {
        GetConfig200Response getConfig200Response = null;
        GetConfig200Response response = api.config(getConfig200Response);
        // TODO: test validations
    }

    /**
     * Get Onboarded Users
     *
     * Retrieve all the onboarded users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersTest() throws ApiException {
        String onboardingComplete = null;
        String cursor = null;
        GetAllUsers200Response response = api.getAllUsers(onboardingComplete, cursor);
        // TODO: test validations
    }

    /**
     * Get Onboarding Configuration File
     *
     * Retrieve the onboarding configuration file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigTest() throws ApiException {
        GetConfig200Response response = api.getConfig();
        // TODO: test validations
    }

    /**
     * Get Onboarding Callback URL
     *
     * Get onboarding success url and onboarding error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfig_0Test() throws ApiException {
        List<GetConfig200ResponseInner> response = api.getConfig_0();
        // TODO: test validations
    }

    /**
     * Get Password Configuration
     *
     * Retrieve the password configuration. You may read [the dedicated documentation for this feature](/guide/users/onboarding.html#passwords) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPasswordConfigTest() throws ApiException {
        GetPasswordConfig200Response response = api.getPasswordConfig();
        // TODO: test validations
    }

    /**
     * Onboard User
     *
     * Create a User using the onboarding feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void onboardUserTest() throws ApiException {
        OnboardUserRequest onboardUserRequest = null;
        api.onboardUser(onboardUserRequest);
        // TODO: test validations
    }

    /**
     * Onboard User
     *
     * onboard user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void onboardUserValidateTest() throws ApiException {
        String confirmationCode = null;
        api.onboardUserValidate(confirmationCode);
        // TODO: test validations
    }

    /**
     * Send Password Reset Email
     *
     * Send an email with a password reset link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postForgotPasswordTest() throws ApiException {
        PostForgotPasswordRequest postForgotPasswordRequest = null;
        api.postForgotPassword(postForgotPasswordRequest);
        // TODO: test validations
    }

    /**
     * Change User Password
     *
     * Change the password user with the data collected from the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putChangePasswordTest() throws ApiException {
        PutChangePasswordRequest putChangePasswordRequest = null;
        api.putChangePassword(putChangePasswordRequest);
        // TODO: test validations
    }

    /**
     * Update Password Configuration
     *
     * Update the password configuration. You may read [the dedicated documentation for this feature](/guide/users/passwords.html#configuration) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPasswordConfigTest() throws ApiException {
        GetPasswordConfig200Response getPasswordConfig200Response = null;
        GetPasswordConfig200Response response = api.putPasswordConfig(getPasswordConfig200Response);
        // TODO: test validations
    }

    /**
     * Update User Password
     *
     * Change the password of a User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putUserPasswordTest() throws ApiException {
        String userId = null;
        PutUserPasswordRequest putUserPasswordRequest = null;
        api.putUserPassword(userId, putUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Update Onboarding Callback URL
     *
     * Update onboarding success url callback and/or onboarding error url callback 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigTest() throws ApiException {
        GetConfig200ResponseInner getConfig200ResponseInner = null;
        List<GetConfig200ResponseInner> response = api.updateConfig(getConfig200ResponseInner);
        // TODO: test validations
    }

}
