/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDocumentsRequest;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.DocumentObject;
import org.openapitools.client.model.GetDocumentDownloadUrl200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutDocumentRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserDocumentsApi
 */
@Disabled
public class UserDocumentsApiTest {

    private final UserDocumentsApi api = new UserDocumentsApi();

    /**
     * Create Document
     *
     * Create a Document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentsTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        CreateDocumentsRequest createDocumentsRequest = null;
        DocumentObject response = api.createDocuments(accessSignature, accessTag, accessUserId, accessUserIp, createDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Delete Document
     *
     * Remove a document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        Long documentId = null;
        DocumentObject response = api.deleteDocument(documentId);
        // TODO: test validations
    }

    /**
     * Get Document
     *
     * Retrieve a Document using its &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        Long documentId = null;
        DocumentObject response = api.getDocument(documentId);
        // TODO: test validations
    }

    /**
     * Get Document Download URL
     *
     * Retrieve a Document download URL. You may read [the dedicated documentation for this feature](/guide/user-verification/documents.html#download). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentDownloadUrlTest() throws ApiException {
        Long documentId = null;
        GetDocumentDownloadUrl200Response response = api.getDocumentDownloadUrl(documentId);
        // TODO: test validations
    }

    /**
     * Search Documents
     *
     * Retrieve Documents based on search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        Integer documentId = null;
        String documentTag = null;
        String documentStatus = null;
        Integer documentTypeId = null;
        String documentType = null;
        Integer userId = null;
        String userName = null;
        String userEmail = null;
        String fileName = null;
        Integer fileSize = null;
        Integer fileType = null;
        String isAgent = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        DocumentObject response = api.getDocuments(accessSignature, accessTag, accessUserId, accessUserIp, documentId, documentTag, documentStatus, documentTypeId, documentType, userId, userName, userEmail, fileName, fileSize, fileType, isAgent, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        // TODO: test validations
    }

    /**
     * Update Document
     *
     * Change the &#x60;name&#x60; of a Document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDocumentTest() throws ApiException {
        Long documentId = null;
        PutDocumentRequest putDocumentRequest = null;
        DocumentObject response = api.putDocument(documentId, putDocumentRequest);
        // TODO: test validations
    }

}
