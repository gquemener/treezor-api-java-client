/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetOperations200Response;
import org.openapitools.client.model.GetOperationsReport200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostOperationsReportRequest;
import org.openapitools.client.model.SimulateOperationsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OperationsApi
 */
@Disabled
public class OperationsApiTest {

    private final OperationsApi api = new OperationsApi();

    /**
     * Search Operations
     *
     * Retrieve Operations that match your search conditions. The request must specify at least: &#x60;walletId&#x60;, &#x60;dateTo&#x60;, &#x60;dateFrom&#x60;.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html) for operations that are more than 90 days old. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationsTest() throws ApiException {
        Long cardId = null;
        Long walletId = null;
        OffsetDateTime dateFrom = null;
        OffsetDateTime dateTo = null;
        Long pageSize = null;
        String operationType = null;
        String cursor = null;
        GetOperations200Response response = api.getOperations(cardId, walletId, dateFrom, dateTo, pageSize, operationType, cursor);
        // TODO: test validations
    }

    /**
     * Get Operations Report
     *
     * Retrieve an Operations Report based on the corresponding Wallet &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationsReportTest() throws ApiException {
        Integer walletId = null;
        String dateFrom = null;
        String dateTo = null;
        GetOperationsReport200Response response = api.getOperationsReport(walletId, dateFrom, dateTo);
        // TODO: test validations
    }

    /**
     * Create Operations Report
     *
     * Create a CSV export that includes all operations for a given Wallet on a given period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOperationsReportTest() throws ApiException {
        Integer walletId = null;
        PostOperationsReportRequest postOperationsReportRequest = null;
        api.postOperationsReport(walletId, postOperationsReportRequest);
        // TODO: test validations
    }

    /**
     * Simulate Operations
     *
     * Create fake operations for a given Wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateOperationsTest() throws ApiException {
        SimulateOperationsRequest simulateOperationsRequest = null;
        api.simulateOperations(simulateOperationsRequest);
        // TODO: test validations
    }

}
