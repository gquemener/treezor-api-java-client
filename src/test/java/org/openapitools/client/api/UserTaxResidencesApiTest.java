/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCardsDefaultResponse;
import org.openapitools.client.model.PostTaxresidenceRequest;
import org.openapitools.client.model.TaxResidenceObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserTaxResidencesApi
 */
@Disabled
public class UserTaxResidencesApiTest {

    private final UserTaxResidencesApi api = new UserTaxResidencesApi();

    /**
     * Delete a residence
     *
     * Delete a residence that match id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaxresidenceTest() throws ApiException {
        Integer taxResidenceId = null;
        String accessSignature = null;
        TaxResidenceObject response = api.deleteTaxresidence(taxResidenceId, accessSignature);
        // TODO: test validations
    }

    /**
     * Get Tax Residence
     *
     * Retrieve a Tax Residence based on its &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxresidenceTest() throws ApiException {
        Integer taxResidenceId = null;
        String accessSignature = null;
        TaxResidenceObject response = api.getTaxresidence(taxResidenceId, accessSignature);
        // TODO: test validations
    }

    /**
     * Search Tax Residences
     *
     * Retrieve Tax Residences that match your search conditions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxresidencesTest() throws ApiException {
        String accessSignature = null;
        Integer id = null;
        Integer userId = null;
        TaxResidenceObject response = api.getTaxresidences(accessSignature, id, userId);
        // TODO: test validations
    }

    /**
     * Create Tax Residence
     *
     * Create a new Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTaxresidenceTest() throws ApiException {
        String accessSignature = null;
        PostTaxresidenceRequest postTaxresidenceRequest = null;
        TaxResidenceObject response = api.postTaxresidence(accessSignature, postTaxresidenceRequest);
        // TODO: test validations
    }

    /**
     * Update Tax Residence
     *
     * Modify an existing Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTaxresidenceTest() throws ApiException {
        Integer taxResidenceId = null;
        String accessSignature = null;
        Integer userId = null;
        String country = null;
        String taxPayerId = null;
        Boolean liabilityWaiver = null;
        TaxResidenceObject response = api.putTaxresidence(taxResidenceId, accessSignature, userId, country, taxPayerId, liabilityWaiver);
        // TODO: test validations
    }

}
