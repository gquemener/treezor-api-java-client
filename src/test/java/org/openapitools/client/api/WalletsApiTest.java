/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.DeleteWallet200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostWalletsRequest;
import org.openapitools.client.model.PutWalletRequest;
import org.openapitools.client.model.WalletObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletsApi
 */
@Disabled
public class WalletsApiTest {

    private final WalletsApi api = new WalletsApi();

    /**
     * Delete Wallet
     *
     * Change the status of the Wallet to &#x60;CANCELED&#x60;. This action is irreversible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWalletTest() throws ApiException {
        Integer walletId = null;
        String origin = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        DeleteWallet200Response response = api.deleteWallet(walletId, origin, accessSignature, accessTag, accessUserId, accessUserIp);
        // TODO: test validations
    }

    /**
     * Get Wallet
     *
     * Retrieve a Wallet based on its &#x60;id&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletTest() throws ApiException {
        Long walletId = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        WalletObject response = api.getWallet(walletId, accessSignature, accessTag, accessUserId, accessUserIp);
        // TODO: test validations
    }

    /**
     * Search Wallets
     *
     * Retrieve Wallets that match your search conditions. The request must specify at least one of those fields: &#x60;walletId&#x60;, &#x60;eventAlias&#x60;, &#x60;userId&#x60;, &#x60;walletTypeId&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletsTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        Integer accessUserIp = null;
        Integer walletId = null;
        String walletStatus = null;
        Integer userId = null;
        Integer parentUserId = null;
        String walletTag = null;
        Integer walletTypeId = null;
        String eventAlias = null;
        Integer tariffId = null;
        Integer pageNumber = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        OffsetDateTime updatedDateFrom = null;
        OffsetDateTime updatedDateTo = null;
        WalletObject response = api.getWallets(accessSignature, accessTag, accessUserId, accessUserIp, walletId, walletStatus, userId, parentUserId, walletTag, walletTypeId, eventAlias, tariffId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        // TODO: test validations
    }

    /**
     * Create Wallet
     *
     * Create a new Wallet. This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postWalletsTest() throws ApiException {
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        Integer accessUserIp = null;
        PostWalletsRequest postWalletsRequest = null;
        WalletObject response = api.postWallets(accessSignature, accessTag, accessUserId, accessUserIp, postWalletsRequest);
        // TODO: test validations
    }

    /**
     * Update Wallet
     *
     * Modifiy a Wallet information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putWalletTest() throws ApiException {
        Long walletId = null;
        String accessSignature = null;
        String accessTag = null;
        Integer accessUserId = null;
        String accessUserIp = null;
        PutWalletRequest putWalletRequest = null;
        WalletObject response = api.putWallet(walletId, accessSignature, accessTag, accessUserId, accessUserIp, putWalletRequest);
        // TODO: test validations
    }

}
