/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.NotificationSimulationAuthorizationResponse;
import org.openapitools.client.model.NotificationSimulationAuthorizations;
import org.openapitools.client.model.NotificationSimulationChargebackResponse;
import org.openapitools.client.model.NotificationSimulationPayinResponse;
import org.openapitools.client.model.NotificationSimulationPayinsCardPaymentMethod;
import org.openapitools.client.model.NotificationSimulationRefundResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AcquiringSimulationApi
 */
@Disabled
public class AcquiringSimulationApiTest {

    private final AcquiringSimulationApi api = new AcquiringSimulationApi();

    /**
     * Simulate an HiPay authorization notification
     *
     * Mocks an HiPay authorization notification provided the minimal set of parameters to generate a refund notification. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquiringv2TopupCardsSimulationNotificationAutorizationTest() throws ApiException {
        NotificationSimulationAuthorizations notificationSimulationAuthorizations = null;
        NotificationSimulationAuthorizationResponse response = api.acquiringv2TopupCardsSimulationNotificationAutorization(notificationSimulationAuthorizations);
        // TODO: test validations
    }

    /**
     * Simulate an HiPay chargeback notification
     *
     * Mocks an HiPay chargeback notification providing the minimal set of parameters to generate a chargeback notification. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquiringv2TopupCardsSimulationNotificationChargebacksTest() throws ApiException {
        String transactionReference = null;
        NotificationSimulationChargebackResponse response = api.acquiringv2TopupCardsSimulationNotificationChargebacks(transactionReference);
        // TODO: test validations
    }

    /**
     * Simulate an HiPay payin notification
     *
     * Mocks an HiPay payin notification providing the minimal set of parameters to generate a payin notification. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquiringv2TopupCardsSimulationNotificationPayinsTest() throws ApiException {
        String walletId = null;
        BigDecimal amount = null;
        String currency = null;
        String userId = null;
        Integer status = null;
        String transactionReference = null;
        NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod = null;
        String profile = null;
        NotificationSimulationPayinResponse response = api.acquiringv2TopupCardsSimulationNotificationPayins(walletId, amount, currency, userId, status, transactionReference, cardPaymentMethod, profile);
        // TODO: test validations
    }

    /**
     * Simulate an HiPay refund notification
     *
     * Mocks an HiPay refund notification providing the minimal set of parameters to generate a refund notification. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquiringv2TopupCardsSimulationNotificationRefundsTest() throws ApiException {
        String payinId = null;
        String userId = null;
        String walletId = null;
        BigDecimal amount = null;
        String currency = null;
        Integer status = null;
        String transactionReference = null;
        NotificationSimulationRefundResponse response = api.acquiringv2TopupCardsSimulationNotificationRefunds(payinId, userId, walletId, amount, currency, status, transactionReference);
        // TODO: test validations
    }

}
