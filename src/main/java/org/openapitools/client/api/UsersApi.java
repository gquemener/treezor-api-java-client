/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCardsDefaultResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostUsersRequest;
import org.openapitools.client.model.PutUserRequest;
import org.openapitools.client.model.UserObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUser
     * @param userId The unique identifier of the User. (required)
     * @param origin The origin of the request for cancelling the User, which can be one of the following:  * &#x60;OPERATOR&#x60; – When you are at the origin of the deactivation. * &#x60;USER&#x60; – When the end user is at the origin of the deactivation.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(Integer userId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(Integer userId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling deleteUser(Async)");
        }

        return deleteUserCall(userId, origin, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Disable User
     * Update the user Status to &#x60;CANCELED&#x60;. See the [Deletion](/guide/users/modifications.html#deletion) article for more information. 
     * @param userId The unique identifier of the User. (required)
     * @param origin The origin of the request for cancelling the User, which can be one of the following:  * &#x60;OPERATOR&#x60; – When you are at the origin of the deactivation. * &#x60;USER&#x60; – When the end user is at the origin of the deactivation.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return UserObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserObject deleteUser(Integer userId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<UserObject> localVarResp = deleteUserWithHttpInfo(userId, origin, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Disable User
     * Update the user Status to &#x60;CANCELED&#x60;. See the [Deletion](/guide/users/modifications.html#deletion) article for more information. 
     * @param userId The unique identifier of the User. (required)
     * @param origin The origin of the request for cancelling the User, which can be one of the following:  * &#x60;OPERATOR&#x60; – When you are at the origin of the deactivation. * &#x60;USER&#x60; – When the end user is at the origin of the deactivation.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;UserObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserObject> deleteUserWithHttpInfo(Integer userId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, origin, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable User (asynchronously)
     * Update the user Status to &#x60;CANCELED&#x60;. See the [Deletion](/guide/users/modifications.html#deletion) article for more information. 
     * @param userId The unique identifier of the User. (required)
     * @param origin The origin of the request for cancelling the User, which can be one of the following:  * &#x60;OPERATOR&#x60; – When you are at the origin of the deactivation. * &#x60;USER&#x60; – When the end user is at the origin of the deactivation.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(Integer userId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<UserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, origin, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Get User
     * Retrieve user&#39;s information for given user&#39;s &#x60;id&#x60;.
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return UserObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserObject getUser(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<UserObject> localVarResp = getUserWithHttpInfo(userId, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Get User
     * Retrieve user&#39;s information for given user&#39;s &#x60;id&#x60;.
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;UserObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserObject> getUserWithHttpInfo(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously)
     * Retrieve user&#39;s information for given user&#39;s &#x60;id&#x60;.
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<UserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param userId The unique identifier of the User. (optional)
     * @param userTypeId The type of the user. (optional)
     * @param userStatus Status of the user. (optional)
     * @param userTag Custom data that you can add to this item. (optional)
     * @param specifiedUSPerson You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).  (optional)
     * @param controllingPersonType Type of relationship (optional)
     * @param employeeType Type of user&#39;s role (optional)
     * @param email User&#39;s email address (must be valid). (optional)
     * @param name Name of the user. (optional)
     * @param legalName Business name (optional)
     * @param parentUserId Unique identifier of the parent of the user. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.  (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer userId, Integer userTypeId, String userStatus, String userTag, Integer specifiedUSPerson, Integer controllingPersonType, Integer employeeType, String email, String name, String legalName, String parentUserId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userTypeId", userTypeId));
        }

        if (userStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userStatus", userStatus));
        }

        if (userTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userTag", userTag));
        }

        if (specifiedUSPerson != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specifiedUSPerson", specifiedUSPerson));
        }

        if (controllingPersonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("controllingPersonType", controllingPersonType));
        }

        if (employeeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeType", employeeType));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (legalName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("legalName", legalName));
        }

        if (parentUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentUserId", parentUserId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer userId, Integer userTypeId, String userStatus, String userTag, Integer specifiedUSPerson, Integer controllingPersonType, Integer employeeType, String email, String name, String legalName, String parentUserId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        return getUsersCall(accessSignature, accessTag, accessUserId, accessUserIp, userId, userTypeId, userStatus, userTag, specifiedUSPerson, controllingPersonType, employeeType, email, name, legalName, parentUserId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);

    }

    /**
     * Search Users
     * Retrieve Users matching your search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param userId The unique identifier of the User. (optional)
     * @param userTypeId The type of the user. (optional)
     * @param userStatus Status of the user. (optional)
     * @param userTag Custom data that you can add to this item. (optional)
     * @param specifiedUSPerson You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).  (optional)
     * @param controllingPersonType Type of relationship (optional)
     * @param employeeType Type of user&#39;s role (optional)
     * @param email User&#39;s email address (must be valid). (optional)
     * @param name Name of the user. (optional)
     * @param legalName Business name (optional)
     * @param parentUserId Unique identifier of the parent of the user. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.  (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @return UserObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserObject getUsers(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer userId, Integer userTypeId, String userStatus, String userTag, Integer specifiedUSPerson, Integer controllingPersonType, Integer employeeType, String email, String name, String legalName, String parentUserId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        ApiResponse<UserObject> localVarResp = getUsersWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, userId, userTypeId, userStatus, userTag, specifiedUSPerson, controllingPersonType, employeeType, email, name, legalName, parentUserId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        return localVarResp.getData();
    }

    /**
     * Search Users
     * Retrieve Users matching your search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param userId The unique identifier of the User. (optional)
     * @param userTypeId The type of the user. (optional)
     * @param userStatus Status of the user. (optional)
     * @param userTag Custom data that you can add to this item. (optional)
     * @param specifiedUSPerson You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).  (optional)
     * @param controllingPersonType Type of relationship (optional)
     * @param employeeType Type of user&#39;s role (optional)
     * @param email User&#39;s email address (must be valid). (optional)
     * @param name Name of the user. (optional)
     * @param legalName Business name (optional)
     * @param parentUserId Unique identifier of the parent of the user. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.  (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @return ApiResponse&lt;UserObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserObject> getUsersWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer userId, Integer userTypeId, String userStatus, String userTag, Integer specifiedUSPerson, Integer controllingPersonType, Integer employeeType, String email, String name, String legalName, String parentUserId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, userId, userTypeId, userStatus, userTag, specifiedUSPerson, controllingPersonType, employeeType, email, name, legalName, parentUserId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, null);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Users (asynchronously)
     * Retrieve Users matching your search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param userId The unique identifier of the User. (optional)
     * @param userTypeId The type of the user. (optional)
     * @param userStatus Status of the user. (optional)
     * @param userTag Custom data that you can add to this item. (optional)
     * @param specifiedUSPerson You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).  (optional)
     * @param controllingPersonType Type of relationship (optional)
     * @param employeeType Type of user&#39;s role (optional)
     * @param email User&#39;s email address (must be valid). (optional)
     * @param name Name of the user. (optional)
     * @param legalName Business name (optional)
     * @param parentUserId Unique identifier of the parent of the user. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.  (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer userId, Integer userTypeId, String userStatus, String userTag, Integer specifiedUSPerson, Integer controllingPersonType, Integer employeeType, String email, String name, String legalName, String parentUserId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback<UserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, userId, userTypeId, userStatus, userTag, specifiedUSPerson, controllingPersonType, employeeType, email, name, legalName, parentUserId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUsers
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postUsersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostUsersRequest postUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postUsersRequest;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUsersValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostUsersRequest postUsersRequest, final ApiCallback _callback) throws ApiException {
        return postUsersCall(accessSignature, accessTag, accessUserId, accessUserIp, postUsersRequest, _callback);

    }

    /**
     * Create User
     * You may read [the dedicated documentation for this feature](/guide/users/introduction.html#creation) 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postUsersRequest  (optional)
     * @return UserObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserObject postUsers(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostUsersRequest postUsersRequest) throws ApiException {
        ApiResponse<UserObject> localVarResp = postUsersWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, postUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Create User
     * You may read [the dedicated documentation for this feature](/guide/users/introduction.html#creation) 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postUsersRequest  (optional)
     * @return ApiResponse&lt;UserObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserObject> postUsersWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostUsersRequest postUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = postUsersValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postUsersRequest, null);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * You may read [the dedicated documentation for this feature](/guide/users/introduction.html#creation) 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postUsersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostUsersRequest postUsersRequest, final ApiCallback<UserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUsersValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putKycreview
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKycreviewCall(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/Kycreview"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putKycreviewValidateBeforeCall(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putKycreview(Async)");
        }

        return putKycreviewCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Request KYC Review
     * Request a KYC review for a given user and its children to Treezor. Learn more in the [KYC Request](/guide/user-verification/kyc-request.html) article. 
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return UserObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserObject putKycreview(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<UserObject> localVarResp = putKycreviewWithHttpInfo(userId, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Request KYC Review
     * Request a KYC review for a given user and its children to Treezor. Learn more in the [KYC Request](/guide/user-verification/kyc-request.html) article. 
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;UserObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserObject> putKycreviewWithHttpInfo(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = putKycreviewValidateBeforeCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request KYC Review (asynchronously)
     * Request a KYC review for a given user and its children to Treezor. Learn more in the [KYC Request](/guide/user-verification/kyc-request.html) article. 
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKycreviewAsync(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<UserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putKycreviewValidateBeforeCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putUser
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putUserCall(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutUserRequest putUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putUserRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "applicationcjson",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putUserValidateBeforeCall(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutUserRequest putUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putUser(Async)");
        }

        return putUserCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, putUserRequest, _callback);

    }

    /**
     * Update User
     * Update user&#39;s information.  This endpoint may require per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putUserRequest  (optional)
     * @return UserObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserObject putUser(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutUserRequest putUserRequest) throws ApiException {
        ApiResponse<UserObject> localVarResp = putUserWithHttpInfo(userId, accessSignature, accessTag, accessUserId, accessUserIp, putUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update User
     * Update user&#39;s information.  This endpoint may require per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putUserRequest  (optional)
     * @return ApiResponse&lt;UserObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserObject> putUserWithHttpInfo(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutUserRequest putUserRequest) throws ApiException {
        okhttp3.Call localVarCall = putUserValidateBeforeCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, putUserRequest, null);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * Update user&#39;s information.  This endpoint may require per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param userId The unique identifier of the User. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putUserAsync(Integer userId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutUserRequest putUserRequest, final ApiCallback<UserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putUserValidateBeforeCall(userId, accessSignature, accessTag, accessUserId, accessUserIp, putUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
