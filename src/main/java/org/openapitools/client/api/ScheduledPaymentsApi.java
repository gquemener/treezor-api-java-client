/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetScheduledPaymentOperations200Response;
import org.openapitools.client.model.PostScheduledPaymentRequest;
import org.openapitools.client.model.ScheduledPayment;
import org.openapitools.client.model.ScheduledPayment1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduledPaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduledPaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduledPaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteScheduledPayment
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScheduledPaymentCall(String scheduledPaymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/scheduledPayment/{scheduledPaymentId}"
            .replace("{" + "scheduledPaymentId" + "}", localVarApiClient.escapeString(scheduledPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScheduledPaymentValidateBeforeCall(String scheduledPaymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduledPaymentId' is set
        if (scheduledPaymentId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPaymentId' when calling deleteScheduledPayment(Async)");
        }

        return deleteScheduledPaymentCall(scheduledPaymentId, _callback);

    }

    /**
     * Delete Scheduled Payment
     * Cancel a Scheduled Payment order
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @return ScheduledPayment1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledPayment1 deleteScheduledPayment(String scheduledPaymentId) throws ApiException {
        ApiResponse<ScheduledPayment1> localVarResp = deleteScheduledPaymentWithHttpInfo(scheduledPaymentId);
        return localVarResp.getData();
    }

    /**
     * Delete Scheduled Payment
     * Cancel a Scheduled Payment order
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @return ApiResponse&lt;ScheduledPayment1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledPayment1> deleteScheduledPaymentWithHttpInfo(String scheduledPaymentId) throws ApiException {
        okhttp3.Call localVarCall = deleteScheduledPaymentValidateBeforeCall(scheduledPaymentId, null);
        Type localVarReturnType = new TypeToken<ScheduledPayment1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Scheduled Payment (asynchronously)
     * Cancel a Scheduled Payment order
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScheduledPaymentAsync(String scheduledPaymentId, final ApiCallback<ScheduledPayment1> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScheduledPaymentValidateBeforeCall(scheduledPaymentId, _callback);
        Type localVarReturnType = new TypeToken<ScheduledPayment1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScheduledPayment
     * @param userId The unique identifier of the Wallet to be debited. (optional)
     * @param walletId The unique identifier of the User owning the Wallet to debit. (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param pageSize Number of results per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScheduledPaymentCall(Integer userId, Integer walletId, String cursor, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/scheduledPayment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScheduledPaymentValidateBeforeCall(Integer userId, Integer walletId, String cursor, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        return getScheduledPaymentCall(userId, walletId, cursor, pageSize, _callback);

    }

    /**
     * Get Scheduled Payment
     * Retrieve Scheduled Payment orders based on the corresponding &#x60;userId&#x60; and/or &#x60;walletId&#x60;
     * @param userId The unique identifier of the Wallet to be debited. (optional)
     * @param walletId The unique identifier of the User owning the Wallet to debit. (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param pageSize Number of results per page. (optional)
     * @return ScheduledPayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledPayment getScheduledPayment(Integer userId, Integer walletId, String cursor, BigDecimal pageSize) throws ApiException {
        ApiResponse<ScheduledPayment> localVarResp = getScheduledPaymentWithHttpInfo(userId, walletId, cursor, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Scheduled Payment
     * Retrieve Scheduled Payment orders based on the corresponding &#x60;userId&#x60; and/or &#x60;walletId&#x60;
     * @param userId The unique identifier of the Wallet to be debited. (optional)
     * @param walletId The unique identifier of the User owning the Wallet to debit. (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param pageSize Number of results per page. (optional)
     * @return ApiResponse&lt;ScheduledPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledPayment> getScheduledPaymentWithHttpInfo(Integer userId, Integer walletId, String cursor, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = getScheduledPaymentValidateBeforeCall(userId, walletId, cursor, pageSize, null);
        Type localVarReturnType = new TypeToken<ScheduledPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scheduled Payment (asynchronously)
     * Retrieve Scheduled Payment orders based on the corresponding &#x60;userId&#x60; and/or &#x60;walletId&#x60;
     * @param userId The unique identifier of the Wallet to be debited. (optional)
     * @param walletId The unique identifier of the User owning the Wallet to debit. (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param pageSize Number of results per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScheduledPaymentAsync(Integer userId, Integer walletId, String cursor, BigDecimal pageSize, final ApiCallback<ScheduledPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScheduledPaymentValidateBeforeCall(userId, walletId, cursor, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ScheduledPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScheduledPaymentOperations
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScheduledPaymentOperationsCall(String scheduledPaymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/scheduledPayment/{scheduledPaymentId}/payments"
            .replace("{" + "scheduledPaymentId" + "}", localVarApiClient.escapeString(scheduledPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScheduledPaymentOperationsValidateBeforeCall(String scheduledPaymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduledPaymentId' is set
        if (scheduledPaymentId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPaymentId' when calling getScheduledPaymentOperations(Async)");
        }

        return getScheduledPaymentOperationsCall(scheduledPaymentId, _callback);

    }

    /**
     * Get Scheduled Payment Operations
     * Retrieve the list of executed payments for a given Scheduled Payment order
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @return GetScheduledPaymentOperations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetScheduledPaymentOperations200Response getScheduledPaymentOperations(String scheduledPaymentId) throws ApiException {
        ApiResponse<GetScheduledPaymentOperations200Response> localVarResp = getScheduledPaymentOperationsWithHttpInfo(scheduledPaymentId);
        return localVarResp.getData();
    }

    /**
     * Get Scheduled Payment Operations
     * Retrieve the list of executed payments for a given Scheduled Payment order
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @return ApiResponse&lt;GetScheduledPaymentOperations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetScheduledPaymentOperations200Response> getScheduledPaymentOperationsWithHttpInfo(String scheduledPaymentId) throws ApiException {
        okhttp3.Call localVarCall = getScheduledPaymentOperationsValidateBeforeCall(scheduledPaymentId, null);
        Type localVarReturnType = new TypeToken<GetScheduledPaymentOperations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scheduled Payment Operations (asynchronously)
     * Retrieve the list of executed payments for a given Scheduled Payment order
     * @param scheduledPaymentId The unique identifier of the Scheduled Payment order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScheduledPaymentOperationsAsync(String scheduledPaymentId, final ApiCallback<GetScheduledPaymentOperations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScheduledPaymentOperationsValidateBeforeCall(scheduledPaymentId, _callback);
        Type localVarReturnType = new TypeToken<GetScheduledPaymentOperations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScheduledPayment
     * @param postScheduledPaymentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScheduledPaymentCall(PostScheduledPaymentRequest postScheduledPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postScheduledPaymentRequest;

        // create path and map variables
        String localVarPath = "/core-connect/scheduledPayment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScheduledPaymentValidateBeforeCall(PostScheduledPaymentRequest postScheduledPaymentRequest, final ApiCallback _callback) throws ApiException {
        return postScheduledPaymentCall(postScheduledPaymentRequest, _callback);

    }

    /**
     * Create Scheduled Payment
     * Schedule a Payout or a Wallet-to-Wallet transfer for a future date.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param postScheduledPaymentRequest  (optional)
     * @return ScheduledPayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledPayment postScheduledPayment(PostScheduledPaymentRequest postScheduledPaymentRequest) throws ApiException {
        ApiResponse<ScheduledPayment> localVarResp = postScheduledPaymentWithHttpInfo(postScheduledPaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Create Scheduled Payment
     * Schedule a Payout or a Wallet-to-Wallet transfer for a future date.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param postScheduledPaymentRequest  (optional)
     * @return ApiResponse&lt;ScheduledPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledPayment> postScheduledPaymentWithHttpInfo(PostScheduledPaymentRequest postScheduledPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = postScheduledPaymentValidateBeforeCall(postScheduledPaymentRequest, null);
        Type localVarReturnType = new TypeToken<ScheduledPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Scheduled Payment (asynchronously)
     * Schedule a Payout or a Wallet-to-Wallet transfer for a future date.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param postScheduledPaymentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK â€“ Scheduled payment created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScheduledPaymentAsync(PostScheduledPaymentRequest postScheduledPaymentRequest, final ApiCallback<ScheduledPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScheduledPaymentValidateBeforeCall(postScheduledPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<ScheduledPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
