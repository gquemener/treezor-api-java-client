/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetSCAWalletsDefaultResponseInner;
import org.openapitools.client.model.PostScaWalletRequest;
import org.openapitools.client.model.PutScaWalletRequest;
import org.openapitools.client.model.ScaWalletObject;
import org.openapitools.client.model.SetPasscodeRequest;
import org.openapitools.client.model.SwapSCAWalletsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScaWalletsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScaWalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScaWalletsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteScaWallet
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScaWalletCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets/{scaWalletId}"
            .replace("{" + "scaWalletId" + "}", localVarApiClient.escapeString(scaWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScaWalletValidateBeforeCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scaWalletId' is set
        if (scaWalletId == null) {
            throw new ApiException("Missing the required parameter 'scaWalletId' when calling deleteScaWallet(Async)");
        }

        return deleteScaWalletCall(scaWalletId, _callback);

    }

    /**
     * Delete SCA Wallet
     * Permanently delete an SCA Wallet.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject deleteScaWallet(String scaWalletId) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = deleteScaWalletWithHttpInfo(scaWalletId);
        return localVarResp.getData();
    }

    /**
     * Delete SCA Wallet
     * Permanently delete an SCA Wallet.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> deleteScaWalletWithHttpInfo(String scaWalletId) throws ApiException {
        okhttp3.Call localVarCall = deleteScaWalletValidateBeforeCall(scaWalletId, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete SCA Wallet (asynchronously)
     * Permanently delete an SCA Wallet.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScaWalletAsync(String scaWalletId, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScaWalletValidateBeforeCall(scaWalletId, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSCAWallets
     * @param userId The unique identifier of the user. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCAWalletsCall(String userId, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSCAWalletsValidateBeforeCall(String userId, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSCAWallets(Async)");
        }

        return getSCAWalletsCall(userId, cursor, _callback);

    }

    /**
     * Search SCA Wallets
     * Retrieve the list of [SCA Wallets](/guide/strong-customer-authentication/sca-wallets.html) for a given user.
     * @param userId The unique identifier of the user. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject getSCAWallets(String userId, String cursor) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = getSCAWalletsWithHttpInfo(userId, cursor);
        return localVarResp.getData();
    }

    /**
     * Search SCA Wallets
     * Retrieve the list of [SCA Wallets](/guide/strong-customer-authentication/sca-wallets.html) for a given user.
     * @param userId The unique identifier of the user. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> getSCAWalletsWithHttpInfo(String userId, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getSCAWalletsValidateBeforeCall(userId, cursor, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search SCA Wallets (asynchronously)
     * Retrieve the list of [SCA Wallets](/guide/strong-customer-authentication/sca-wallets.html) for a given user.
     * @param userId The unique identifier of the user. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCAWalletsAsync(String userId, String cursor, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSCAWalletsValidateBeforeCall(userId, cursor, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScaWallet
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The wallet was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScaWalletCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets/{scaWalletId}"
            .replace("{" + "scaWalletId" + "}", localVarApiClient.escapeString(scaWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScaWalletValidateBeforeCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scaWalletId' is set
        if (scaWalletId == null) {
            throw new ApiException("Missing the required parameter 'scaWalletId' when calling getScaWallet(Async)");
        }

        return getScaWalletCall(scaWalletId, _callback);

    }

    /**
     * Get SCA Wallet
     * Retrieve an SCA Wallet by providing its &#x60;id&#x60;.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The wallet was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject getScaWallet(String scaWalletId) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = getScaWalletWithHttpInfo(scaWalletId);
        return localVarResp.getData();
    }

    /**
     * Get SCA Wallet
     * Retrieve an SCA Wallet by providing its &#x60;id&#x60;.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The wallet was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> getScaWalletWithHttpInfo(String scaWalletId) throws ApiException {
        okhttp3.Call localVarCall = getScaWalletValidateBeforeCall(scaWalletId, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SCA Wallet (asynchronously)
     * Retrieve an SCA Wallet by providing its &#x60;id&#x60;.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The wallet was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScaWalletAsync(String scaWalletId, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScaWalletValidateBeforeCall(scaWalletId, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScaWallet
     * @param postScaWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScaWalletCall(PostScaWalletRequest postScaWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postScaWalletRequest;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScaWalletValidateBeforeCall(PostScaWalletRequest postScaWalletRequest, final ApiCallback _callback) throws ApiException {
        return postScaWalletCall(postScaWalletRequest, _callback);

    }

    /**
     * Create SCA Wallet
     * Create a new [SCA Wallet](/guide/strong-customer-authentication/sca-wallets.html) manually.
     * @param postScaWalletRequest  (optional)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject postScaWallet(PostScaWalletRequest postScaWalletRequest) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = postScaWalletWithHttpInfo(postScaWalletRequest);
        return localVarResp.getData();
    }

    /**
     * Create SCA Wallet
     * Create a new [SCA Wallet](/guide/strong-customer-authentication/sca-wallets.html) manually.
     * @param postScaWalletRequest  (optional)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> postScaWalletWithHttpInfo(PostScaWalletRequest postScaWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = postScaWalletValidateBeforeCall(postScaWalletRequest, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create SCA Wallet (asynchronously)
     * Create a new [SCA Wallet](/guide/strong-customer-authentication/sca-wallets.html) manually.
     * @param postScaWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScaWalletAsync(PostScaWalletRequest postScaWalletRequest, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScaWalletValidateBeforeCall(postScaWalletRequest, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putScaWallet
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param putScaWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is locked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The lock reason field is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putScaWalletCall(String scaWalletId, PutScaWalletRequest putScaWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putScaWalletRequest;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets/{scaWalletId}/lock"
            .replace("{" + "scaWalletId" + "}", localVarApiClient.escapeString(scaWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putScaWalletValidateBeforeCall(String scaWalletId, PutScaWalletRequest putScaWalletRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scaWalletId' is set
        if (scaWalletId == null) {
            throw new ApiException("Missing the required parameter 'scaWalletId' when calling putScaWallet(Async)");
        }

        return putScaWalletCall(scaWalletId, putScaWalletRequest, _callback);

    }

    /**
     * Lock SCA Wallet
     * Locks an SCA Wallet so that none of the services it offers can be unlocked until it is unlocked. 
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param putScaWalletRequest  (optional)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is locked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The lock reason field is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject putScaWallet(String scaWalletId, PutScaWalletRequest putScaWalletRequest) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = putScaWalletWithHttpInfo(scaWalletId, putScaWalletRequest);
        return localVarResp.getData();
    }

    /**
     * Lock SCA Wallet
     * Locks an SCA Wallet so that none of the services it offers can be unlocked until it is unlocked. 
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param putScaWalletRequest  (optional)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is locked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The lock reason field is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> putScaWalletWithHttpInfo(String scaWalletId, PutScaWalletRequest putScaWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = putScaWalletValidateBeforeCall(scaWalletId, putScaWalletRequest, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lock SCA Wallet (asynchronously)
     * Locks an SCA Wallet so that none of the services it offers can be unlocked until it is unlocked. 
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param putScaWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is locked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The lock reason field is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putScaWalletAsync(String scaWalletId, PutScaWalletRequest putScaWalletRequest, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putScaWalletValidateBeforeCall(scaWalletId, putScaWalletRequest, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetScaWalletPin
     * @param scaWalletId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIN has been reset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetScaWalletPinCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets/{scaWalletId}/resetPin"
            .replace("{" + "scaWalletId" + "}", localVarApiClient.escapeString(scaWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetScaWalletPinValidateBeforeCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scaWalletId' is set
        if (scaWalletId == null) {
            throw new ApiException("Missing the required parameter 'scaWalletId' when calling resetScaWalletPin(Async)");
        }

        return resetScaWalletPinCall(scaWalletId, _callback);

    }

    /**
     * Reset PIN
     * This endpoint is used to reset the PIN code of a Wallet. &lt;br&gt; This web service should be used when a Customer has locked their Wallet after too many consecutive wrong PIN attempts. &lt;br&gt; Once the PIN has been reset, the Customer is able to set a new PIN via the mobile application, without having to enter the previous PIN. 
     * @param scaWalletId  (required)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIN has been reset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject resetScaWalletPin(String scaWalletId) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = resetScaWalletPinWithHttpInfo(scaWalletId);
        return localVarResp.getData();
    }

    /**
     * Reset PIN
     * This endpoint is used to reset the PIN code of a Wallet. &lt;br&gt; This web service should be used when a Customer has locked their Wallet after too many consecutive wrong PIN attempts. &lt;br&gt; Once the PIN has been reset, the Customer is able to set a new PIN via the mobile application, without having to enter the previous PIN. 
     * @param scaWalletId  (required)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIN has been reset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> resetScaWalletPinWithHttpInfo(String scaWalletId) throws ApiException {
        okhttp3.Call localVarCall = resetScaWalletPinValidateBeforeCall(scaWalletId, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset PIN (asynchronously)
     * This endpoint is used to reset the PIN code of a Wallet. &lt;br&gt; This web service should be used when a Customer has locked their Wallet after too many consecutive wrong PIN attempts. &lt;br&gt; Once the PIN has been reset, the Customer is able to set a new PIN via the mobile application, without having to enter the previous PIN. 
     * @param scaWalletId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIN has been reset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetScaWalletPinAsync(String scaWalletId, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetScaWalletPinValidateBeforeCall(scaWalletId, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPasscode
     * @param setPasscodeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPasscodeCall(SetPasscodeRequest setPasscodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPasscodeRequest;

        // create path and map variables
        String localVarPath = "/core-connect/sca/setPasscode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPasscodeValidateBeforeCall(SetPasscodeRequest setPasscodeRequest, final ApiCallback _callback) throws ApiException {
        return setPasscodeCall(setPasscodeRequest, _callback);

    }

    /**
     * Change Passcode
     * Change the passcode ([Web Native SCA](/guide/strong-customer-authentication/web-native.html)). 
     * @param setPasscodeRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void setPasscode(SetPasscodeRequest setPasscodeRequest) throws ApiException {
        setPasscodeWithHttpInfo(setPasscodeRequest);
    }

    /**
     * Change Passcode
     * Change the passcode ([Web Native SCA](/guide/strong-customer-authentication/web-native.html)). 
     * @param setPasscodeRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setPasscodeWithHttpInfo(SetPasscodeRequest setPasscodeRequest) throws ApiException {
        okhttp3.Call localVarCall = setPasscodeValidateBeforeCall(setPasscodeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Passcode (asynchronously)
     * Change the passcode ([Web Native SCA](/guide/strong-customer-authentication/web-native.html)). 
     * @param setPasscodeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPasscodeAsync(SetPasscodeRequest setPasscodeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPasscodeValidateBeforeCall(setPasscodeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for swapSCAWallets
     * @param swapSCAWalletsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapSCAWalletsCall(SwapSCAWalletsRequest swapSCAWalletsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = swapSCAWalletsRequest;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets/swap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapSCAWalletsValidateBeforeCall(SwapSCAWalletsRequest swapSCAWalletsRequest, final ApiCallback _callback) throws ApiException {
        return swapSCAWalletsCall(swapSCAWalletsRequest, _callback);

    }

    /**
     * Swap SCA Wallets
     * Create an SCA Wallet while deleting the previous one as users should have only one device enrolled.
     * @param swapSCAWalletsRequest  (optional)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject swapSCAWallets(SwapSCAWalletsRequest swapSCAWalletsRequest) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = swapSCAWalletsWithHttpInfo(swapSCAWalletsRequest);
        return localVarResp.getData();
    }

    /**
     * Swap SCA Wallets
     * Create an SCA Wallet while deleting the previous one as users should have only one device enrolled.
     * @param swapSCAWalletsRequest  (optional)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> swapSCAWalletsWithHttpInfo(SwapSCAWalletsRequest swapSCAWalletsRequest) throws ApiException {
        okhttp3.Call localVarCall = swapSCAWalletsValidateBeforeCall(swapSCAWalletsRequest, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swap SCA Wallets (asynchronously)
     * Create an SCA Wallet while deleting the previous one as users should have only one device enrolled.
     * @param swapSCAWalletsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of wallet was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapSCAWalletsAsync(SwapSCAWalletsRequest swapSCAWalletsRequest, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = swapSCAWalletsValidateBeforeCall(swapSCAWalletsRequest, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockScaWallet
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is unlocked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockScaWalletCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/sca/scawallets/{scaWalletId}/unlock"
            .replace("{" + "scaWalletId" + "}", localVarApiClient.escapeString(scaWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockScaWalletValidateBeforeCall(String scaWalletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scaWalletId' is set
        if (scaWalletId == null) {
            throw new ApiException("Missing the required parameter 'scaWalletId' when calling unlockScaWallet(Async)");
        }

        return unlockScaWalletCall(scaWalletId, _callback);

    }

    /**
     * Unlock SCA Wallet
     * Unlock an SCA Wallet.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @return ScaWalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is unlocked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScaWalletObject unlockScaWallet(String scaWalletId) throws ApiException {
        ApiResponse<ScaWalletObject> localVarResp = unlockScaWalletWithHttpInfo(scaWalletId);
        return localVarResp.getData();
    }

    /**
     * Unlock SCA Wallet
     * Unlock an SCA Wallet.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @return ApiResponse&lt;ScaWalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is unlocked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScaWalletObject> unlockScaWalletWithHttpInfo(String scaWalletId) throws ApiException {
        okhttp3.Call localVarCall = unlockScaWalletValidateBeforeCall(scaWalletId, null);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlock SCA Wallet (asynchronously)
     * Unlock an SCA Wallet.
     * @param scaWalletId The unique identifier of the SCA Wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The wallet is unlocked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockScaWalletAsync(String scaWalletId, final ApiCallback<ScaWalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockScaWalletValidateBeforeCall(scaWalletId, _callback);
        Type localVarReturnType = new TypeToken<ScaWalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
