/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostVirtualIbanRequest;
import org.openapitools.client.model.PutVirtualIbanRequest;
import org.openapitools.client.model.VirtualIbanObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualIbansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualIbansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualIbansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getvirtualiban
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getvirtualibanCall(Integer virtualIbanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/virtualibans/{virtualIbanId}"
            .replace("{" + "virtualIbanId" + "}", localVarApiClient.escapeString(virtualIbanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getvirtualibanValidateBeforeCall(Integer virtualIbanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'virtualIbanId' is set
        if (virtualIbanId == null) {
            throw new ApiException("Missing the required parameter 'virtualIbanId' when calling getvirtualiban(Async)");
        }

        return getvirtualibanCall(virtualIbanId, _callback);

    }

    /**
     * Get Virtual IBAN
     * Retrieve a Virtual IBAN based on its &#x60;id&#x60;.
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @return VirtualIbanObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualIbanObject getvirtualiban(Integer virtualIbanId) throws ApiException {
        ApiResponse<VirtualIbanObject> localVarResp = getvirtualibanWithHttpInfo(virtualIbanId);
        return localVarResp.getData();
    }

    /**
     * Get Virtual IBAN
     * Retrieve a Virtual IBAN based on its &#x60;id&#x60;.
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @return ApiResponse&lt;VirtualIbanObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualIbanObject> getvirtualibanWithHttpInfo(Integer virtualIbanId) throws ApiException {
        okhttp3.Call localVarCall = getvirtualibanValidateBeforeCall(virtualIbanId, null);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Virtual IBAN (asynchronously)
     * Retrieve a Virtual IBAN based on its &#x60;id&#x60;.
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getvirtualibanAsync(Integer virtualIbanId, final ApiCallback<VirtualIbanObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getvirtualibanValidateBeforeCall(virtualIbanId, _callback);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getvirtualibans
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (optional)
     * @param walletId The unique identifier of the Wallet to which the Virtual IBAN is associated. (optional)
     * @param typeId The type of the Virtual IBAN. (optional)
     * @param tag Custom attribute that you can use as you see fit. &lt;br&gt; Learn more in the [Object tags](/guide/api-basics/objects-tags.html) article.  (optional)
     * @param reference The client&#39;s internal reference of the Virtual IBAN. (optional)
     * @param validFrom The date from which the Virtual IBAN validity starts. Defaults to today&#39;s date and must be set in the future. (optional)
     * @param validTo The date from which the Virtual IBAN validity ends. Must be set after the &#x60;validFrom&#x60; date.  (optional)
     * @param maxUsage The maximum number of transactions allowed. (optional)
     * @param maxAmount The maximum cumulated amount allowed. (optional)
     * @param numberOfTransactions The current number of transactions for the Virtual IBAN. (optional)
     * @param cumulatedAmount The cumulated amount of transactions for the Virtual IBAN. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: createdDate.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getvirtualibansCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer virtualIbanId, Integer walletId, Integer typeId, Integer tag, String reference, LocalDate validFrom, LocalDate validTo, Integer maxUsage, Float maxAmount, Integer numberOfTransactions, Float cumulatedAmount, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/virtualibans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (virtualIbanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtualIbanId", virtualIbanId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeId", typeId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        if (validFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validFrom", validFrom));
        }

        if (validTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validTo", validTo));
        }

        if (maxUsage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsage", maxUsage));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAmount", maxAmount));
        }

        if (numberOfTransactions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfTransactions", numberOfTransactions));
        }

        if (cumulatedAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cumulatedAmount", cumulatedAmount));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getvirtualibansValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer virtualIbanId, Integer walletId, Integer typeId, Integer tag, String reference, LocalDate validFrom, LocalDate validTo, Integer maxUsage, Float maxAmount, Integer numberOfTransactions, Float cumulatedAmount, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return getvirtualibansCall(accessSignature, accessTag, accessUserId, accessUserIp, virtualIbanId, walletId, typeId, tag, reference, validFrom, validTo, maxUsage, maxAmount, numberOfTransactions, cumulatedAmount, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, pageNumber, pageCount, sortBy, sortOrder, _callback);

    }

    /**
     * Search Virtual IBANs
     * Retrieve virtual IBANs that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (optional)
     * @param walletId The unique identifier of the Wallet to which the Virtual IBAN is associated. (optional)
     * @param typeId The type of the Virtual IBAN. (optional)
     * @param tag Custom attribute that you can use as you see fit. &lt;br&gt; Learn more in the [Object tags](/guide/api-basics/objects-tags.html) article.  (optional)
     * @param reference The client&#39;s internal reference of the Virtual IBAN. (optional)
     * @param validFrom The date from which the Virtual IBAN validity starts. Defaults to today&#39;s date and must be set in the future. (optional)
     * @param validTo The date from which the Virtual IBAN validity ends. Must be set after the &#x60;validFrom&#x60; date.  (optional)
     * @param maxUsage The maximum number of transactions allowed. (optional)
     * @param maxAmount The maximum cumulated amount allowed. (optional)
     * @param numberOfTransactions The current number of transactions for the Virtual IBAN. (optional)
     * @param cumulatedAmount The cumulated amount of transactions for the Virtual IBAN. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: createdDate.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @return VirtualIbanObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualIbanObject getvirtualibans(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer virtualIbanId, Integer walletId, Integer typeId, Integer tag, String reference, LocalDate validFrom, LocalDate validTo, Integer maxUsage, Float maxAmount, Integer numberOfTransactions, Float cumulatedAmount, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<VirtualIbanObject> localVarResp = getvirtualibansWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, virtualIbanId, walletId, typeId, tag, reference, validFrom, validTo, maxUsage, maxAmount, numberOfTransactions, cumulatedAmount, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, pageNumber, pageCount, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Search Virtual IBANs
     * Retrieve virtual IBANs that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (optional)
     * @param walletId The unique identifier of the Wallet to which the Virtual IBAN is associated. (optional)
     * @param typeId The type of the Virtual IBAN. (optional)
     * @param tag Custom attribute that you can use as you see fit. &lt;br&gt; Learn more in the [Object tags](/guide/api-basics/objects-tags.html) article.  (optional)
     * @param reference The client&#39;s internal reference of the Virtual IBAN. (optional)
     * @param validFrom The date from which the Virtual IBAN validity starts. Defaults to today&#39;s date and must be set in the future. (optional)
     * @param validTo The date from which the Virtual IBAN validity ends. Must be set after the &#x60;validFrom&#x60; date.  (optional)
     * @param maxUsage The maximum number of transactions allowed. (optional)
     * @param maxAmount The maximum cumulated amount allowed. (optional)
     * @param numberOfTransactions The current number of transactions for the Virtual IBAN. (optional)
     * @param cumulatedAmount The cumulated amount of transactions for the Virtual IBAN. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: createdDate.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @return ApiResponse&lt;VirtualIbanObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualIbanObject> getvirtualibansWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer virtualIbanId, Integer walletId, Integer typeId, Integer tag, String reference, LocalDate validFrom, LocalDate validTo, Integer maxUsage, Float maxAmount, Integer numberOfTransactions, Float cumulatedAmount, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getvirtualibansValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, virtualIbanId, walletId, typeId, tag, reference, validFrom, validTo, maxUsage, maxAmount, numberOfTransactions, cumulatedAmount, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, pageNumber, pageCount, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Virtual IBANs (asynchronously)
     * Retrieve virtual IBANs that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (optional)
     * @param walletId The unique identifier of the Wallet to which the Virtual IBAN is associated. (optional)
     * @param typeId The type of the Virtual IBAN. (optional)
     * @param tag Custom attribute that you can use as you see fit. &lt;br&gt; Learn more in the [Object tags](/guide/api-basics/objects-tags.html) article.  (optional)
     * @param reference The client&#39;s internal reference of the Virtual IBAN. (optional)
     * @param validFrom The date from which the Virtual IBAN validity starts. Defaults to today&#39;s date and must be set in the future. (optional)
     * @param validTo The date from which the Virtual IBAN validity ends. Must be set after the &#x60;validFrom&#x60; date.  (optional)
     * @param maxUsage The maximum number of transactions allowed. (optional)
     * @param maxAmount The maximum cumulated amount allowed. (optional)
     * @param numberOfTransactions The current number of transactions for the Virtual IBAN. (optional)
     * @param cumulatedAmount The cumulated amount of transactions for the Virtual IBAN. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: createdDate.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getvirtualibansAsync(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer virtualIbanId, Integer walletId, Integer typeId, Integer tag, String reference, LocalDate validFrom, LocalDate validTo, Integer maxUsage, Float maxAmount, Integer numberOfTransactions, Float cumulatedAmount, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback<VirtualIbanObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getvirtualibansValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, virtualIbanId, walletId, typeId, tag, reference, validFrom, validTo, maxUsage, maxAmount, numberOfTransactions, cumulatedAmount, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, pageNumber, pageCount, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVirtualIban
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postVirtualIbanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVirtualIbanCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostVirtualIbanRequest postVirtualIbanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postVirtualIbanRequest;

        // create path and map variables
        String localVarPath = "/v1/virtualibans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVirtualIbanValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostVirtualIbanRequest postVirtualIbanRequest, final ApiCallback _callback) throws ApiException {
        return postVirtualIbanCall(accessSignature, accessTag, accessUserId, accessUserIp, postVirtualIbanRequest, _callback);

    }

    /**
     * Create Virtual IBAN
     * Create a new virtual IBAN associated with a given Wallet.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postVirtualIbanRequest  (optional)
     * @return VirtualIbanObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualIbanObject postVirtualIban(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostVirtualIbanRequest postVirtualIbanRequest) throws ApiException {
        ApiResponse<VirtualIbanObject> localVarResp = postVirtualIbanWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, postVirtualIbanRequest);
        return localVarResp.getData();
    }

    /**
     * Create Virtual IBAN
     * Create a new virtual IBAN associated with a given Wallet.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postVirtualIbanRequest  (optional)
     * @return ApiResponse&lt;VirtualIbanObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualIbanObject> postVirtualIbanWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostVirtualIbanRequest postVirtualIbanRequest) throws ApiException {
        okhttp3.Call localVarCall = postVirtualIbanValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postVirtualIbanRequest, null);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Virtual IBAN (asynchronously)
     * Create a new virtual IBAN associated with a given Wallet.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postVirtualIbanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVirtualIbanAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostVirtualIbanRequest postVirtualIbanRequest, final ApiCallback<VirtualIbanObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVirtualIbanValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postVirtualIbanRequest, _callback);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVirtualIban
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putVirtualIbanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVirtualIbanCall(Integer virtualIbanId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutVirtualIbanRequest putVirtualIbanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVirtualIbanRequest;

        // create path and map variables
        String localVarPath = "/v1/virtualibans/{virtualIbanId}"
            .replace("{" + "virtualIbanId" + "}", localVarApiClient.escapeString(virtualIbanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVirtualIbanValidateBeforeCall(Integer virtualIbanId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutVirtualIbanRequest putVirtualIbanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'virtualIbanId' is set
        if (virtualIbanId == null) {
            throw new ApiException("Missing the required parameter 'virtualIbanId' when calling putVirtualIban(Async)");
        }

        return putVirtualIbanCall(virtualIbanId, accessSignature, accessTag, accessUserId, accessUserIp, putVirtualIbanRequest, _callback);

    }

    /**
     * Update Virtual IBAN
     * Update a Virtual IBAN&#39;s information.
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putVirtualIbanRequest  (optional)
     * @return VirtualIbanObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualIbanObject putVirtualIban(Integer virtualIbanId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutVirtualIbanRequest putVirtualIbanRequest) throws ApiException {
        ApiResponse<VirtualIbanObject> localVarResp = putVirtualIbanWithHttpInfo(virtualIbanId, accessSignature, accessTag, accessUserId, accessUserIp, putVirtualIbanRequest);
        return localVarResp.getData();
    }

    /**
     * Update Virtual IBAN
     * Update a Virtual IBAN&#39;s information.
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putVirtualIbanRequest  (optional)
     * @return ApiResponse&lt;VirtualIbanObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualIbanObject> putVirtualIbanWithHttpInfo(Integer virtualIbanId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutVirtualIbanRequest putVirtualIbanRequest) throws ApiException {
        okhttp3.Call localVarCall = putVirtualIbanValidateBeforeCall(virtualIbanId, accessSignature, accessTag, accessUserId, accessUserIp, putVirtualIbanRequest, null);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Virtual IBAN (asynchronously)
     * Update a Virtual IBAN&#39;s information.
     * @param virtualIbanId The unique identifier of the Virtual IBAN. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putVirtualIbanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVirtualIbanAsync(Integer virtualIbanId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutVirtualIbanRequest putVirtualIbanRequest, final ApiCallback<VirtualIbanObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVirtualIbanValidateBeforeCall(virtualIbanId, accessSignature, accessTag, accessUserId, accessUserIp, putVirtualIbanRequest, _callback);
        Type localVarReturnType = new TypeToken<VirtualIbanObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
