/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeneficiaryObject;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.PostBeneficiaryRequest;
import org.openapitools.client.model.PutBeneficiaryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BeneficiariesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BeneficiariesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BeneficiariesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBeneficiaries
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s).  Filterable fields are:  - id  - tag  - userId  - isActive (1 for yes, 0 for no)  - nickName  - address  - iban (encrypted IBAN)  - IbanInClear  - bic  - sepaCreditorIdentifier  - usableForSct  - createdDate  - modifiedDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax : \&quot;fieldName criterion expression\&quot;.  Where:  - fieldName: the name of a filterable field of this object.  - expression: the values to be included or excluded (see the table below for more information)  - criterion: a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param id The unique identifier of the Beneficiary. (optional)
     * @param userId Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param iban Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param bic Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param nickName Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param name Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeneficiariesCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer id, Integer userId, String iban, String bic, String nickName, String name, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/beneficiaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (iban != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iban", iban));
        }

        if (bic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bic", bic));
        }

        if (nickName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nickName", nickName));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBeneficiariesValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer id, Integer userId, String iban, String bic, String nickName, String name, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return getBeneficiariesCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, id, userId, iban, bic, nickName, name, pageNumber, pageCount, sortBy, sortOrder, _callback);

    }

    /**
     * Search Beneficiaries
     * Retrieve Beneficiary bank accounts that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s).  Filterable fields are:  - id  - tag  - userId  - isActive (1 for yes, 0 for no)  - nickName  - address  - iban (encrypted IBAN)  - IbanInClear  - bic  - sepaCreditorIdentifier  - usableForSct  - createdDate  - modifiedDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax : \&quot;fieldName criterion expression\&quot;.  Where:  - fieldName: the name of a filterable field of this object.  - expression: the values to be included or excluded (see the table below for more information)  - criterion: a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param id The unique identifier of the Beneficiary. (optional)
     * @param userId Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param iban Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param bic Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param nickName Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param name Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @return BeneficiaryObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BeneficiaryObject getBeneficiaries(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer id, Integer userId, String iban, String bic, String nickName, String name, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<BeneficiaryObject> localVarResp = getBeneficiariesWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, id, userId, iban, bic, nickName, name, pageNumber, pageCount, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Search Beneficiaries
     * Retrieve Beneficiary bank accounts that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s).  Filterable fields are:  - id  - tag  - userId  - isActive (1 for yes, 0 for no)  - nickName  - address  - iban (encrypted IBAN)  - IbanInClear  - bic  - sepaCreditorIdentifier  - usableForSct  - createdDate  - modifiedDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax : \&quot;fieldName criterion expression\&quot;.  Where:  - fieldName: the name of a filterable field of this object.  - expression: the values to be included or excluded (see the table below for more information)  - criterion: a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param id The unique identifier of the Beneficiary. (optional)
     * @param userId Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param iban Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param bic Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param nickName Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param name Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @return ApiResponse&lt;BeneficiaryObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BeneficiaryObject> getBeneficiariesWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer id, Integer userId, String iban, String bic, String nickName, String name, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getBeneficiariesValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, id, userId, iban, bic, nickName, name, pageNumber, pageCount, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Beneficiaries (asynchronously)
     * Retrieve Beneficiary bank accounts that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s).  Filterable fields are:  - id  - tag  - userId  - isActive (1 for yes, 0 for no)  - nickName  - address  - iban (encrypted IBAN)  - IbanInClear  - bic  - sepaCreditorIdentifier  - usableForSct  - createdDate  - modifiedDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax : \&quot;fieldName criterion expression\&quot;.  Where:  - fieldName: the name of a filterable field of this object.  - expression: the values to be included or excluded (see the table below for more information)  - criterion: a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param id The unique identifier of the Beneficiary. (optional)
     * @param userId Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param iban Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param bic Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param nickName Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param name Deprecated, use the &#x60;filter&#x60; parameter instead. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeneficiariesAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer id, Integer userId, String iban, String bic, String nickName, String name, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback<BeneficiaryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBeneficiariesValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, id, userId, iban, bic, nickName, name, pageNumber, pageCount, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBeneficiary
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeneficiaryCall(Long beneficiaryId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/beneficiaries/{beneficiaryId}"
            .replace("{" + "beneficiaryId" + "}", localVarApiClient.escapeString(beneficiaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBeneficiaryValidateBeforeCall(Long beneficiaryId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'beneficiaryId' is set
        if (beneficiaryId == null) {
            throw new ApiException("Missing the required parameter 'beneficiaryId' when calling getBeneficiary(Async)");
        }

        return getBeneficiaryCall(beneficiaryId, fields, _callback);

    }

    /**
     * Get Beneficiary
     * Retrieve a Beneficiary bank account based on its &#x60;id&#x60;.
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @return BeneficiaryObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BeneficiaryObject getBeneficiary(Long beneficiaryId, List<String> fields) throws ApiException {
        ApiResponse<BeneficiaryObject> localVarResp = getBeneficiaryWithHttpInfo(beneficiaryId, fields);
        return localVarResp.getData();
    }

    /**
     * Get Beneficiary
     * Retrieve a Beneficiary bank account based on its &#x60;id&#x60;.
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @return ApiResponse&lt;BeneficiaryObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BeneficiaryObject> getBeneficiaryWithHttpInfo(Long beneficiaryId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getBeneficiaryValidateBeforeCall(beneficiaryId, fields, null);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Beneficiary (asynchronously)
     * Retrieve a Beneficiary bank account based on its &#x60;id&#x60;.
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeneficiaryAsync(Long beneficiaryId, List<String> fields, final ApiCallback<BeneficiaryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBeneficiaryValidateBeforeCall(beneficiaryId, fields, _callback);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBeneficiary
     * @param postBeneficiaryRequest  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBeneficiaryCall(PostBeneficiaryRequest postBeneficiaryRequest, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postBeneficiaryRequest;

        // create path and map variables
        String localVarPath = "/v1/beneficiaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBeneficiaryValidateBeforeCall(PostBeneficiaryRequest postBeneficiaryRequest, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postBeneficiaryRequest' is set
        if (postBeneficiaryRequest == null) {
            throw new ApiException("Missing the required parameter 'postBeneficiaryRequest' when calling postBeneficiary(Async)");
        }

        return postBeneficiaryCall(postBeneficiaryRequest, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Create Beneficiary
     * Create a new benefeciary bank account.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param postBeneficiaryRequest  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return BeneficiaryObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BeneficiaryObject postBeneficiary(PostBeneficiaryRequest postBeneficiaryRequest, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<BeneficiaryObject> localVarResp = postBeneficiaryWithHttpInfo(postBeneficiaryRequest, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Create Beneficiary
     * Create a new benefeciary bank account.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param postBeneficiaryRequest  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;BeneficiaryObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BeneficiaryObject> postBeneficiaryWithHttpInfo(PostBeneficiaryRequest postBeneficiaryRequest, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = postBeneficiaryValidateBeforeCall(postBeneficiaryRequest, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Beneficiary (asynchronously)
     * Create a new benefeciary bank account.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param postBeneficiaryRequest  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBeneficiaryAsync(PostBeneficiaryRequest postBeneficiaryRequest, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<BeneficiaryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBeneficiaryValidateBeforeCall(postBeneficiaryRequest, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putBeneficiary
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putBeneficiaryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putBeneficiaryCall(Integer beneficiaryId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutBeneficiaryRequest putBeneficiaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putBeneficiaryRequest;

        // create path and map variables
        String localVarPath = "/v1/beneficiaries/{beneficiaryId}"
            .replace("{" + "beneficiaryId" + "}", localVarApiClient.escapeString(beneficiaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putBeneficiaryValidateBeforeCall(Integer beneficiaryId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutBeneficiaryRequest putBeneficiaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'beneficiaryId' is set
        if (beneficiaryId == null) {
            throw new ApiException("Missing the required parameter 'beneficiaryId' when calling putBeneficiary(Async)");
        }

        return putBeneficiaryCall(beneficiaryId, accessSignature, accessTag, accessUserId, accessUserIp, putBeneficiaryRequest, _callback);

    }

    /**
     * Update Beneficiary
     * Modify a benefeciary bank account information.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putBeneficiaryRequest  (optional)
     * @return BeneficiaryObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BeneficiaryObject putBeneficiary(Integer beneficiaryId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutBeneficiaryRequest putBeneficiaryRequest) throws ApiException {
        ApiResponse<BeneficiaryObject> localVarResp = putBeneficiaryWithHttpInfo(beneficiaryId, accessSignature, accessTag, accessUserId, accessUserIp, putBeneficiaryRequest);
        return localVarResp.getData();
    }

    /**
     * Update Beneficiary
     * Modify a benefeciary bank account information.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putBeneficiaryRequest  (optional)
     * @return ApiResponse&lt;BeneficiaryObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BeneficiaryObject> putBeneficiaryWithHttpInfo(Integer beneficiaryId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutBeneficiaryRequest putBeneficiaryRequest) throws ApiException {
        okhttp3.Call localVarCall = putBeneficiaryValidateBeforeCall(beneficiaryId, accessSignature, accessTag, accessUserId, accessUserIp, putBeneficiaryRequest, null);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Beneficiary (asynchronously)
     * Modify a benefeciary bank account information.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param beneficiaryId The unique identifier of the Beneficiary. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putBeneficiaryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putBeneficiaryAsync(Integer beneficiaryId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutBeneficiaryRequest putBeneficiaryRequest, final ApiCallback<BeneficiaryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putBeneficiaryValidateBeforeCall(beneficiaryId, accessSignature, accessTag, accessUserId, accessUserIp, putBeneficiaryRequest, _callback);
        Type localVarReturnType = new TypeToken<BeneficiaryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
