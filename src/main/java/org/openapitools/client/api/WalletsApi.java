/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.DeleteWallet200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostWalletsRequest;
import org.openapitools.client.model.PutWalletRequest;
import org.openapitools.client.model.WalletObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteWallet
     * @param walletId The unique identifier of the Wallet. (required)
     * @param origin The origin of the request for cancelling the Wallet, which can be one of the following: &lt;ul&gt;&lt;li&gt;&#x60;OPERATOR&#x60; – When **you** are at the origin of the deactivation.&lt;/li&gt;&lt;li&gt;&#x60;USER&#x60; – When the **end user** is at the origin of the deactivation.&lt;/li&gt;&lt;/ul&gt;  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWalletCall(Integer walletId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/wallets/{walletId}"
            .replace("{" + "walletId" + "}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWalletValidateBeforeCall(Integer walletId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling deleteWallet(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling deleteWallet(Async)");
        }

        return deleteWalletCall(walletId, origin, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Delete Wallet
     * Change the status of the Wallet to &#x60;CANCELED&#x60;. This action is irreversible.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param origin The origin of the request for cancelling the Wallet, which can be one of the following: &lt;ul&gt;&lt;li&gt;&#x60;OPERATOR&#x60; – When **you** are at the origin of the deactivation.&lt;/li&gt;&lt;li&gt;&#x60;USER&#x60; – When the **end user** is at the origin of the deactivation.&lt;/li&gt;&lt;/ul&gt;  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return DeleteWallet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWallet200Response deleteWallet(Integer walletId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<DeleteWallet200Response> localVarResp = deleteWalletWithHttpInfo(walletId, origin, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Delete Wallet
     * Change the status of the Wallet to &#x60;CANCELED&#x60;. This action is irreversible.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param origin The origin of the request for cancelling the Wallet, which can be one of the following: &lt;ul&gt;&lt;li&gt;&#x60;OPERATOR&#x60; – When **you** are at the origin of the deactivation.&lt;/li&gt;&lt;li&gt;&#x60;USER&#x60; – When the **end user** is at the origin of the deactivation.&lt;/li&gt;&lt;/ul&gt;  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;DeleteWallet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteWallet200Response> deleteWalletWithHttpInfo(Integer walletId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = deleteWalletValidateBeforeCall(walletId, origin, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<DeleteWallet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Wallet (asynchronously)
     * Change the status of the Wallet to &#x60;CANCELED&#x60;. This action is irreversible.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param origin The origin of the request for cancelling the Wallet, which can be one of the following: &lt;ul&gt;&lt;li&gt;&#x60;OPERATOR&#x60; – When **you** are at the origin of the deactivation.&lt;/li&gt;&lt;li&gt;&#x60;USER&#x60; – When the **end user** is at the origin of the deactivation.&lt;/li&gt;&lt;/ul&gt;  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWalletAsync(Integer walletId, String origin, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<DeleteWallet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWalletValidateBeforeCall(walletId, origin, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<DeleteWallet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWallet
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWalletCall(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/wallets/{walletId}"
            .replace("{" + "walletId" + "}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWalletValidateBeforeCall(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling getWallet(Async)");
        }

        return getWalletCall(walletId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Get Wallet
     * Retrieve a Wallet based on its &#x60;id&#x60;.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return WalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public WalletObject getWallet(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<WalletObject> localVarResp = getWalletWithHttpInfo(walletId, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Get Wallet
     * Retrieve a Wallet based on its &#x60;id&#x60;.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;WalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletObject> getWalletWithHttpInfo(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = getWalletValidateBeforeCall(walletId, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wallet (asynchronously)
     * Retrieve a Wallet based on its &#x60;id&#x60;.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWalletAsync(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<WalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWalletValidateBeforeCall(walletId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWallets
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param walletId The unique identifier of the Wallet. (optional)
     * @param walletStatus The status of the Wallet, which can be one of the following: * &#x60;PENDING&#x60; – The Wallet has just been created. * &#x60;VALIDATED&#x60; – The Wallet is active. * &#x60;CANCELED&#x60; – The Wallet is deactivated.  (optional)
     * @param userId The unique identifier of the User owning the Wallet. (optional)
     * @param parentUserId The unique identifier of the Parent User of the Wallet owner. (optional)
     * @param walletTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param walletTypeId The type of Wallet. The following values are allowed: * &#x60;9&#x60; – Electronic Money Wallet * &#x60;10&#x60; – Payment Account Wallet &lt;br&gt; Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.  (optional)
     * @param eventAlias Legacy attribute, do not use.  (optional)
     * @param tariffId The fees applied to the Wallet, as defined by your contract with Treezor. Usually required, but may have a default value set by Treezor. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWalletsCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer walletId, String walletStatus, Integer userId, Integer parentUserId, String walletTag, Integer walletTypeId, String eventAlias, Integer tariffId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (walletStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletStatus", walletStatus));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (parentUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentUserId", parentUserId));
        }

        if (walletTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletTag", walletTag));
        }

        if (walletTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletTypeId", walletTypeId));
        }

        if (eventAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventAlias", eventAlias));
        }

        if (tariffId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tariffId", tariffId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWalletsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer walletId, String walletStatus, Integer userId, Integer parentUserId, String walletTag, Integer walletTypeId, String eventAlias, Integer tariffId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        return getWalletsCall(accessSignature, accessTag, accessUserId, accessUserIp, walletId, walletStatus, userId, parentUserId, walletTag, walletTypeId, eventAlias, tariffId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);

    }

    /**
     * Search Wallets
     * Retrieve Wallets that match your search conditions. The request must specify at least one of those fields: &#x60;walletId&#x60;, &#x60;eventAlias&#x60;, &#x60;userId&#x60;, &#x60;walletTypeId&#x60;. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param walletId The unique identifier of the Wallet. (optional)
     * @param walletStatus The status of the Wallet, which can be one of the following: * &#x60;PENDING&#x60; – The Wallet has just been created. * &#x60;VALIDATED&#x60; – The Wallet is active. * &#x60;CANCELED&#x60; – The Wallet is deactivated.  (optional)
     * @param userId The unique identifier of the User owning the Wallet. (optional)
     * @param parentUserId The unique identifier of the Parent User of the Wallet owner. (optional)
     * @param walletTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param walletTypeId The type of Wallet. The following values are allowed: * &#x60;9&#x60; – Electronic Money Wallet * &#x60;10&#x60; – Payment Account Wallet &lt;br&gt; Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.  (optional)
     * @param eventAlias Legacy attribute, do not use.  (optional)
     * @param tariffId The fees applied to the Wallet, as defined by your contract with Treezor. Usually required, but may have a default value set by Treezor. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return WalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public WalletObject getWallets(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer walletId, String walletStatus, Integer userId, Integer parentUserId, String walletTag, Integer walletTypeId, String eventAlias, Integer tariffId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        ApiResponse<WalletObject> localVarResp = getWalletsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, walletId, walletStatus, userId, parentUserId, walletTag, walletTypeId, eventAlias, tariffId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        return localVarResp.getData();
    }

    /**
     * Search Wallets
     * Retrieve Wallets that match your search conditions. The request must specify at least one of those fields: &#x60;walletId&#x60;, &#x60;eventAlias&#x60;, &#x60;userId&#x60;, &#x60;walletTypeId&#x60;. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param walletId The unique identifier of the Wallet. (optional)
     * @param walletStatus The status of the Wallet, which can be one of the following: * &#x60;PENDING&#x60; – The Wallet has just been created. * &#x60;VALIDATED&#x60; – The Wallet is active. * &#x60;CANCELED&#x60; – The Wallet is deactivated.  (optional)
     * @param userId The unique identifier of the User owning the Wallet. (optional)
     * @param parentUserId The unique identifier of the Parent User of the Wallet owner. (optional)
     * @param walletTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param walletTypeId The type of Wallet. The following values are allowed: * &#x60;9&#x60; – Electronic Money Wallet * &#x60;10&#x60; – Payment Account Wallet &lt;br&gt; Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.  (optional)
     * @param eventAlias Legacy attribute, do not use.  (optional)
     * @param tariffId The fees applied to the Wallet, as defined by your contract with Treezor. Usually required, but may have a default value set by Treezor. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return ApiResponse&lt;WalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletObject> getWalletsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer walletId, String walletStatus, Integer userId, Integer parentUserId, String walletTag, Integer walletTypeId, String eventAlias, Integer tariffId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        okhttp3.Call localVarCall = getWalletsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, walletId, walletStatus, userId, parentUserId, walletTag, walletTypeId, eventAlias, tariffId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, null);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Wallets (asynchronously)
     * Retrieve Wallets that match your search conditions. The request must specify at least one of those fields: &#x60;walletId&#x60;, &#x60;eventAlias&#x60;, &#x60;userId&#x60;, &#x60;walletTypeId&#x60;. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param walletId The unique identifier of the Wallet. (optional)
     * @param walletStatus The status of the Wallet, which can be one of the following: * &#x60;PENDING&#x60; – The Wallet has just been created. * &#x60;VALIDATED&#x60; – The Wallet is active. * &#x60;CANCELED&#x60; – The Wallet is deactivated.  (optional)
     * @param userId The unique identifier of the User owning the Wallet. (optional)
     * @param parentUserId The unique identifier of the Parent User of the Wallet owner. (optional)
     * @param walletTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param walletTypeId The type of Wallet. The following values are allowed: * &#x60;9&#x60; – Electronic Money Wallet * &#x60;10&#x60; – Payment Account Wallet &lt;br&gt; Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.  (optional)
     * @param eventAlias Legacy attribute, do not use.  (optional)
     * @param tariffId The fees applied to the Wallet, as defined by your contract with Treezor. Usually required, but may have a default value set by Treezor. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWalletsAsync(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer walletId, String walletStatus, Integer userId, Integer parentUserId, String walletTag, Integer walletTypeId, String eventAlias, Integer tariffId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback<WalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWalletsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, walletId, walletStatus, userId, parentUserId, walletTag, walletTypeId, eventAlias, tariffId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postWallets
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postWalletsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWalletsCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, PostWalletsRequest postWalletsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postWalletsRequest;

        // create path and map variables
        String localVarPath = "/v1/wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWalletsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, PostWalletsRequest postWalletsRequest, final ApiCallback _callback) throws ApiException {
        return postWalletsCall(accessSignature, accessTag, accessUserId, accessUserIp, postWalletsRequest, _callback);

    }

    /**
     * Create Wallet
     * Create a new Wallet. This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postWalletsRequest  (optional)
     * @return WalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public WalletObject postWallets(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, PostWalletsRequest postWalletsRequest) throws ApiException {
        ApiResponse<WalletObject> localVarResp = postWalletsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, postWalletsRequest);
        return localVarResp.getData();
    }

    /**
     * Create Wallet
     * Create a new Wallet. This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postWalletsRequest  (optional)
     * @return ApiResponse&lt;WalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletObject> postWalletsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, PostWalletsRequest postWalletsRequest) throws ApiException {
        okhttp3.Call localVarCall = postWalletsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postWalletsRequest, null);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Wallet (asynchronously)
     * Create a new Wallet. This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postWalletsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWalletsAsync(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, PostWalletsRequest postWalletsRequest, final ApiCallback<WalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWalletsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postWalletsRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putWallet
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putWalletCall(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutWalletRequest putWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putWalletRequest;

        // create path and map variables
        String localVarPath = "/v1/wallets/{walletId}"
            .replace("{" + "walletId" + "}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putWalletValidateBeforeCall(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutWalletRequest putWalletRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling putWallet(Async)");
        }

        return putWalletCall(walletId, accessSignature, accessTag, accessUserId, accessUserIp, putWalletRequest, _callback);

    }

    /**
     * Update Wallet
     * Modifiy a Wallet information
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putWalletRequest  (optional)
     * @return WalletObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public WalletObject putWallet(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutWalletRequest putWalletRequest) throws ApiException {
        ApiResponse<WalletObject> localVarResp = putWalletWithHttpInfo(walletId, accessSignature, accessTag, accessUserId, accessUserIp, putWalletRequest);
        return localVarResp.getData();
    }

    /**
     * Update Wallet
     * Modifiy a Wallet information
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putWalletRequest  (optional)
     * @return ApiResponse&lt;WalletObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletObject> putWalletWithHttpInfo(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutWalletRequest putWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = putWalletValidateBeforeCall(walletId, accessSignature, accessTag, accessUserId, accessUserIp, putWalletRequest, null);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Wallet (asynchronously)
     * Modifiy a Wallet information
     * @param walletId The unique identifier of the Wallet. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putWalletAsync(Long walletId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutWalletRequest putWalletRequest, final ApiCallback<WalletObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putWalletValidateBeforeCall(walletId, accessSignature, accessTag, accessUserId, accessUserIp, putWalletRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
