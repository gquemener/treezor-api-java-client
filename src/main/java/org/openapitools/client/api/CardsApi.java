/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivateCardRequest;
import org.openapitools.client.model.CardObject;
import org.openapitools.client.model.CardOptionsRequest;
import org.openapitools.client.model.ChangePinRequest;
import org.openapitools.client.model.ConvertVirtualRequest;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCardImage200Response;
import org.openapitools.client.model.GetCardsDefaultResponse;
import org.openapitools.client.model.GetRenewalDetails200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Post3dsRequest;
import org.openapitools.client.model.PostCardVirtualRequest;
import org.openapitools.client.model.PutCardRequest;
import org.openapitools.client.model.PutLimitsRequest;
import org.openapitools.client.model.ReassignCardRequest;
import org.openapitools.client.model.SetPinRequest;
import org.openapitools.client.model.UpdateBlockStatusRequest;
import org.openapitools.client.model.UpdateRenewalDetailsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateCard
     * @param cardId The unique identifier of the Card. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param activateCardRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateCardCall(Integer cardId, String accessToken, String accessSignature, Integer accessUserId, String accessUserIp, ActivateCardRequest activateCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activateCardRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/Activate"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessToken", accessToken));
        }

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateCardValidateBeforeCall(Integer cardId, String accessToken, String accessSignature, Integer accessUserId, String accessUserIp, ActivateCardRequest activateCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling activateCard(Async)");
        }

        return activateCardCall(cardId, accessToken, accessSignature, accessUserId, accessUserIp, activateCardRequest, _callback);

    }

    /**
     * Activate Card
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param activateCardRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject activateCard(Integer cardId, String accessToken, String accessSignature, Integer accessUserId, String accessUserIp, ActivateCardRequest activateCardRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = activateCardWithHttpInfo(cardId, accessToken, accessSignature, accessUserId, accessUserIp, activateCardRequest);
        return localVarResp.getData();
    }

    /**
     * Activate Card
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param activateCardRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> activateCardWithHttpInfo(Integer cardId, String accessToken, String accessSignature, Integer accessUserId, String accessUserIp, ActivateCardRequest activateCardRequest) throws ApiException {
        okhttp3.Call localVarCall = activateCardValidateBeforeCall(cardId, accessToken, accessSignature, accessUserId, accessUserIp, activateCardRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate Card (asynchronously)
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param activateCardRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateCardAsync(Integer cardId, String accessToken, String accessSignature, Integer accessUserId, String accessUserIp, ActivateCardRequest activateCardRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateCardValidateBeforeCall(cardId, accessToken, accessSignature, accessUserId, accessUserIp, activateCardRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activateCardToken
     * @param cardToken The &#x60;publicToken&#x60; of the Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateCardTokenCall(String cardToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardToken}/public-token-activation"
            .replace("{" + "cardToken" + "}", localVarApiClient.escapeString(cardToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateCardTokenValidateBeforeCall(String cardToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardToken' is set
        if (cardToken == null) {
            throw new ApiException("Missing the required parameter 'cardToken' when calling activateCardToken(Async)");
        }

        return activateCardTokenCall(cardToken, _callback);

    }

    /**
     * Activate Card Public Token
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). Ideal for end-user oriented action. A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardToken The &#x60;publicToken&#x60; of the Card. (required)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject activateCardToken(String cardToken) throws ApiException {
        ApiResponse<CardObject> localVarResp = activateCardTokenWithHttpInfo(cardToken);
        return localVarResp.getData();
    }

    /**
     * Activate Card Public Token
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). Ideal for end-user oriented action. A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardToken The &#x60;publicToken&#x60; of the Card. (required)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> activateCardTokenWithHttpInfo(String cardToken) throws ApiException {
        okhttp3.Call localVarCall = activateCardTokenValidateBeforeCall(cardToken, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate Card Public Token (asynchronously)
     * Activate the Card (updating the &#x60;isLive&#x60; attribute to &#x60;1&#x60;). Ideal for end-user oriented action. A Card must be activated to be used.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardToken The &#x60;publicToken&#x60; of the Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateCardTokenAsync(String cardToken, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateCardTokenValidateBeforeCall(cardToken, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cardOptions
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardOptionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardOptionsCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, CardOptionsRequest cardOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardOptionsRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/Options"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cardOptionsValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, CardOptionsRequest cardOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling cardOptions(Async)");
        }

        return cardOptionsCall(cardId, accessSignature, accessUserId, accessUserIp, cardOptionsRequest, _callback);

    }

    /**
     * Update Card Options
     * Modify the Card permissions group.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardOptionsRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject cardOptions(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, CardOptionsRequest cardOptionsRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = cardOptionsWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, cardOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Update Card Options
     * Modify the Card permissions group.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardOptionsRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> cardOptionsWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, CardOptionsRequest cardOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = cardOptionsValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, cardOptionsRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Card Options (asynchronously)
     * Modify the Card permissions group.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardOptionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardOptionsAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, CardOptionsRequest cardOptionsRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = cardOptionsValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, cardOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePin
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param changePinRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePinCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ChangePinRequest changePinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePinRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/ChangePIN"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePinValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ChangePinRequest changePinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling changePin(Async)");
        }

        return changePinCall(cardId, accessSignature, accessUserId, accessUserIp, changePinRequest, _callback);

    }

    /**
     * Change Card PIN
     * Change the Card PIN code knowing the current one.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param changePinRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject changePin(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ChangePinRequest changePinRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = changePinWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, changePinRequest);
        return localVarResp.getData();
    }

    /**
     * Change Card PIN
     * Change the Card PIN code knowing the current one.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param changePinRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> changePinWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ChangePinRequest changePinRequest) throws ApiException {
        okhttp3.Call localVarCall = changePinValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, changePinRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Card PIN (asynchronously)
     * Change the Card PIN code knowing the current one.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param changePinRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePinAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ChangePinRequest changePinRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePinValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, changePinRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertVirtual
     * @param cardId The unique identifier of the Card to convert. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVirtualCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = convertVirtualRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/ConvertVirtual"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertVirtualValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling convertVirtual(Async)");
        }

        return convertVirtualCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, _callback);

    }

    /**
     * Convert virtual card to physical
     * Convert a virtual Card into a physical one. The converted card will be both virtual and physical. 
     * @param cardId The unique identifier of the Card to convert. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject convertVirtual(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = convertVirtualWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest);
        return localVarResp.getData();
    }

    /**
     * Convert virtual card to physical
     * Convert a virtual Card into a physical one. The converted card will be both virtual and physical. 
     * @param cardId The unique identifier of the Card to convert. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> convertVirtualWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest) throws ApiException {
        okhttp3.Call localVarCall = convertVirtualValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert virtual card to physical (asynchronously)
     * Convert a virtual Card into a physical one. The converted card will be both virtual and physical. 
     * @param cardId The unique identifier of the Card to convert. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVirtualAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertVirtualValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCard
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardCall(Long cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCard(Async)");
        }

        return getCardCall(cardId, _callback);

    }

    /**
     * Get Card
     * Retrieve a Card based on its &#x60;id&#x60;.
     * @param cardId The unique identifier of the Card. (required)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject getCard(Long cardId) throws ApiException {
        ApiResponse<CardObject> localVarResp = getCardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Get Card
     * Retrieve a Card based on its &#x60;id&#x60;.
     * @param cardId The unique identifier of the Card. (required)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> getCardWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = getCardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Card (asynchronously)
     * Retrieve a Card based on its &#x60;id&#x60;.
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardAsync(Long cardId, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardImage
     * @param cardId The unique identifier of the virtual card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardImageCall(Integer cardId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cardimages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardId", cardId));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardImageValidateBeforeCall(Integer cardId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCardImage(Async)");
        }

        return getCardImageCall(cardId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);

    }

    /**
     * Get Card Image
     * Retrieve a virtual card image.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the virtual card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return GetCardImage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCardImage200Response getCardImage(Integer cardId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        ApiResponse<GetCardImage200Response> localVarResp = getCardImageWithHttpInfo(cardId, accessSignature, accessTag, accessUserId, accessUserIp);
        return localVarResp.getData();
    }

    /**
     * Get Card Image
     * Retrieve a virtual card image.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the virtual card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @return ApiResponse&lt;GetCardImage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCardImage200Response> getCardImageWithHttpInfo(Integer cardId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp) throws ApiException {
        okhttp3.Call localVarCall = getCardImageValidateBeforeCall(cardId, accessSignature, accessTag, accessUserId, accessUserIp, null);
        Type localVarReturnType = new TypeToken<GetCardImage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Card Image (asynchronously)
     * Retrieve a virtual card image.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the virtual card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardImageAsync(Integer cardId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, final ApiCallback<GetCardImage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardImageValidateBeforeCall(cardId, accessSignature, accessTag, accessUserId, accessUserIp, _callback);
        Type localVarReturnType = new TypeToken<GetCardImage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCards
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param userId The unique identifier of the cardholder (optional)
     * @param embossedName Embossed name of the card (optional)
     * @param publicToken Public token of the card (optional)
     * @param permsGroup Permissions group of the card.  &lt;br /&gt; See [available values on the documentation](/guide/cards/restrictions-limits.html#permission-groups-permsgroup)  (optional)
     * @param isPhysical Whether or not the card is a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card   * &#x60;0&#x60; – Virtual card  (optional)
     * @param isConverted Whether or not the card is a Virtual Card that has been converted into a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card converted from a virtual card   * &#x60;0&#x60; – Not converted, virtual card only  (optional)
     * @param lockStatus The Status of the card, indicating whether it is locked, lost, or destroyed for instance. While this field is an integer, it returns a plaintext value. See the full list of &#x60;lockStatus&#x60;in the [Block a Card](/guide/cards/modification.html#status) article.  (optional)
     * @param mccRestrictionGroupId mccRestrictionGroupId of the card (optional)
     * @param merchantRestrictionGroupId merchantRestrictionGroupId of the card (optional)
     * @param countryRestrictionGroupId countryRestrictionGroupId of the card (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardId, Integer userId, String embossedName, String publicToken, String permsGroup, Integer isPhysical, Integer isConverted, Integer lockStatus, Integer mccRestrictionGroupId, Integer merchantRestrictionGroupId, Integer countryRestrictionGroupId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardId", cardId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (embossedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embossedName", embossedName));
        }

        if (publicToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicToken", publicToken));
        }

        if (permsGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permsGroup", permsGroup));
        }

        if (isPhysical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPhysical", isPhysical));
        }

        if (isConverted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isConverted", isConverted));
        }

        if (lockStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lockStatus", lockStatus));
        }

        if (mccRestrictionGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mccRestrictionGroupId", mccRestrictionGroupId));
        }

        if (merchantRestrictionGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantRestrictionGroupId", merchantRestrictionGroupId));
        }

        if (countryRestrictionGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryRestrictionGroupId", countryRestrictionGroupId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardId, Integer userId, String embossedName, String publicToken, String permsGroup, Integer isPhysical, Integer isConverted, Integer lockStatus, Integer mccRestrictionGroupId, Integer merchantRestrictionGroupId, Integer countryRestrictionGroupId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        return getCardsCall(accessSignature, accessTag, accessUserId, accessUserIp, cardId, userId, embossedName, publicToken, permsGroup, isPhysical, isConverted, lockStatus, mccRestrictionGroupId, merchantRestrictionGroupId, countryRestrictionGroupId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);

    }

    /**
     * Search Cards
     * Retrieve Cards based on search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param userId The unique identifier of the cardholder (optional)
     * @param embossedName Embossed name of the card (optional)
     * @param publicToken Public token of the card (optional)
     * @param permsGroup Permissions group of the card.  &lt;br /&gt; See [available values on the documentation](/guide/cards/restrictions-limits.html#permission-groups-permsgroup)  (optional)
     * @param isPhysical Whether or not the card is a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card   * &#x60;0&#x60; – Virtual card  (optional)
     * @param isConverted Whether or not the card is a Virtual Card that has been converted into a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card converted from a virtual card   * &#x60;0&#x60; – Not converted, virtual card only  (optional)
     * @param lockStatus The Status of the card, indicating whether it is locked, lost, or destroyed for instance. While this field is an integer, it returns a plaintext value. See the full list of &#x60;lockStatus&#x60;in the [Block a Card](/guide/cards/modification.html#status) article.  (optional)
     * @param mccRestrictionGroupId mccRestrictionGroupId of the card (optional)
     * @param merchantRestrictionGroupId merchantRestrictionGroupId of the card (optional)
     * @param countryRestrictionGroupId countryRestrictionGroupId of the card (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject getCards(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardId, Integer userId, String embossedName, String publicToken, String permsGroup, Integer isPhysical, Integer isConverted, Integer lockStatus, Integer mccRestrictionGroupId, Integer merchantRestrictionGroupId, Integer countryRestrictionGroupId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        ApiResponse<CardObject> localVarResp = getCardsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, cardId, userId, embossedName, publicToken, permsGroup, isPhysical, isConverted, lockStatus, mccRestrictionGroupId, merchantRestrictionGroupId, countryRestrictionGroupId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        return localVarResp.getData();
    }

    /**
     * Search Cards
     * Retrieve Cards based on search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param userId The unique identifier of the cardholder (optional)
     * @param embossedName Embossed name of the card (optional)
     * @param publicToken Public token of the card (optional)
     * @param permsGroup Permissions group of the card.  &lt;br /&gt; See [available values on the documentation](/guide/cards/restrictions-limits.html#permission-groups-permsgroup)  (optional)
     * @param isPhysical Whether or not the card is a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card   * &#x60;0&#x60; – Virtual card  (optional)
     * @param isConverted Whether or not the card is a Virtual Card that has been converted into a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card converted from a virtual card   * &#x60;0&#x60; – Not converted, virtual card only  (optional)
     * @param lockStatus The Status of the card, indicating whether it is locked, lost, or destroyed for instance. While this field is an integer, it returns a plaintext value. See the full list of &#x60;lockStatus&#x60;in the [Block a Card](/guide/cards/modification.html#status) article.  (optional)
     * @param mccRestrictionGroupId mccRestrictionGroupId of the card (optional)
     * @param merchantRestrictionGroupId merchantRestrictionGroupId of the card (optional)
     * @param countryRestrictionGroupId countryRestrictionGroupId of the card (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> getCardsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardId, Integer userId, String embossedName, String publicToken, String permsGroup, Integer isPhysical, Integer isConverted, Integer lockStatus, Integer mccRestrictionGroupId, Integer merchantRestrictionGroupId, Integer countryRestrictionGroupId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        okhttp3.Call localVarCall = getCardsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, cardId, userId, embossedName, publicToken, permsGroup, isPhysical, isConverted, lockStatus, mccRestrictionGroupId, merchantRestrictionGroupId, countryRestrictionGroupId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Cards (asynchronously)
     * Retrieve Cards based on search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param userId The unique identifier of the cardholder (optional)
     * @param embossedName Embossed name of the card (optional)
     * @param publicToken Public token of the card (optional)
     * @param permsGroup Permissions group of the card.  &lt;br /&gt; See [available values on the documentation](/guide/cards/restrictions-limits.html#permission-groups-permsgroup)  (optional)
     * @param isPhysical Whether or not the card is a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card   * &#x60;0&#x60; – Virtual card  (optional)
     * @param isConverted Whether or not the card is a Virtual Card that has been converted into a Physical Card. Values can be:   * &#x60;1&#x60; – Physical card converted from a virtual card   * &#x60;0&#x60; – Not converted, virtual card only  (optional)
     * @param lockStatus The Status of the card, indicating whether it is locked, lost, or destroyed for instance. While this field is an integer, it returns a plaintext value. See the full list of &#x60;lockStatus&#x60;in the [Block a Card](/guide/cards/modification.html#status) article.  (optional)
     * @param mccRestrictionGroupId mccRestrictionGroupId of the card (optional)
     * @param merchantRestrictionGroupId merchantRestrictionGroupId of the card (optional)
     * @param countryRestrictionGroupId countryRestrictionGroupId of the card (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value : _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardId, Integer userId, String embossedName, String publicToken, String permsGroup, Integer isPhysical, Integer isConverted, Integer lockStatus, Integer mccRestrictionGroupId, Integer merchantRestrictionGroupId, Integer countryRestrictionGroupId, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, cardId, userId, embossedName, publicToken, permsGroup, isPhysical, isConverted, lockStatus, mccRestrictionGroupId, merchantRestrictionGroupId, countryRestrictionGroupId, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRenewalDetails
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenewalDetailsCall(Integer cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/renewalDetails"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRenewalDetailsValidateBeforeCall(Integer cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getRenewalDetails(Async)");
        }

        return getRenewalDetailsCall(cardId, _callback);

    }

    /**
     * Get Renewal Details
     * Retrieve the Card &#x60;renewalType&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @return GetRenewalDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetRenewalDetails200Response getRenewalDetails(Integer cardId) throws ApiException {
        ApiResponse<GetRenewalDetails200Response> localVarResp = getRenewalDetailsWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Get Renewal Details
     * Retrieve the Card &#x60;renewalType&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @return ApiResponse&lt;GetRenewalDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRenewalDetails200Response> getRenewalDetailsWithHttpInfo(Integer cardId) throws ApiException {
        okhttp3.Call localVarCall = getRenewalDetailsValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<GetRenewalDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Renewal Details (asynchronously)
     * Retrieve the Card &#x60;renewalType&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenewalDetailsAsync(Integer cardId, final ApiCallback<GetRenewalDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRenewalDetailsValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<GetRenewalDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for post3ds
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param post3dsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call post3dsCall(String accessSignature, Post3dsRequest post3dsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post3dsRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/Register3DS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call post3dsValidateBeforeCall(String accessSignature, Post3dsRequest post3dsRequest, final ApiCallback _callback) throws ApiException {
        return post3dsCall(accessSignature, post3dsRequest, _callback);

    }

    /**
     * Register 3D secure
     * Register a card to 3D secure service. The user&#39;s mobile number must begin with &#x60;+&#x60;, or &#x60;00&#x60;, and the country dialing code. 
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param post3dsRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject post3ds(String accessSignature, Post3dsRequest post3dsRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = post3dsWithHttpInfo(accessSignature, post3dsRequest);
        return localVarResp.getData();
    }

    /**
     * Register 3D secure
     * Register a card to 3D secure service. The user&#39;s mobile number must begin with &#x60;+&#x60;, or &#x60;00&#x60;, and the country dialing code. 
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param post3dsRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> post3dsWithHttpInfo(String accessSignature, Post3dsRequest post3dsRequest) throws ApiException {
        okhttp3.Call localVarCall = post3dsValidateBeforeCall(accessSignature, post3dsRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register 3D secure (asynchronously)
     * Register a card to 3D secure service. The user&#39;s mobile number must begin with &#x60;+&#x60;, or &#x60;00&#x60;, and the country dialing code. 
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param post3dsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call post3dsAsync(String accessSignature, Post3dsRequest post3dsRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = post3dsValidateBeforeCall(accessSignature, post3dsRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCardPhysical
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCardPhysicalCall(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCardVirtualRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/RequestPhysical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCardPhysicalValidateBeforeCall(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest, final ApiCallback _callback) throws ApiException {
        return postCardPhysicalCall(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest, _callback);

    }

    /**
     * Create Physical Card
     * Create a new physical card. To use a card, it must be activated (&#x60;/cards/{id}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject postCardPhysical(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = postCardPhysicalWithHttpInfo(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest);
        return localVarResp.getData();
    }

    /**
     * Create Physical Card
     * Create a new physical card. To use a card, it must be activated (&#x60;/cards/{id}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> postCardPhysicalWithHttpInfo(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest) throws ApiException {
        okhttp3.Call localVarCall = postCardPhysicalValidateBeforeCall(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Physical Card (asynchronously)
     * Create a new physical card. To use a card, it must be activated (&#x60;/cards/{id}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCardPhysicalAsync(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCardPhysicalValidateBeforeCall(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCardVirtual
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCardVirtualCall(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCardVirtualRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/CreateVirtual";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCardVirtualValidateBeforeCall(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest, final ApiCallback _callback) throws ApiException {
        return postCardVirtualCall(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest, _callback);

    }

    /**
     * Create Virtual Card
     * Create a new virtual card. To use a card, it must be activated (&#x60;/v1/cards/{cardId}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject postCardVirtual(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = postCardVirtualWithHttpInfo(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest);
        return localVarResp.getData();
    }

    /**
     * Create Virtual Card
     * Create a new virtual card. To use a card, it must be activated (&#x60;/v1/cards/{cardId}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> postCardVirtualWithHttpInfo(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest) throws ApiException {
        okhttp3.Call localVarCall = postCardVirtualValidateBeforeCall(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Virtual Card (asynchronously)
     * Create a new virtual card. To use a card, it must be activated (&#x60;/v1/cards/{cardId}/Activate&#x60;).  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postCardVirtualRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCardVirtualAsync(String accessSignature, Integer accessUserId, String accessUserIp, PostCardVirtualRequest postCardVirtualRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCardVirtualValidateBeforeCall(accessSignature, accessUserId, accessUserIp, postCardVirtualRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCard
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCardRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCardCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutCardRequest putCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putCardRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCardValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutCardRequest putCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling putCard(Async)");
        }

        return putCardCall(cardId, accessSignature, accessUserId, accessUserIp, putCardRequest, _callback);

    }

    /**
     * Update Card
     * Update the restriction groups of the card, as well as the &#x60;cardTag&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCardRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject putCard(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutCardRequest putCardRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = putCardWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, putCardRequest);
        return localVarResp.getData();
    }

    /**
     * Update Card
     * Update the restriction groups of the card, as well as the &#x60;cardTag&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCardRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> putCardWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutCardRequest putCardRequest) throws ApiException {
        okhttp3.Call localVarCall = putCardValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, putCardRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Card (asynchronously)
     * Update the restriction groups of the card, as well as the &#x60;cardTag&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCardRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCardAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutCardRequest putCardRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCardValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, putCardRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putLimits
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putLimitsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putLimitsCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutLimitsRequest putLimitsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putLimitsRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/Limits"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putLimitsValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutLimitsRequest putLimitsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling putLimits(Async)");
        }

        return putLimitsCall(cardId, accessSignature, accessUserId, accessUserIp, putLimitsRequest, _callback);

    }

    /**
     * Update Card Limits
     * Modify the Card limits.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putLimitsRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject putLimits(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutLimitsRequest putLimitsRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = putLimitsWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, putLimitsRequest);
        return localVarResp.getData();
    }

    /**
     * Update Card Limits
     * Modify the Card limits.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putLimitsRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> putLimitsWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutLimitsRequest putLimitsRequest) throws ApiException {
        okhttp3.Call localVarCall = putLimitsValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, putLimitsRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Card Limits (asynchronously)
     * Modify the Card limits.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putLimitsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putLimitsAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, PutLimitsRequest putLimitsRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putLimitsValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, putLimitsRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRenew
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRenewCall(Integer cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/renew"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRenewValidateBeforeCall(Integer cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling putRenew(Async)");
        }

        return putRenewCall(cardId, _callback);

    }

    /**
     * Renew Card
     * Renew a Card manually. 
     * @param cardId The unique identifier of the Card. (required)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject putRenew(Integer cardId) throws ApiException {
        ApiResponse<CardObject> localVarResp = putRenewWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Renew Card
     * Renew a Card manually. 
     * @param cardId The unique identifier of the Card. (required)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> putRenewWithHttpInfo(Integer cardId) throws ApiException {
        okhttp3.Call localVarCall = putRenewValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renew Card (asynchronously)
     * Renew a Card manually. 
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRenewAsync(Integer cardId, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRenewValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reassignCard
     * @param cardId The unique identifier of the Card to reassign. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param reassignCardRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reassignCardCall(Integer cardId, String accessToken, String accessSignature, ReassignCardRequest reassignCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reassignCardRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/Assign"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessToken", accessToken));
        }

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reassignCardValidateBeforeCall(Integer cardId, String accessToken, String accessSignature, ReassignCardRequest reassignCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling reassignCard(Async)");
        }

        return reassignCardCall(cardId, accessToken, accessSignature, reassignCardRequest, _callback);

    }

    /**
     * Reassign Card
     * Assign the Card to another User or Wallet. 
     * @param cardId The unique identifier of the Card to reassign. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param reassignCardRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject reassignCard(Integer cardId, String accessToken, String accessSignature, ReassignCardRequest reassignCardRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = reassignCardWithHttpInfo(cardId, accessToken, accessSignature, reassignCardRequest);
        return localVarResp.getData();
    }

    /**
     * Reassign Card
     * Assign the Card to another User or Wallet. 
     * @param cardId The unique identifier of the Card to reassign. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param reassignCardRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> reassignCardWithHttpInfo(Integer cardId, String accessToken, String accessSignature, ReassignCardRequest reassignCardRequest) throws ApiException {
        okhttp3.Call localVarCall = reassignCardValidateBeforeCall(cardId, accessToken, accessSignature, reassignCardRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reassign Card (asynchronously)
     * Assign the Card to another User or Wallet. 
     * @param cardId The unique identifier of the Card to reassign. (required)
     * @param accessToken Legacy attribute, do not use.  (optional)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param reassignCardRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reassignCardAsync(Integer cardId, String accessToken, String accessSignature, ReassignCardRequest reassignCardRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = reassignCardValidateBeforeCall(cardId, accessToken, accessSignature, reassignCardRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regenerateCard
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateCardCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = convertVirtualRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/Regenerate"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateCardValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling regenerateCard(Async)");
        }

        return regenerateCardCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, _callback);

    }

    /**
     * Regenerate Card
     * Recreate the card image if the card is unlocked.   Useful when changing card design, company name, or when retrieving the image results in a 404. 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject regenerateCard(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = regenerateCardWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest);
        return localVarResp.getData();
    }

    /**
     * Regenerate Card
     * Recreate the card image if the card is unlocked.   Useful when changing card design, company name, or when retrieving the image results in a 404. 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> regenerateCardWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest) throws ApiException {
        okhttp3.Call localVarCall = regenerateCardValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate Card (asynchronously)
     * Recreate the card image if the card is unlocked.   Useful when changing card design, company name, or when retrieving the image results in a 404. 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateCardAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateCardValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPin
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param setPinRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPinCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, SetPinRequest setPinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPinRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/setPIN"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPinValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, SetPinRequest setPinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling setPin(Async)");
        }

        return setPinCall(cardId, accessSignature, accessUserId, accessUserIp, setPinRequest, _callback);

    }

    /**
     * Set Card PIN
     * Overwrite the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param setPinRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject setPin(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, SetPinRequest setPinRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = setPinWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, setPinRequest);
        return localVarResp.getData();
    }

    /**
     * Set Card PIN
     * Overwrite the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param setPinRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> setPinWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, SetPinRequest setPinRequest) throws ApiException {
        okhttp3.Call localVarCall = setPinValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, setPinRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Card PIN (asynchronously)
     * Overwrite the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param setPinRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPinAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, SetPinRequest setPinRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPinValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, setPinRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unblockCvc
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully unblocked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockCvcCall(Integer cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/unblockcvc2"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unblockCvcValidateBeforeCall(Integer cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling unblockCvc(Async)");
        }

        return unblockCvcCall(cardId, _callback);

    }

    /**
     * Unblock Card CVC2
     * Unblock a Card whose CVC2 is locked. 
     * @param cardId The unique identifier of the Card. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully unblocked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void unblockCvc(Integer cardId) throws ApiException {
        unblockCvcWithHttpInfo(cardId);
    }

    /**
     * Unblock Card CVC2
     * Unblock a Card whose CVC2 is locked. 
     * @param cardId The unique identifier of the Card. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully unblocked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unblockCvcWithHttpInfo(Integer cardId) throws ApiException {
        okhttp3.Call localVarCall = unblockCvcValidateBeforeCall(cardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblock Card CVC2 (asynchronously)
     * Unblock a Card whose CVC2 is locked. 
     * @param cardId The unique identifier of the Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully unblocked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockCvcAsync(Integer cardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unblockCvcValidateBeforeCall(cardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unblockPin
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockPinCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = convertVirtualRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/UnblockPIN"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unblockPinValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling unblockPin(Async)");
        }

        return unblockPinCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, _callback);

    }

    /**
     * Unblock Card PIN
     * Unblock the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject unblockPin(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = unblockPinWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest);
        return localVarResp.getData();
    }

    /**
     * Unblock Card PIN
     * Unblock the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> unblockPinWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest) throws ApiException {
        okhttp3.Call localVarCall = unblockPinValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unblock Card PIN (asynchronously)
     * Unblock the Card PIN code.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param convertVirtualRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockPinAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, ConvertVirtualRequest convertVirtualRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = unblockPinValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, convertVirtualRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBlockStatus
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param updateBlockStatusRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBlockStatusCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, UpdateBlockStatusRequest updateBlockStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBlockStatusRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/LockUnlock"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBlockStatusValidateBeforeCall(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, UpdateBlockStatusRequest updateBlockStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling updateBlockStatus(Async)");
        }

        return updateBlockStatusCall(cardId, accessSignature, accessUserId, accessUserIp, updateBlockStatusRequest, _callback);

    }

    /**
     * Update Card Lock Status
     * Block or unblock a card.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param updateBlockStatusRequest  (optional)
     * @return CardObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CardObject updateBlockStatus(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, UpdateBlockStatusRequest updateBlockStatusRequest) throws ApiException {
        ApiResponse<CardObject> localVarResp = updateBlockStatusWithHttpInfo(cardId, accessSignature, accessUserId, accessUserIp, updateBlockStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update Card Lock Status
     * Block or unblock a card.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param updateBlockStatusRequest  (optional)
     * @return ApiResponse&lt;CardObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardObject> updateBlockStatusWithHttpInfo(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, UpdateBlockStatusRequest updateBlockStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBlockStatusValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, updateBlockStatusRequest, null);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Card Lock Status (asynchronously)
     * Block or unblock a card.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param cardId The unique identifier of the Card. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param updateBlockStatusRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBlockStatusAsync(Integer cardId, String accessSignature, Integer accessUserId, String accessUserIp, UpdateBlockStatusRequest updateBlockStatusRequest, final ApiCallback<CardObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBlockStatusValidateBeforeCall(cardId, accessSignature, accessUserId, accessUserIp, updateBlockStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CardObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRenewalDetails
     * @param cardId The unique identifier of the Card. (required)
     * @param updateRenewalDetailsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRenewalDetailsCall(Integer cardId, UpdateRenewalDetailsRequest updateRenewalDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRenewalDetailsRequest;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/renewalDetails"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRenewalDetailsValidateBeforeCall(Integer cardId, UpdateRenewalDetailsRequest updateRenewalDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling updateRenewalDetails(Async)");
        }

        return updateRenewalDetailsCall(cardId, updateRenewalDetailsRequest, _callback);

    }

    /**
     * Update Renewal Details
     * Update the Card &#x60;renewalType&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param updateRenewalDetailsRequest  (optional)
     * @return GetRenewalDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetRenewalDetails200Response updateRenewalDetails(Integer cardId, UpdateRenewalDetailsRequest updateRenewalDetailsRequest) throws ApiException {
        ApiResponse<GetRenewalDetails200Response> localVarResp = updateRenewalDetailsWithHttpInfo(cardId, updateRenewalDetailsRequest);
        return localVarResp.getData();
    }

    /**
     * Update Renewal Details
     * Update the Card &#x60;renewalType&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param updateRenewalDetailsRequest  (optional)
     * @return ApiResponse&lt;GetRenewalDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRenewalDetails200Response> updateRenewalDetailsWithHttpInfo(Integer cardId, UpdateRenewalDetailsRequest updateRenewalDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRenewalDetailsValidateBeforeCall(cardId, updateRenewalDetailsRequest, null);
        Type localVarReturnType = new TypeToken<GetRenewalDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Renewal Details (asynchronously)
     * Update the Card &#x60;renewalType&#x60;. 
     * @param cardId The unique identifier of the Card. (required)
     * @param updateRenewalDetailsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRenewalDetailsAsync(Integer cardId, UpdateRenewalDetailsRequest updateRenewalDetailsRequest, final ApiCallback<GetRenewalDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRenewalDetailsValidateBeforeCall(cardId, updateRenewalDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetRenewalDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
