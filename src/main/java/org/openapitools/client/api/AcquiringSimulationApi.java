/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.NotificationSimulationAuthorizationResponse;
import org.openapitools.client.model.NotificationSimulationAuthorizations;
import org.openapitools.client.model.NotificationSimulationChargebackResponse;
import org.openapitools.client.model.NotificationSimulationPayinResponse;
import org.openapitools.client.model.NotificationSimulationPayinsCardPaymentMethod;
import org.openapitools.client.model.NotificationSimulationRefundResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AcquiringSimulationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AcquiringSimulationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AcquiringSimulationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acquiringv2TopupCardsSimulationNotificationAutorization
     * @param notificationSimulationAuthorizations  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationAutorizationCall(NotificationSimulationAuthorizations notificationSimulationAuthorizations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSimulationAuthorizations;

        // create path and map variables
        String localVarPath = "/simulation/topups/cards/notification/authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acquiringv2TopupCardsSimulationNotificationAutorizationValidateBeforeCall(NotificationSimulationAuthorizations notificationSimulationAuthorizations, final ApiCallback _callback) throws ApiException {
        return acquiringv2TopupCardsSimulationNotificationAutorizationCall(notificationSimulationAuthorizations, _callback);

    }

    /**
     * Simulate an HiPay authorization notification
     * Mocks an HiPay authorization notification provided the minimal set of parameters to generate a refund notification. 
     * @param notificationSimulationAuthorizations  (optional)
     * @return NotificationSimulationAuthorizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSimulationAuthorizationResponse acquiringv2TopupCardsSimulationNotificationAutorization(NotificationSimulationAuthorizations notificationSimulationAuthorizations) throws ApiException {
        ApiResponse<NotificationSimulationAuthorizationResponse> localVarResp = acquiringv2TopupCardsSimulationNotificationAutorizationWithHttpInfo(notificationSimulationAuthorizations);
        return localVarResp.getData();
    }

    /**
     * Simulate an HiPay authorization notification
     * Mocks an HiPay authorization notification provided the minimal set of parameters to generate a refund notification. 
     * @param notificationSimulationAuthorizations  (optional)
     * @return ApiResponse&lt;NotificationSimulationAuthorizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSimulationAuthorizationResponse> acquiringv2TopupCardsSimulationNotificationAutorizationWithHttpInfo(NotificationSimulationAuthorizations notificationSimulationAuthorizations) throws ApiException {
        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationAutorizationValidateBeforeCall(notificationSimulationAuthorizations, null);
        Type localVarReturnType = new TypeToken<NotificationSimulationAuthorizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an HiPay authorization notification (asynchronously)
     * Mocks an HiPay authorization notification provided the minimal set of parameters to generate a refund notification. 
     * @param notificationSimulationAuthorizations  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationAutorizationAsync(NotificationSimulationAuthorizations notificationSimulationAuthorizations, final ApiCallback<NotificationSimulationAuthorizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationAutorizationValidateBeforeCall(notificationSimulationAuthorizations, _callback);
        Type localVarReturnType = new TypeToken<NotificationSimulationAuthorizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for acquiringv2TopupCardsSimulationNotificationChargebacks
     * @param transactionReference The reference of the transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Chargeback notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationChargebacksCall(String transactionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/topups/cards/notification/chargebacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionReference != null) {
            localVarFormParams.put("transactionReference", transactionReference);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acquiringv2TopupCardsSimulationNotificationChargebacksValidateBeforeCall(String transactionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionReference' is set
        if (transactionReference == null) {
            throw new ApiException("Missing the required parameter 'transactionReference' when calling acquiringv2TopupCardsSimulationNotificationChargebacks(Async)");
        }

        return acquiringv2TopupCardsSimulationNotificationChargebacksCall(transactionReference, _callback);

    }

    /**
     * Simulate an HiPay chargeback notification
     * Mocks an HiPay chargeback notification providing the minimal set of parameters to generate a chargeback notification. 
     * @param transactionReference The reference of the transaction (required)
     * @return NotificationSimulationChargebackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Chargeback notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSimulationChargebackResponse acquiringv2TopupCardsSimulationNotificationChargebacks(String transactionReference) throws ApiException {
        ApiResponse<NotificationSimulationChargebackResponse> localVarResp = acquiringv2TopupCardsSimulationNotificationChargebacksWithHttpInfo(transactionReference);
        return localVarResp.getData();
    }

    /**
     * Simulate an HiPay chargeback notification
     * Mocks an HiPay chargeback notification providing the minimal set of parameters to generate a chargeback notification. 
     * @param transactionReference The reference of the transaction (required)
     * @return ApiResponse&lt;NotificationSimulationChargebackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Chargeback notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSimulationChargebackResponse> acquiringv2TopupCardsSimulationNotificationChargebacksWithHttpInfo(String transactionReference) throws ApiException {
        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationChargebacksValidateBeforeCall(transactionReference, null);
        Type localVarReturnType = new TypeToken<NotificationSimulationChargebackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an HiPay chargeback notification (asynchronously)
     * Mocks an HiPay chargeback notification providing the minimal set of parameters to generate a chargeback notification. 
     * @param transactionReference The reference of the transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Chargeback notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationChargebacksAsync(String transactionReference, final ApiCallback<NotificationSimulationChargebackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationChargebacksValidateBeforeCall(transactionReference, _callback);
        Type localVarReturnType = new TypeToken<NotificationSimulationChargebackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for acquiringv2TopupCardsSimulationNotificationPayins
     * @param walletId Identifier of the wallet to be credited (required)
     * @param amount Payin amount (required)
     * @param currency Base currency for this payin  This three-character currency code must comply with ISO-4217 (required)
     * @param userId Identifier of the user on behalf of which the simulated payin should be executed  (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @param cardPaymentMethod  (optional)
     * @param profile HiPay merchant identifier (mid) to be used for the operation. Required if the client has multiple merchant identifiers associated. If only one mid is associated, then that one is used for the operation.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payin notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationPayinsCall(String walletId, BigDecimal amount, String currency, String userId, Integer status, String transactionReference, NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod, String profile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/topups/cards/notification/payins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarFormParams.put("userId", userId);
        }

        if (walletId != null) {
            localVarFormParams.put("walletId", walletId);
        }

        if (amount != null) {
            localVarFormParams.put("amount", amount);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (transactionReference != null) {
            localVarFormParams.put("transactionReference", transactionReference);
        }

        if (cardPaymentMethod != null) {
            localVarFormParams.put("cardPaymentMethod", cardPaymentMethod);
        }

        if (profile != null) {
            localVarFormParams.put("profile", profile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acquiringv2TopupCardsSimulationNotificationPayinsValidateBeforeCall(String walletId, BigDecimal amount, String currency, String userId, Integer status, String transactionReference, NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod, String profile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling acquiringv2TopupCardsSimulationNotificationPayins(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling acquiringv2TopupCardsSimulationNotificationPayins(Async)");
        }

        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling acquiringv2TopupCardsSimulationNotificationPayins(Async)");
        }

        return acquiringv2TopupCardsSimulationNotificationPayinsCall(walletId, amount, currency, userId, status, transactionReference, cardPaymentMethod, profile, _callback);

    }

    /**
     * Simulate an HiPay payin notification
     * Mocks an HiPay payin notification providing the minimal set of parameters to generate a payin notification. 
     * @param walletId Identifier of the wallet to be credited (required)
     * @param amount Payin amount (required)
     * @param currency Base currency for this payin  This three-character currency code must comply with ISO-4217 (required)
     * @param userId Identifier of the user on behalf of which the simulated payin should be executed  (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @param cardPaymentMethod  (optional)
     * @param profile HiPay merchant identifier (mid) to be used for the operation. Required if the client has multiple merchant identifiers associated. If only one mid is associated, then that one is used for the operation.  (optional)
     * @return NotificationSimulationPayinResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payin notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSimulationPayinResponse acquiringv2TopupCardsSimulationNotificationPayins(String walletId, BigDecimal amount, String currency, String userId, Integer status, String transactionReference, NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod, String profile) throws ApiException {
        ApiResponse<NotificationSimulationPayinResponse> localVarResp = acquiringv2TopupCardsSimulationNotificationPayinsWithHttpInfo(walletId, amount, currency, userId, status, transactionReference, cardPaymentMethod, profile);
        return localVarResp.getData();
    }

    /**
     * Simulate an HiPay payin notification
     * Mocks an HiPay payin notification providing the minimal set of parameters to generate a payin notification. 
     * @param walletId Identifier of the wallet to be credited (required)
     * @param amount Payin amount (required)
     * @param currency Base currency for this payin  This three-character currency code must comply with ISO-4217 (required)
     * @param userId Identifier of the user on behalf of which the simulated payin should be executed  (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @param cardPaymentMethod  (optional)
     * @param profile HiPay merchant identifier (mid) to be used for the operation. Required if the client has multiple merchant identifiers associated. If only one mid is associated, then that one is used for the operation.  (optional)
     * @return ApiResponse&lt;NotificationSimulationPayinResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payin notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSimulationPayinResponse> acquiringv2TopupCardsSimulationNotificationPayinsWithHttpInfo(String walletId, BigDecimal amount, String currency, String userId, Integer status, String transactionReference, NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod, String profile) throws ApiException {
        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationPayinsValidateBeforeCall(walletId, amount, currency, userId, status, transactionReference, cardPaymentMethod, profile, null);
        Type localVarReturnType = new TypeToken<NotificationSimulationPayinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an HiPay payin notification (asynchronously)
     * Mocks an HiPay payin notification providing the minimal set of parameters to generate a payin notification. 
     * @param walletId Identifier of the wallet to be credited (required)
     * @param amount Payin amount (required)
     * @param currency Base currency for this payin  This three-character currency code must comply with ISO-4217 (required)
     * @param userId Identifier of the user on behalf of which the simulated payin should be executed  (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @param cardPaymentMethod  (optional)
     * @param profile HiPay merchant identifier (mid) to be used for the operation. Required if the client has multiple merchant identifiers associated. If only one mid is associated, then that one is used for the operation.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payin notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationPayinsAsync(String walletId, BigDecimal amount, String currency, String userId, Integer status, String transactionReference, NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod, String profile, final ApiCallback<NotificationSimulationPayinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationPayinsValidateBeforeCall(walletId, amount, currency, userId, status, transactionReference, cardPaymentMethod, profile, _callback);
        Type localVarReturnType = new TypeToken<NotificationSimulationPayinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for acquiringv2TopupCardsSimulationNotificationRefunds
     * @param payinId The universally unique identifier (UUID) of the payin (required)
     * @param userId Identifier of the user on behalf of which the simulated refund should be executed  (optional)
     * @param walletId Identifier of the wallet to be credited (optional)
     * @param amount Refund amount (optional)
     * @param currency Base currency for this refund  This three-character currency code must comply with ISO-4217 (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationRefundsCall(String payinId, String userId, String walletId, BigDecimal amount, String currency, Integer status, String transactionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/topups/cards/notification/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarFormParams.put("userId", userId);
        }

        if (walletId != null) {
            localVarFormParams.put("walletId", walletId);
        }

        if (amount != null) {
            localVarFormParams.put("amount", amount);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (transactionReference != null) {
            localVarFormParams.put("transactionReference", transactionReference);
        }

        if (payinId != null) {
            localVarFormParams.put("payinId", payinId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acquiringv2TopupCardsSimulationNotificationRefundsValidateBeforeCall(String payinId, String userId, String walletId, BigDecimal amount, String currency, Integer status, String transactionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payinId' is set
        if (payinId == null) {
            throw new ApiException("Missing the required parameter 'payinId' when calling acquiringv2TopupCardsSimulationNotificationRefunds(Async)");
        }

        return acquiringv2TopupCardsSimulationNotificationRefundsCall(payinId, userId, walletId, amount, currency, status, transactionReference, _callback);

    }

    /**
     * Simulate an HiPay refund notification
     * Mocks an HiPay refund notification providing the minimal set of parameters to generate a refund notification. 
     * @param payinId The universally unique identifier (UUID) of the payin (required)
     * @param userId Identifier of the user on behalf of which the simulated refund should be executed  (optional)
     * @param walletId Identifier of the wallet to be credited (optional)
     * @param amount Refund amount (optional)
     * @param currency Base currency for this refund  This three-character currency code must comply with ISO-4217 (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @return NotificationSimulationRefundResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSimulationRefundResponse acquiringv2TopupCardsSimulationNotificationRefunds(String payinId, String userId, String walletId, BigDecimal amount, String currency, Integer status, String transactionReference) throws ApiException {
        ApiResponse<NotificationSimulationRefundResponse> localVarResp = acquiringv2TopupCardsSimulationNotificationRefundsWithHttpInfo(payinId, userId, walletId, amount, currency, status, transactionReference);
        return localVarResp.getData();
    }

    /**
     * Simulate an HiPay refund notification
     * Mocks an HiPay refund notification providing the minimal set of parameters to generate a refund notification. 
     * @param payinId The universally unique identifier (UUID) of the payin (required)
     * @param userId Identifier of the user on behalf of which the simulated refund should be executed  (optional)
     * @param walletId Identifier of the wallet to be credited (optional)
     * @param amount Refund amount (optional)
     * @param currency Base currency for this refund  This three-character currency code must comply with ISO-4217 (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @return ApiResponse&lt;NotificationSimulationRefundResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSimulationRefundResponse> acquiringv2TopupCardsSimulationNotificationRefundsWithHttpInfo(String payinId, String userId, String walletId, BigDecimal amount, String currency, Integer status, String transactionReference) throws ApiException {
        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationRefundsValidateBeforeCall(payinId, userId, walletId, amount, currency, status, transactionReference, null);
        Type localVarReturnType = new TypeToken<NotificationSimulationRefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an HiPay refund notification (asynchronously)
     * Mocks an HiPay refund notification providing the minimal set of parameters to generate a refund notification. 
     * @param payinId The universally unique identifier (UUID) of the payin (required)
     * @param userId Identifier of the user on behalf of which the simulated refund should be executed  (optional)
     * @param walletId Identifier of the wallet to be credited (optional)
     * @param amount Refund amount (optional)
     * @param currency Base currency for this refund  This three-character currency code must comply with ISO-4217 (optional)
     * @param status The status code of the simulated notification (optional)
     * @param transactionReference The reference of the transaction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund notification successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acquiringv2TopupCardsSimulationNotificationRefundsAsync(String payinId, String userId, String walletId, BigDecimal amount, String currency, Integer status, String transactionReference, final ApiCallback<NotificationSimulationRefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acquiringv2TopupCardsSimulationNotificationRefundsValidateBeforeCall(payinId, userId, walletId, amount, currency, status, transactionReference, _callback);
        Type localVarReturnType = new TypeToken<NotificationSimulationRefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
