/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PayinObject;
import org.openapitools.client.model.PostPayinRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayinsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayinsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayinsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePayin
     * @param payinId The unique identifier of the payin. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayinCall(String payinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payins/{payinId}"
            .replace("{" + "payinId" + "}", localVarApiClient.escapeString(payinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayinValidateBeforeCall(String payinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payinId' is set
        if (payinId == null) {
            throw new ApiException("Missing the required parameter 'payinId' when calling deletePayin(Async)");
        }

        return deletePayinCall(payinId, _callback);

    }

    /**
     * Delete Payin
     * Cancels a Payin. This endpoint is only available for the [Check cashing](/guide/cheques/introduction.html) feature, prior to the check reception at the treatment center. 
     * @param payinId The unique identifier of the payin. (required)
     * @return PayinObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PayinObject deletePayin(String payinId) throws ApiException {
        ApiResponse<PayinObject> localVarResp = deletePayinWithHttpInfo(payinId);
        return localVarResp.getData();
    }

    /**
     * Delete Payin
     * Cancels a Payin. This endpoint is only available for the [Check cashing](/guide/cheques/introduction.html) feature, prior to the check reception at the treatment center. 
     * @param payinId The unique identifier of the payin. (required)
     * @return ApiResponse&lt;PayinObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayinObject> deletePayinWithHttpInfo(String payinId) throws ApiException {
        okhttp3.Call localVarCall = deletePayinValidateBeforeCall(payinId, null);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Payin (asynchronously)
     * Cancels a Payin. This endpoint is only available for the [Check cashing](/guide/cheques/introduction.html) feature, prior to the check reception at the treatment center. 
     * @param payinId The unique identifier of the payin. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayinAsync(String payinId, final ApiCallback<PayinObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayinValidateBeforeCall(payinId, _callback);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayin
     * @param payinId The unique identifier of the payin. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinCall(String payinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payins/{payinId}"
            .replace("{" + "payinId" + "}", localVarApiClient.escapeString(payinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayinValidateBeforeCall(String payinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payinId' is set
        if (payinId == null) {
            throw new ApiException("Missing the required parameter 'payinId' when calling getPayin(Async)");
        }

        return getPayinCall(payinId, _callback);

    }

    /**
     * Get Payin
     * Retrieve a payin by its id.
     * @param payinId The unique identifier of the payin. (required)
     * @return PayinObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PayinObject getPayin(String payinId) throws ApiException {
        ApiResponse<PayinObject> localVarResp = getPayinWithHttpInfo(payinId);
        return localVarResp.getData();
    }

    /**
     * Get Payin
     * Retrieve a payin by its id.
     * @param payinId The unique identifier of the payin. (required)
     * @return ApiResponse&lt;PayinObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayinObject> getPayinWithHttpInfo(String payinId) throws ApiException {
        okhttp3.Call localVarCall = getPayinValidateBeforeCall(payinId, null);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payin (asynchronously)
     * Retrieve a payin by its id.
     * @param payinId The unique identifier of the payin. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinAsync(String payinId, final ApiCallback<PayinObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayinValidateBeforeCall(payinId, _callback);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayins
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param walletId Payin&#39;s wallet id. (optional)
     * @param payinTag Client custom data. (optional)
     * @param payinStatus The status of the payin. (optional)
     * @param userId The unique identifier of the User who performed the operation (debited). (optional)
     * @param userName The name of the User who performed the operation (debited). (optional)
     * @param userEmail The email of the User who performed the operation (debited). (optional)
     * @param beneficiaryUserId The unique identifier of the User who received the operation (credited). (optional)
     * @param eventAlias The name of the credited Wallet. (optional)
     * @param walletTypeId Payin&#39;s wallet type id. (optional)
     * @param paymentMethodId Payin&#39;s payment method id. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param cursor  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinsCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer payinId, Integer walletId, String payinTag, String payinStatus, String userId, String userName, String userEmail, Integer beneficiaryUserId, String eventAlias, Integer walletTypeId, String paymentMethodId, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (payinId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinId", payinId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (payinTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinTag", payinTag));
        }

        if (payinStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinStatus", payinStatus));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userEmail", userEmail));
        }

        if (beneficiaryUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beneficiaryUserId", beneficiaryUserId));
        }

        if (eventAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventAlias", eventAlias));
        }

        if (walletTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletTypeId", walletTypeId));
        }

        if (paymentMethodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentMethodId", paymentMethodId));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayinsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer payinId, Integer walletId, String payinTag, String payinStatus, String userId, String userName, String userEmail, Integer beneficiaryUserId, String eventAlias, Integer walletTypeId, String paymentMethodId, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, String cursor, final ApiCallback _callback) throws ApiException {
        return getPayinsCall(accessSignature, accessTag, accessUserId, accessUserIp, payinId, walletId, payinTag, payinStatus, userId, userName, userEmail, beneficiaryUserId, eventAlias, walletTypeId, paymentMethodId, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, cursor, _callback);

    }

    /**
     * Search Payins
     * Get payins that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param walletId Payin&#39;s wallet id. (optional)
     * @param payinTag Client custom data. (optional)
     * @param payinStatus The status of the payin. (optional)
     * @param userId The unique identifier of the User who performed the operation (debited). (optional)
     * @param userName The name of the User who performed the operation (debited). (optional)
     * @param userEmail The email of the User who performed the operation (debited). (optional)
     * @param beneficiaryUserId The unique identifier of the User who received the operation (credited). (optional)
     * @param eventAlias The name of the credited Wallet. (optional)
     * @param walletTypeId Payin&#39;s wallet type id. (optional)
     * @param paymentMethodId Payin&#39;s payment method id. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param cursor  (optional)
     * @return PayinObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PayinObject getPayins(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer payinId, Integer walletId, String payinTag, String payinStatus, String userId, String userName, String userEmail, Integer beneficiaryUserId, String eventAlias, Integer walletTypeId, String paymentMethodId, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, String cursor) throws ApiException {
        ApiResponse<PayinObject> localVarResp = getPayinsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, payinId, walletId, payinTag, payinStatus, userId, userName, userEmail, beneficiaryUserId, eventAlias, walletTypeId, paymentMethodId, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, cursor);
        return localVarResp.getData();
    }

    /**
     * Search Payins
     * Get payins that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param walletId Payin&#39;s wallet id. (optional)
     * @param payinTag Client custom data. (optional)
     * @param payinStatus The status of the payin. (optional)
     * @param userId The unique identifier of the User who performed the operation (debited). (optional)
     * @param userName The name of the User who performed the operation (debited). (optional)
     * @param userEmail The email of the User who performed the operation (debited). (optional)
     * @param beneficiaryUserId The unique identifier of the User who received the operation (credited). (optional)
     * @param eventAlias The name of the credited Wallet. (optional)
     * @param walletTypeId Payin&#39;s wallet type id. (optional)
     * @param paymentMethodId Payin&#39;s payment method id. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param cursor  (optional)
     * @return ApiResponse&lt;PayinObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayinObject> getPayinsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer payinId, Integer walletId, String payinTag, String payinStatus, String userId, String userName, String userEmail, Integer beneficiaryUserId, String eventAlias, Integer walletTypeId, String paymentMethodId, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getPayinsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, payinId, walletId, payinTag, payinStatus, userId, userName, userEmail, beneficiaryUserId, eventAlias, walletTypeId, paymentMethodId, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, cursor, null);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Payins (asynchronously)
     * Get payins that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param walletId Payin&#39;s wallet id. (optional)
     * @param payinTag Client custom data. (optional)
     * @param payinStatus The status of the payin. (optional)
     * @param userId The unique identifier of the User who performed the operation (debited). (optional)
     * @param userName The name of the User who performed the operation (debited). (optional)
     * @param userEmail The email of the User who performed the operation (debited). (optional)
     * @param beneficiaryUserId The unique identifier of the User who received the operation (credited). (optional)
     * @param eventAlias The name of the credited Wallet. (optional)
     * @param walletTypeId Payin&#39;s wallet type id. (optional)
     * @param paymentMethodId Payin&#39;s payment method id. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param cursor  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinsAsync(String accessSignature, String accessTag, Integer accessUserId, Integer accessUserIp, Integer payinId, Integer walletId, String payinTag, String payinStatus, String userId, String userName, String userEmail, Integer beneficiaryUserId, String eventAlias, Integer walletTypeId, String paymentMethodId, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, String cursor, final ApiCallback<PayinObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayinsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, payinId, walletId, payinTag, payinStatus, userId, userName, userEmail, beneficiaryUserId, eventAlias, walletTypeId, paymentMethodId, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, cursor, _callback);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPayin
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayinRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPayinCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayinRequest postPayinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postPayinRequest;

        // create path and map variables
        String localVarPath = "/v1/payins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPayinValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayinRequest postPayinRequest, final ApiCallback _callback) throws ApiException {
        return postPayinCall(accessSignature, accessTag, accessUserId, accessUserIp, postPayinRequest, _callback);

    }

    /**
     * Create Payin
     * Create a new payin.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayinRequest  (optional)
     * @return PayinObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PayinObject postPayin(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayinRequest postPayinRequest) throws ApiException {
        ApiResponse<PayinObject> localVarResp = postPayinWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, postPayinRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payin
     * Create a new payin.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayinRequest  (optional)
     * @return ApiResponse&lt;PayinObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayinObject> postPayinWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayinRequest postPayinRequest) throws ApiException {
        okhttp3.Call localVarCall = postPayinValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postPayinRequest, null);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payin (asynchronously)
     * Create a new payin.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayinRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPayinAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayinRequest postPayinRequest, final ApiCallback<PayinObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPayinValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postPayinRequest, _callback);
        Type localVarReturnType = new TypeToken<PayinObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
