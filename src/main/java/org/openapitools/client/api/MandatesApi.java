/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.DeleteMandate200Response;
import org.openapitools.client.model.MandateObject;
import org.openapitools.client.model.PostMandatesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MandatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MandatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MandatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMandate
     * @param mandateId The unique identifier of the Mandate. (required)
     * @param origin The origin of the request for revoking the Mandate.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMandateCall(Integer mandateId, String origin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates/{mandateId}"
            .replace("{" + "mandateId" + "}", localVarApiClient.escapeString(mandateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMandateValidateBeforeCall(Integer mandateId, String origin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateId' is set
        if (mandateId == null) {
            throw new ApiException("Missing the required parameter 'mandateId' when calling deleteMandate(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling deleteMandate(Async)");
        }

        return deleteMandateCall(mandateId, origin, _callback);

    }

    /**
     * Revoke Mandate
     * Change the Mandate status to &#x60;CANCELED&#x60;.
     * @param mandateId The unique identifier of the Mandate. (required)
     * @param origin The origin of the request for revoking the Mandate.  (required)
     * @return DeleteMandate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMandate200Response deleteMandate(Integer mandateId, String origin) throws ApiException {
        ApiResponse<DeleteMandate200Response> localVarResp = deleteMandateWithHttpInfo(mandateId, origin);
        return localVarResp.getData();
    }

    /**
     * Revoke Mandate
     * Change the Mandate status to &#x60;CANCELED&#x60;.
     * @param mandateId The unique identifier of the Mandate. (required)
     * @param origin The origin of the request for revoking the Mandate.  (required)
     * @return ApiResponse&lt;DeleteMandate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMandate200Response> deleteMandateWithHttpInfo(Integer mandateId, String origin) throws ApiException {
        okhttp3.Call localVarCall = deleteMandateValidateBeforeCall(mandateId, origin, null);
        Type localVarReturnType = new TypeToken<DeleteMandate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke Mandate (asynchronously)
     * Change the Mandate status to &#x60;CANCELED&#x60;.
     * @param mandateId The unique identifier of the Mandate. (required)
     * @param origin The origin of the request for revoking the Mandate.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMandateAsync(Integer mandateId, String origin, final ApiCallback<DeleteMandate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMandateValidateBeforeCall(mandateId, origin, _callback);
        Type localVarReturnType = new TypeToken<DeleteMandate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMandate
     * @param mandateId The unique identifier of the Mandate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMandateCall(Long mandateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates/{mandateId}"
            .replace("{" + "mandateId" + "}", localVarApiClient.escapeString(mandateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMandateValidateBeforeCall(Long mandateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateId' is set
        if (mandateId == null) {
            throw new ApiException("Missing the required parameter 'mandateId' when calling getMandate(Async)");
        }

        return getMandateCall(mandateId, _callback);

    }

    /**
     * Get Mandate
     * Retrieve a Mandate based on its &#x60;id&#x60;.
     * @param mandateId The unique identifier of the Mandate. (required)
     * @return MandateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MandateObject getMandate(Long mandateId) throws ApiException {
        ApiResponse<MandateObject> localVarResp = getMandateWithHttpInfo(mandateId);
        return localVarResp.getData();
    }

    /**
     * Get Mandate
     * Retrieve a Mandate based on its &#x60;id&#x60;.
     * @param mandateId The unique identifier of the Mandate. (required)
     * @return ApiResponse&lt;MandateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MandateObject> getMandateWithHttpInfo(Long mandateId) throws ApiException {
        okhttp3.Call localVarCall = getMandateValidateBeforeCall(mandateId, null);
        Type localVarReturnType = new TypeToken<MandateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Mandate (asynchronously)
     * Retrieve a Mandate based on its &#x60;id&#x60;.
     * @param mandateId The unique identifier of the Mandate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMandateAsync(Long mandateId, final ApiCallback<MandateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMandateValidateBeforeCall(mandateId, _callback);
        Type localVarReturnType = new TypeToken<MandateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMandates
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param mandateId The unique identifier of the Mandate. (optional)
     * @param userId The unique identifier of the User who initiates the Mandate request. (optional)
     * @param uniqueMandateReference Unique Mandate Reference (UMR) of the searched mandate. It is a sequence of characters that ensures the mandate traceability. UMR coupled with SCI allows to uniquely identify a creditor and a contract for any mandate. It is provided at the mandate creation.  (optional)
     * @param mandateStatus The status of the Mandate.  (optional)
     * @param filter You can filter the API response by using filter(s).  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: &#x60;FILTER1;FILTER2;FILTER3&#x60;  A single filter has the following syntax : \&quot;fieldName criterionexpression\&quot;.  Where: * fieldName – the name of a filterable field of this object. * expression – the values to be included or excluded (see the table below for more information) * criterion – a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMandatesCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer mandateId, Integer userId, String uniqueMandateReference, String mandateStatus, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (mandateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mandateId", mandateId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (uniqueMandateReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueMandateReference", uniqueMandateReference));
        }

        if (mandateStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mandateStatus", mandateStatus));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMandatesValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer mandateId, Integer userId, String uniqueMandateReference, String mandateStatus, String filter, final ApiCallback _callback) throws ApiException {
        return getMandatesCall(accessSignature, accessTag, accessUserId, accessUserIp, mandateId, userId, uniqueMandateReference, mandateStatus, filter, _callback);

    }

    /**
     * Search Mandates
     * Retrieve Mandates that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param mandateId The unique identifier of the Mandate. (optional)
     * @param userId The unique identifier of the User who initiates the Mandate request. (optional)
     * @param uniqueMandateReference Unique Mandate Reference (UMR) of the searched mandate. It is a sequence of characters that ensures the mandate traceability. UMR coupled with SCI allows to uniquely identify a creditor and a contract for any mandate. It is provided at the mandate creation.  (optional)
     * @param mandateStatus The status of the Mandate.  (optional)
     * @param filter You can filter the API response by using filter(s).  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: &#x60;FILTER1;FILTER2;FILTER3&#x60;  A single filter has the following syntax : \&quot;fieldName criterionexpression\&quot;.  Where: * fieldName – the name of a filterable field of this object. * expression – the values to be included or excluded (see the table below for more information) * criterion – a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @return MandateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MandateObject getMandates(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer mandateId, Integer userId, String uniqueMandateReference, String mandateStatus, String filter) throws ApiException {
        ApiResponse<MandateObject> localVarResp = getMandatesWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, mandateId, userId, uniqueMandateReference, mandateStatus, filter);
        return localVarResp.getData();
    }

    /**
     * Search Mandates
     * Retrieve Mandates that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param mandateId The unique identifier of the Mandate. (optional)
     * @param userId The unique identifier of the User who initiates the Mandate request. (optional)
     * @param uniqueMandateReference Unique Mandate Reference (UMR) of the searched mandate. It is a sequence of characters that ensures the mandate traceability. UMR coupled with SCI allows to uniquely identify a creditor and a contract for any mandate. It is provided at the mandate creation.  (optional)
     * @param mandateStatus The status of the Mandate.  (optional)
     * @param filter You can filter the API response by using filter(s).  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: &#x60;FILTER1;FILTER2;FILTER3&#x60;  A single filter has the following syntax : \&quot;fieldName criterionexpression\&quot;.  Where: * fieldName – the name of a filterable field of this object. * expression – the values to be included or excluded (see the table below for more information) * criterion – a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @return ApiResponse&lt;MandateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MandateObject> getMandatesWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer mandateId, Integer userId, String uniqueMandateReference, String mandateStatus, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMandatesValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, mandateId, userId, uniqueMandateReference, mandateStatus, filter, null);
        Type localVarReturnType = new TypeToken<MandateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Mandates (asynchronously)
     * Retrieve Mandates that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param mandateId The unique identifier of the Mandate. (optional)
     * @param userId The unique identifier of the User who initiates the Mandate request. (optional)
     * @param uniqueMandateReference Unique Mandate Reference (UMR) of the searched mandate. It is a sequence of characters that ensures the mandate traceability. UMR coupled with SCI allows to uniquely identify a creditor and a contract for any mandate. It is provided at the mandate creation.  (optional)
     * @param mandateStatus The status of the Mandate.  (optional)
     * @param filter You can filter the API response by using filter(s).  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: &#x60;FILTER1;FILTER2;FILTER3&#x60;  A single filter has the following syntax : \&quot;fieldName criterionexpression\&quot;.  Where: * fieldName – the name of a filterable field of this object. * expression – the values to be included or excluded (see the table below for more information) * criterion – a filter criterion.  Here are the possible values for criterion:   | Criteria |         Description    |                   Type                   | Expression Example |  |----------|------------------------|------------------------------------------|--------------------|  |     &gt;    |      greater than      |            alphanumeric string           |         100        |  |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        |  |     &lt;    |        less than       |            alphanumeric string           |         100        |  |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        |  |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        |  |   like   |          like          |            alphanumeric string           |         100        |  |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |  |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMandatesAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer mandateId, Integer userId, String uniqueMandateReference, String mandateStatus, String filter, final ApiCallback<MandateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMandatesValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, mandateId, userId, uniqueMandateReference, mandateStatus, filter, _callback);
        Type localVarReturnType = new TypeToken<MandateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMandates
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postMandatesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMandatesCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostMandatesRequest postMandatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postMandatesRequest;

        // create path and map variables
        String localVarPath = "/v1/mandates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMandatesValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostMandatesRequest postMandatesRequest, final ApiCallback _callback) throws ApiException {
        return postMandatesCall(accessSignature, accessTag, accessUserId, accessUserIp, postMandatesRequest, _callback);

    }

    /**
     * Create Mandate
     * Create a new mandate. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postMandatesRequest  (optional)
     * @return MandateObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MandateObject postMandates(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostMandatesRequest postMandatesRequest) throws ApiException {
        ApiResponse<MandateObject> localVarResp = postMandatesWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, postMandatesRequest);
        return localVarResp.getData();
    }

    /**
     * Create Mandate
     * Create a new mandate. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postMandatesRequest  (optional)
     * @return ApiResponse&lt;MandateObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MandateObject> postMandatesWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostMandatesRequest postMandatesRequest) throws ApiException {
        okhttp3.Call localVarCall = postMandatesValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postMandatesRequest, null);
        Type localVarReturnType = new TypeToken<MandateObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Mandate (asynchronously)
     * Create a new mandate. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postMandatesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMandatesAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostMandatesRequest postMandatesRequest, final ApiCallback<MandateObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMandatesValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postMandatesRequest, _callback);
        Type localVarReturnType = new TypeToken<MandateObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
