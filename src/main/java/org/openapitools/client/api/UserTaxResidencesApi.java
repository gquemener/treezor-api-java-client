/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCardsDefaultResponse;
import org.openapitools.client.model.PostTaxresidenceRequest;
import org.openapitools.client.model.TaxResidenceObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserTaxResidencesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserTaxResidencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserTaxResidencesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTaxresidence
     * @param taxResidenceId The unique identifier of the Tax Residence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaxresidenceCall(Integer taxResidenceId, String accessSignature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxResidences/{taxResidenceId}"
            .replace("{" + "taxResidenceId" + "}", localVarApiClient.escapeString(taxResidenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaxresidenceValidateBeforeCall(Integer taxResidenceId, String accessSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxResidenceId' is set
        if (taxResidenceId == null) {
            throw new ApiException("Missing the required parameter 'taxResidenceId' when calling deleteTaxresidence(Async)");
        }

        return deleteTaxresidenceCall(taxResidenceId, accessSignature, _callback);

    }

    /**
     * Delete a residence
     * Delete a residence that match id
     * @param taxResidenceId The unique identifier of the Tax Residence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @return TaxResidenceObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TaxResidenceObject deleteTaxresidence(Integer taxResidenceId, String accessSignature) throws ApiException {
        ApiResponse<TaxResidenceObject> localVarResp = deleteTaxresidenceWithHttpInfo(taxResidenceId, accessSignature);
        return localVarResp.getData();
    }

    /**
     * Delete a residence
     * Delete a residence that match id
     * @param taxResidenceId The unique identifier of the Tax Residence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @return ApiResponse&lt;TaxResidenceObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxResidenceObject> deleteTaxresidenceWithHttpInfo(Integer taxResidenceId, String accessSignature) throws ApiException {
        okhttp3.Call localVarCall = deleteTaxresidenceValidateBeforeCall(taxResidenceId, accessSignature, null);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a residence (asynchronously)
     * Delete a residence that match id
     * @param taxResidenceId The unique identifier of the Tax Residence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaxresidenceAsync(Integer taxResidenceId, String accessSignature, final ApiCallback<TaxResidenceObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaxresidenceValidateBeforeCall(taxResidenceId, accessSignature, _callback);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxresidence
     * @param taxResidenceId The unique identifier of the TaxResidence. (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxresidenceCall(Integer taxResidenceId, String accessSignature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxResidences/{taxResidenceId}"
            .replace("{" + "taxResidenceId" + "}", localVarApiClient.escapeString(taxResidenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxresidenceValidateBeforeCall(Integer taxResidenceId, String accessSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxResidenceId' is set
        if (taxResidenceId == null) {
            throw new ApiException("Missing the required parameter 'taxResidenceId' when calling getTaxresidence(Async)");
        }

        return getTaxresidenceCall(taxResidenceId, accessSignature, _callback);

    }

    /**
     * Get Tax Residence
     * Retrieve a Tax Residence based on its &#x60;id&#x60;.
     * @param taxResidenceId The unique identifier of the TaxResidence. (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @return TaxResidenceObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TaxResidenceObject getTaxresidence(Integer taxResidenceId, String accessSignature) throws ApiException {
        ApiResponse<TaxResidenceObject> localVarResp = getTaxresidenceWithHttpInfo(taxResidenceId, accessSignature);
        return localVarResp.getData();
    }

    /**
     * Get Tax Residence
     * Retrieve a Tax Residence based on its &#x60;id&#x60;.
     * @param taxResidenceId The unique identifier of the TaxResidence. (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @return ApiResponse&lt;TaxResidenceObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxResidenceObject> getTaxresidenceWithHttpInfo(Integer taxResidenceId, String accessSignature) throws ApiException {
        okhttp3.Call localVarCall = getTaxresidenceValidateBeforeCall(taxResidenceId, accessSignature, null);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tax Residence (asynchronously)
     * Retrieve a Tax Residence based on its &#x60;id&#x60;.
     * @param taxResidenceId The unique identifier of the TaxResidence. (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxresidenceAsync(Integer taxResidenceId, String accessSignature, final ApiCallback<TaxResidenceObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxresidenceValidateBeforeCall(taxResidenceId, accessSignature, _callback);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxresidences
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param id The unique identifier of the Tax Residence. (optional)
     * @param userId The unique identifier of the User. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxresidencesCall(String accessSignature, Integer id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxResidences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxresidencesValidateBeforeCall(String accessSignature, Integer id, Integer userId, final ApiCallback _callback) throws ApiException {
        return getTaxresidencesCall(accessSignature, id, userId, _callback);

    }

    /**
     * Search Tax Residences
     * Retrieve Tax Residences that match your search conditions.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param id The unique identifier of the Tax Residence. (optional)
     * @param userId The unique identifier of the User. (optional)
     * @return TaxResidenceObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TaxResidenceObject getTaxresidences(String accessSignature, Integer id, Integer userId) throws ApiException {
        ApiResponse<TaxResidenceObject> localVarResp = getTaxresidencesWithHttpInfo(accessSignature, id, userId);
        return localVarResp.getData();
    }

    /**
     * Search Tax Residences
     * Retrieve Tax Residences that match your search conditions.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param id The unique identifier of the Tax Residence. (optional)
     * @param userId The unique identifier of the User. (optional)
     * @return ApiResponse&lt;TaxResidenceObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxResidenceObject> getTaxresidencesWithHttpInfo(String accessSignature, Integer id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getTaxresidencesValidateBeforeCall(accessSignature, id, userId, null);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Tax Residences (asynchronously)
     * Retrieve Tax Residences that match your search conditions.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param id The unique identifier of the Tax Residence. (optional)
     * @param userId The unique identifier of the User. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxresidencesAsync(String accessSignature, Integer id, Integer userId, final ApiCallback<TaxResidenceObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxresidencesValidateBeforeCall(accessSignature, id, userId, _callback);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTaxresidence
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param postTaxresidenceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTaxresidenceCall(String accessSignature, PostTaxresidenceRequest postTaxresidenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postTaxresidenceRequest;

        // create path and map variables
        String localVarPath = "/v1/taxResidences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTaxresidenceValidateBeforeCall(String accessSignature, PostTaxresidenceRequest postTaxresidenceRequest, final ApiCallback _callback) throws ApiException {
        return postTaxresidenceCall(accessSignature, postTaxresidenceRequest, _callback);

    }

    /**
     * Create Tax Residence
     * Create a new Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param postTaxresidenceRequest  (optional)
     * @return TaxResidenceObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TaxResidenceObject postTaxresidence(String accessSignature, PostTaxresidenceRequest postTaxresidenceRequest) throws ApiException {
        ApiResponse<TaxResidenceObject> localVarResp = postTaxresidenceWithHttpInfo(accessSignature, postTaxresidenceRequest);
        return localVarResp.getData();
    }

    /**
     * Create Tax Residence
     * Create a new Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param postTaxresidenceRequest  (optional)
     * @return ApiResponse&lt;TaxResidenceObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxResidenceObject> postTaxresidenceWithHttpInfo(String accessSignature, PostTaxresidenceRequest postTaxresidenceRequest) throws ApiException {
        okhttp3.Call localVarCall = postTaxresidenceValidateBeforeCall(accessSignature, postTaxresidenceRequest, null);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Tax Residence (asynchronously)
     * Create a new Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param postTaxresidenceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTaxresidenceAsync(String accessSignature, PostTaxresidenceRequest postTaxresidenceRequest, final ApiCallback<TaxResidenceObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTaxresidenceValidateBeforeCall(accessSignature, postTaxresidenceRequest, _callback);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putTaxresidence
     * @param taxResidenceId The unique identifier of the TaxResidence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param userId User&#39;s id residence (optional)
     * @param country country of the resident (optional)
     * @param taxPayerId Tax payer&#39;s id (optional)
     * @param liabilityWaiver Tax declaration (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTaxresidenceCall(Integer taxResidenceId, String accessSignature, Integer userId, String country, String taxPayerId, Boolean liabilityWaiver, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxResidences/{taxResidenceId}"
            .replace("{" + "taxResidenceId" + "}", localVarApiClient.escapeString(taxResidenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (taxPayerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxPayerId", taxPayerId));
        }

        if (liabilityWaiver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("liabilityWaiver", liabilityWaiver));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTaxresidenceValidateBeforeCall(Integer taxResidenceId, String accessSignature, Integer userId, String country, String taxPayerId, Boolean liabilityWaiver, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxResidenceId' is set
        if (taxResidenceId == null) {
            throw new ApiException("Missing the required parameter 'taxResidenceId' when calling putTaxresidence(Async)");
        }

        return putTaxresidenceCall(taxResidenceId, accessSignature, userId, country, taxPayerId, liabilityWaiver, _callback);

    }

    /**
     * Update Tax Residence
     * Modify an existing Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param taxResidenceId The unique identifier of the TaxResidence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param userId User&#39;s id residence (optional)
     * @param country country of the resident (optional)
     * @param taxPayerId Tax payer&#39;s id (optional)
     * @param liabilityWaiver Tax declaration (optional)
     * @return TaxResidenceObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TaxResidenceObject putTaxresidence(Integer taxResidenceId, String accessSignature, Integer userId, String country, String taxPayerId, Boolean liabilityWaiver) throws ApiException {
        ApiResponse<TaxResidenceObject> localVarResp = putTaxresidenceWithHttpInfo(taxResidenceId, accessSignature, userId, country, taxPayerId, liabilityWaiver);
        return localVarResp.getData();
    }

    /**
     * Update Tax Residence
     * Modify an existing Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param taxResidenceId The unique identifier of the TaxResidence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param userId User&#39;s id residence (optional)
     * @param country country of the resident (optional)
     * @param taxPayerId Tax payer&#39;s id (optional)
     * @param liabilityWaiver Tax declaration (optional)
     * @return ApiResponse&lt;TaxResidenceObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxResidenceObject> putTaxresidenceWithHttpInfo(Integer taxResidenceId, String accessSignature, Integer userId, String country, String taxPayerId, Boolean liabilityWaiver) throws ApiException {
        okhttp3.Call localVarCall = putTaxresidenceValidateBeforeCall(taxResidenceId, accessSignature, userId, country, taxPayerId, liabilityWaiver, null);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Tax Residence (asynchronously)
     * Modify an existing Tax Residence.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param taxResidenceId The unique identifier of the TaxResidence (required)
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param userId User&#39;s id residence (optional)
     * @param country country of the resident (optional)
     * @param taxPayerId Tax payer&#39;s id (optional)
     * @param liabilityWaiver Tax declaration (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTaxresidenceAsync(Integer taxResidenceId, String accessSignature, Integer userId, String country, String taxPayerId, Boolean liabilityWaiver, final ApiCallback<TaxResidenceObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTaxresidenceValidateBeforeCall(taxResidenceId, accessSignature, userId, country, taxPayerId, liabilityWaiver, _callback);
        Type localVarReturnType = new TypeToken<TaxResidenceObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
