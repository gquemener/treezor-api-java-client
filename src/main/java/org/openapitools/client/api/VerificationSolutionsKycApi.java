/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetCardsDefaultResponse;
import org.openapitools.client.model.PostKycliveness201Response;
import org.openapitools.client.model.PostKyclivenessRequest;
import org.openapitools.client.model.PostKycqes201Response;
import org.openapitools.client.model.PostKycqesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerificationSolutionsKycApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerificationSolutionsKycApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerificationSolutionsKycApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postKycVconf
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> Precondition Required. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKycVconfCall(Integer userId, PostKycqesRequest postKycqesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postKycqesRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/videoconference"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postKycVconfValidateBeforeCall(Integer userId, PostKycqesRequest postKycqesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postKycVconf(Async)");
        }

        return postKycVconfCall(userId, postKycqesRequest, _callback);

    }

    /**
     * Initiate Video Conference Verification
     * Start the [Video conference verification](/guide/user-verification/videoconf.html) process. 
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @return PostKycqes201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> Precondition Required. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostKycqes201Response postKycVconf(Integer userId, PostKycqesRequest postKycqesRequest) throws ApiException {
        ApiResponse<PostKycqes201Response> localVarResp = postKycVconfWithHttpInfo(userId, postKycqesRequest);
        return localVarResp.getData();
    }

    /**
     * Initiate Video Conference Verification
     * Start the [Video conference verification](/guide/user-verification/videoconf.html) process. 
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @return ApiResponse&lt;PostKycqes201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> Precondition Required. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostKycqes201Response> postKycVconfWithHttpInfo(Integer userId, PostKycqesRequest postKycqesRequest) throws ApiException {
        okhttp3.Call localVarCall = postKycVconfValidateBeforeCall(userId, postKycqesRequest, null);
        Type localVarReturnType = new TypeToken<PostKycqes201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Video Conference Verification (asynchronously)
     * Start the [Video conference verification](/guide/user-verification/videoconf.html) process. 
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> Precondition Required. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKycVconfAsync(Integer userId, PostKycqesRequest postKycqesRequest, final ApiCallback<PostKycqes201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postKycVconfValidateBeforeCall(userId, postKycqesRequest, _callback);
        Type localVarReturnType = new TypeToken<PostKycqes201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postKycliveness
     * @param userId The unique identifier of the user. (required)
     * @param postKyclivenessRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is invalid i.e missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> 428 response is returned if specified userId is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response is returned for an internal error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKyclivenessCall(Integer userId, PostKyclivenessRequest postKyclivenessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postKyclivenessRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/kycliveness"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postKyclivenessValidateBeforeCall(Integer userId, PostKyclivenessRequest postKyclivenessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postKycliveness(Async)");
        }

        return postKyclivenessCall(userId, postKyclivenessRequest, _callback);

    }

    /**
     * Initiate Live Verification
     * Start the Live Verficiation process, whether it is KYC Liveness or Certified Video. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html). 
     * @param userId The unique identifier of the user. (required)
     * @param postKyclivenessRequest  (optional)
     * @return PostKycliveness201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is invalid i.e missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> 428 response is returned if specified userId is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response is returned for an internal error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostKycliveness201Response postKycliveness(Integer userId, PostKyclivenessRequest postKyclivenessRequest) throws ApiException {
        ApiResponse<PostKycliveness201Response> localVarResp = postKyclivenessWithHttpInfo(userId, postKyclivenessRequest);
        return localVarResp.getData();
    }

    /**
     * Initiate Live Verification
     * Start the Live Verficiation process, whether it is KYC Liveness or Certified Video. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html). 
     * @param userId The unique identifier of the user. (required)
     * @param postKyclivenessRequest  (optional)
     * @return ApiResponse&lt;PostKycliveness201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is invalid i.e missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> 428 response is returned if specified userId is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response is returned for an internal error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostKycliveness201Response> postKyclivenessWithHttpInfo(Integer userId, PostKyclivenessRequest postKyclivenessRequest) throws ApiException {
        okhttp3.Call localVarCall = postKyclivenessValidateBeforeCall(userId, postKyclivenessRequest, null);
        Type localVarReturnType = new TypeToken<PostKycliveness201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Live Verification (asynchronously)
     * Start the Live Verficiation process, whether it is KYC Liveness or Certified Video. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html). 
     * @param userId The unique identifier of the user. (required)
     * @param postKyclivenessRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is invalid i.e missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> 428 response is returned if specified userId is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response is returned for an internal error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKyclivenessAsync(Integer userId, PostKyclivenessRequest postKyclivenessRequest, final ApiCallback<PostKycliveness201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postKyclivenessValidateBeforeCall(userId, postKyclivenessRequest, _callback);
        Type localVarReturnType = new TypeToken<PostKycliveness201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postKycqes
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKycqesCall(Integer userId, PostKycqesRequest postKycqesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postKycqesRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/qes"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postKycqesValidateBeforeCall(Integer userId, PostKycqesRequest postKycqesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postKycqes(Async)");
        }

        return postKycqesCall(userId, postKycqesRequest, _callback);

    }

    /**
     * Initiate QES Verification
     * Start the qualified electronic signature (QES) verification.  
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @return PostKycqes201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostKycqes201Response postKycqes(Integer userId, PostKycqesRequest postKycqesRequest) throws ApiException {
        ApiResponse<PostKycqes201Response> localVarResp = postKycqesWithHttpInfo(userId, postKycqesRequest);
        return localVarResp.getData();
    }

    /**
     * Initiate QES Verification
     * Start the qualified electronic signature (QES) verification.  
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @return ApiResponse&lt;PostKycqes201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostKycqes201Response> postKycqesWithHttpInfo(Integer userId, PostKycqesRequest postKycqesRequest) throws ApiException {
        okhttp3.Call localVarCall = postKycqesValidateBeforeCall(userId, postKycqesRequest, null);
        Type localVarReturnType = new TypeToken<PostKycqes201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate QES Verification (asynchronously)
     * Start the qualified electronic signature (QES) verification.  
     * @param userId The unique identifier of the user. (required)
     * @param postKycqesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> nternal server error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKycqesAsync(Integer userId, PostKycqesRequest postKycqesRequest, final ApiCallback<PostKycqes201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postKycqesValidateBeforeCall(userId, postKycqesRequest, _callback);
        Type localVarReturnType = new TypeToken<PostKycqes201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putKycLiveness
     * @param userId The unique identifier of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is incorrect e.g., missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 response is returned when the identification is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> 405 response is returned when the documents can not be stored in our services  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 406 response is returned when last initiated identification for userId is not in processed state.  </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> 410 response is returned when the identification no longer exists </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKycLivenessCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/kycliveness"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putKycLivenessValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putKycLiveness(Async)");
        }

        return putKycLivenessCall(userId, _callback);

    }

    /**
     * Retrieve and Upload Live Verification Result
     * Retrieve the live verification results, and make them available to Treezor. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html) 
     * @param userId The unique identifier of the user. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is incorrect e.g., missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 response is returned when the identification is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> 405 response is returned when the documents can not be stored in our services  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 406 response is returned when last initiated identification for userId is not in processed state.  </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> 410 response is returned when the identification no longer exists </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Object putKycLiveness(Integer userId) throws ApiException {
        ApiResponse<Object> localVarResp = putKycLivenessWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve and Upload Live Verification Result
     * Retrieve the live verification results, and make them available to Treezor. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html) 
     * @param userId The unique identifier of the user. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is incorrect e.g., missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 response is returned when the identification is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> 405 response is returned when the documents can not be stored in our services  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 406 response is returned when last initiated identification for userId is not in processed state.  </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> 410 response is returned when the identification no longer exists </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> putKycLivenessWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = putKycLivenessValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve and Upload Live Verification Result (asynchronously)
     * Retrieve the live verification results, and make them available to Treezor. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html) 
     * @param userId The unique identifier of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response is returned when the request is incorrect e.g., missing userId  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response is returned when the Authorization header is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response is returned when your agent is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 response is returned when the identification is not found in our services  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> 405 response is returned when the documents can not be stored in our services  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 406 response is returned when last initiated identification for userId is not in processed state.  </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> 410 response is returned when the identification no longer exists </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal server error : response is returned when the request did not respond on time  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKycLivenessAsync(Integer userId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = putKycLivenessValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
