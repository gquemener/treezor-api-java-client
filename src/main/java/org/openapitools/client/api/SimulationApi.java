/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.SimulateAcquiringPayinRequest;
import org.openapitools.client.model.SimulateCardTransactions201ResponseInner;
import org.openapitools.client.model.SimulateCardTransactionsRequest;
import org.openapitools.client.model.SimulateOperationsRequest;
import org.openapitools.client.model.SimulateSDDRRequest;
import org.openapitools.client.model.SimulateSctInstRecall201Response;
import org.openapitools.client.model.SimulateSctInstRecallRequest;
import org.openapitools.client.model.SimulateSctInstReception201Response;
import org.openapitools.client.model.SimulateSctInstReceptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SimulationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SimulationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SimulationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for simulateAcquiringPayin
     * @param simulateAcquiringPayinRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAcquiringPayinCall(SimulateAcquiringPayinRequest simulateAcquiringPayinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAcquiringPayinRequest;

        // create path and map variables
        String localVarPath = "/simulation/acquiring/payin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAcquiringPayinValidateBeforeCall(SimulateAcquiringPayinRequest simulateAcquiringPayinRequest, final ApiCallback _callback) throws ApiException {
        return simulateAcquiringPayinCall(simulateAcquiringPayinRequest, _callback);

    }

    /**
     * Simulate Acquiring Payin
     * Simulate operations resulting from the card acquisition feature.
     * @param simulateAcquiringPayinRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void simulateAcquiringPayin(SimulateAcquiringPayinRequest simulateAcquiringPayinRequest) throws ApiException {
        simulateAcquiringPayinWithHttpInfo(simulateAcquiringPayinRequest);
    }

    /**
     * Simulate Acquiring Payin
     * Simulate operations resulting from the card acquisition feature.
     * @param simulateAcquiringPayinRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulateAcquiringPayinWithHttpInfo(SimulateAcquiringPayinRequest simulateAcquiringPayinRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateAcquiringPayinValidateBeforeCall(simulateAcquiringPayinRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Simulate Acquiring Payin (asynchronously)
     * Simulate operations resulting from the card acquisition feature.
     * @param simulateAcquiringPayinRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAcquiringPayinAsync(SimulateAcquiringPayinRequest simulateAcquiringPayinRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAcquiringPayinValidateBeforeCall(simulateAcquiringPayinRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateCardTransactions
     * @param simulateCardTransactionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateCardTransactionsCall(SimulateCardTransactionsRequest simulateCardTransactionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateCardTransactionsRequest;

        // create path and map variables
        String localVarPath = "/simulation/cardtransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateCardTransactionsValidateBeforeCall(SimulateCardTransactionsRequest simulateCardTransactionsRequest, final ApiCallback _callback) throws ApiException {
        return simulateCardTransactionsCall(simulateCardTransactionsRequest, _callback);

    }

    /**
     * Simulate Card Transactions
     * Simulate Card Transactions in Sandbox environment
     * @param simulateCardTransactionsRequest  (optional)
     * @return List&lt;SimulateCardTransactions201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<SimulateCardTransactions201ResponseInner> simulateCardTransactions(SimulateCardTransactionsRequest simulateCardTransactionsRequest) throws ApiException {
        ApiResponse<List<SimulateCardTransactions201ResponseInner>> localVarResp = simulateCardTransactionsWithHttpInfo(simulateCardTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate Card Transactions
     * Simulate Card Transactions in Sandbox environment
     * @param simulateCardTransactionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;SimulateCardTransactions201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimulateCardTransactions201ResponseInner>> simulateCardTransactionsWithHttpInfo(SimulateCardTransactionsRequest simulateCardTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateCardTransactionsValidateBeforeCall(simulateCardTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<List<SimulateCardTransactions201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate Card Transactions (asynchronously)
     * Simulate Card Transactions in Sandbox environment
     * @param simulateCardTransactionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateCardTransactionsAsync(SimulateCardTransactionsRequest simulateCardTransactionsRequest, final ApiCallback<List<SimulateCardTransactions201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateCardTransactionsValidateBeforeCall(simulateCardTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SimulateCardTransactions201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateOperations
     * @param simulateOperationsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateOperationsCall(SimulateOperationsRequest simulateOperationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateOperationsRequest;

        // create path and map variables
        String localVarPath = "/simulation/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateOperationsValidateBeforeCall(SimulateOperationsRequest simulateOperationsRequest, final ApiCallback _callback) throws ApiException {
        return simulateOperationsCall(simulateOperationsRequest, _callback);

    }

    /**
     * Simulate Operations
     * Create fake operations for a given Wallet.
     * @param simulateOperationsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void simulateOperations(SimulateOperationsRequest simulateOperationsRequest) throws ApiException {
        simulateOperationsWithHttpInfo(simulateOperationsRequest);
    }

    /**
     * Simulate Operations
     * Create fake operations for a given Wallet.
     * @param simulateOperationsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulateOperationsWithHttpInfo(SimulateOperationsRequest simulateOperationsRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateOperationsValidateBeforeCall(simulateOperationsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Simulate Operations (asynchronously)
     * Create fake operations for a given Wallet.
     * @param simulateOperationsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateOperationsAsync(SimulateOperationsRequest simulateOperationsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateOperationsValidateBeforeCall(simulateOperationsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateSDDR
     * @param simulateSDDRRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSDDRCall(SimulateSDDRRequest simulateSDDRRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateSDDRRequest;

        // create path and map variables
        String localVarPath = "/simulation/payout-sddr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateSDDRValidateBeforeCall(SimulateSDDRRequest simulateSDDRRequest, final ApiCallback _callback) throws ApiException {
        return simulateSDDRCall(simulateSDDRRequest, _callback);

    }

    /**
     * Simulate SDDR Core
     * Simulate a received SEPA Direct Debit into one of your Wallet in Sandbox.
     * @param simulateSDDRRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void simulateSDDR(SimulateSDDRRequest simulateSDDRRequest) throws ApiException {
        simulateSDDRWithHttpInfo(simulateSDDRRequest);
    }

    /**
     * Simulate SDDR Core
     * Simulate a received SEPA Direct Debit into one of your Wallet in Sandbox.
     * @param simulateSDDRRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulateSDDRWithHttpInfo(SimulateSDDRRequest simulateSDDRRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateSDDRValidateBeforeCall(simulateSDDRRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Simulate SDDR Core (asynchronously)
     * Simulate a received SEPA Direct Debit into one of your Wallet in Sandbox.
     * @param simulateSDDRRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSDDRAsync(SimulateSDDRRequest simulateSDDRRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateSDDRValidateBeforeCall(simulateSDDRRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateSctInstRecall
     * @param simulateSctInstRecallRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSctInstRecallCall(SimulateSctInstRecallRequest simulateSctInstRecallRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateSctInstRecallRequest;

        // create path and map variables
        String localVarPath = "/simulation/sct-inst/recall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateSctInstRecallValidateBeforeCall(SimulateSctInstRecallRequest simulateSctInstRecallRequest, final ApiCallback _callback) throws ApiException {
        return simulateSctInstRecallCall(simulateSctInstRecallRequest, _callback);

    }

    /**
     * Simulate SCT Inst recall
     * Simulate a recall for an instantaneous SEPA Credit Transfer.
     * @param simulateSctInstRecallRequest  (optional)
     * @return SimulateSctInstRecall201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SimulateSctInstRecall201Response simulateSctInstRecall(SimulateSctInstRecallRequest simulateSctInstRecallRequest) throws ApiException {
        ApiResponse<SimulateSctInstRecall201Response> localVarResp = simulateSctInstRecallWithHttpInfo(simulateSctInstRecallRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate SCT Inst recall
     * Simulate a recall for an instantaneous SEPA Credit Transfer.
     * @param simulateSctInstRecallRequest  (optional)
     * @return ApiResponse&lt;SimulateSctInstRecall201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulateSctInstRecall201Response> simulateSctInstRecallWithHttpInfo(SimulateSctInstRecallRequest simulateSctInstRecallRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateSctInstRecallValidateBeforeCall(simulateSctInstRecallRequest, null);
        Type localVarReturnType = new TypeToken<SimulateSctInstRecall201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate SCT Inst recall (asynchronously)
     * Simulate a recall for an instantaneous SEPA Credit Transfer.
     * @param simulateSctInstRecallRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSctInstRecallAsync(SimulateSctInstRecallRequest simulateSctInstRecallRequest, final ApiCallback<SimulateSctInstRecall201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateSctInstRecallValidateBeforeCall(simulateSctInstRecallRequest, _callback);
        Type localVarReturnType = new TypeToken<SimulateSctInstRecall201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateSctInstReception
     * @param simulateSctInstReceptionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSctInstReceptionCall(SimulateSctInstReceptionRequest simulateSctInstReceptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateSctInstReceptionRequest;

        // create path and map variables
        String localVarPath = "/simulation/sct-inst/payin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateSctInstReceptionValidateBeforeCall(SimulateSctInstReceptionRequest simulateSctInstReceptionRequest, final ApiCallback _callback) throws ApiException {
        return simulateSctInstReceptionCall(simulateSctInstReceptionRequest, _callback);

    }

    /**
     * Simulate SCTR Inst
     * Simulate the reception of an instantaneous SEPA Credit Transfer into one of your Wallet in Sandbox.
     * @param simulateSctInstReceptionRequest  (optional)
     * @return SimulateSctInstReception201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SimulateSctInstReception201Response simulateSctInstReception(SimulateSctInstReceptionRequest simulateSctInstReceptionRequest) throws ApiException {
        ApiResponse<SimulateSctInstReception201Response> localVarResp = simulateSctInstReceptionWithHttpInfo(simulateSctInstReceptionRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate SCTR Inst
     * Simulate the reception of an instantaneous SEPA Credit Transfer into one of your Wallet in Sandbox.
     * @param simulateSctInstReceptionRequest  (optional)
     * @return ApiResponse&lt;SimulateSctInstReception201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulateSctInstReception201Response> simulateSctInstReceptionWithHttpInfo(SimulateSctInstReceptionRequest simulateSctInstReceptionRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateSctInstReceptionValidateBeforeCall(simulateSctInstReceptionRequest, null);
        Type localVarReturnType = new TypeToken<SimulateSctInstReception201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate SCTR Inst (asynchronously)
     * Simulate the reception of an instantaneous SEPA Credit Transfer into one of your Wallet in Sandbox.
     * @param simulateSctInstReceptionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSctInstReceptionAsync(SimulateSctInstReceptionRequest simulateSctInstReceptionRequest, final ApiCallback<SimulateSctInstReception201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateSctInstReceptionValidateBeforeCall(simulateSctInstReceptionRequest, _callback);
        Type localVarReturnType = new TypeToken<SimulateSctInstReception201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
