/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.DigitalizedCardsBadRequestInner;
import org.openapitools.client.model.DigitalizedCardsDeactivateDigitalizedCardResponse;
import org.openapitools.client.model.DigitalizedCardsGetDigitalizedCardResponse;
import org.openapitools.client.model.DigitalizedCardsInternalErrorInner;
import org.openapitools.client.model.DigitalizedCardsNotFoundInner;
import org.openapitools.client.model.DigitalizedCardsPutDigitalizedCardResponse;
import org.openapitools.client.model.DigitalizedCardsUnauthorizedErrorInner;
import org.openapitools.client.model.PutDigitalizedRequest;
import org.openapitools.client.model.TavRequestPOST200Response;
import org.openapitools.client.model.TavRequestPOSTRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DigitalizedCardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DigitalizedCardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DigitalizedCardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDigitalized
     * @param id The unique identifier of a digitalized card.  (required)
     * @param reasonCode The reason code is required only if the card is on Mastercard System. Possible values are:  | Reason code | Description | | :----: | ----------- | | L | Cardholder confirmed token device lost | | S | Cardholder confirmed token device stolen | | F | Cardholder reported token device found or not stolen | | T | Issuer or cardholder confirmed fraudulent token transactions | | C | Account closed | | D | Issuer consumer deleted | | Z | Other |  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDigitalizedCall(String id, String reasonCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/digitalizedCard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reasonCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reasonCode", reasonCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDigitalizedValidateBeforeCall(String id, String reasonCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDigitalized(Async)");
        }

        // verify the required parameter 'reasonCode' is set
        if (reasonCode == null) {
            throw new ApiException("Missing the required parameter 'reasonCode' when calling deleteDigitalized(Async)");
        }

        return deleteDigitalizedCall(id, reasonCode, _callback);

    }

    /**
     * Deactivate Payment Token
     * Deactivate a payment Token. 
     * @param id The unique identifier of a digitalized card.  (required)
     * @param reasonCode The reason code is required only if the card is on Mastercard System. Possible values are:  | Reason code | Description | | :----: | ----------- | | L | Cardholder confirmed token device lost | | S | Cardholder confirmed token device stolen | | F | Cardholder reported token device found or not stolen | | T | Issuer or cardholder confirmed fraudulent token transactions | | C | Account closed | | D | Issuer consumer deleted | | Z | Other |  (required)
     * @return DigitalizedCardsDeactivateDigitalizedCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalizedCardsDeactivateDigitalizedCardResponse deleteDigitalized(String id, String reasonCode) throws ApiException {
        ApiResponse<DigitalizedCardsDeactivateDigitalizedCardResponse> localVarResp = deleteDigitalizedWithHttpInfo(id, reasonCode);
        return localVarResp.getData();
    }

    /**
     * Deactivate Payment Token
     * Deactivate a payment Token. 
     * @param id The unique identifier of a digitalized card.  (required)
     * @param reasonCode The reason code is required only if the card is on Mastercard System. Possible values are:  | Reason code | Description | | :----: | ----------- | | L | Cardholder confirmed token device lost | | S | Cardholder confirmed token device stolen | | F | Cardholder reported token device found or not stolen | | T | Issuer or cardholder confirmed fraudulent token transactions | | C | Account closed | | D | Issuer consumer deleted | | Z | Other |  (required)
     * @return ApiResponse&lt;DigitalizedCardsDeactivateDigitalizedCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalizedCardsDeactivateDigitalizedCardResponse> deleteDigitalizedWithHttpInfo(String id, String reasonCode) throws ApiException {
        okhttp3.Call localVarCall = deleteDigitalizedValidateBeforeCall(id, reasonCode, null);
        Type localVarReturnType = new TypeToken<DigitalizedCardsDeactivateDigitalizedCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate Payment Token (asynchronously)
     * Deactivate a payment Token. 
     * @param id The unique identifier of a digitalized card.  (required)
     * @param reasonCode The reason code is required only if the card is on Mastercard System. Possible values are:  | Reason code | Description | | :----: | ----------- | | L | Cardholder confirmed token device lost | | S | Cardholder confirmed token device stolen | | F | Cardholder reported token device found or not stolen | | T | Issuer or cardholder confirmed fraudulent token transactions | | C | Account closed | | D | Issuer consumer deleted | | Z | Other |  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDigitalizedAsync(String id, String reasonCode, final ApiCallback<DigitalizedCardsDeactivateDigitalizedCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDigitalizedValidateBeforeCall(id, reasonCode, _callback);
        Type localVarReturnType = new TypeToken<DigitalizedCardsDeactivateDigitalizedCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDigitalized
     * @param cardId The unique identifier of the virtual or physical card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDigitalizedCall(String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{cardId}/digitalizedCards"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDigitalizedValidateBeforeCall(String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getDigitalized(Async)");
        }

        return getDigitalizedCall(cardId, _callback);

    }

    /**
     * Get Digitalized Cards
     * Retrieve the list of digitalized cards for a given &#x60;cardId&#x60;. 
     * @param cardId The unique identifier of the virtual or physical card. (required)
     * @return List&lt;DigitalizedCardsGetDigitalizedCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public List<DigitalizedCardsGetDigitalizedCardResponse> getDigitalized(String cardId) throws ApiException {
        ApiResponse<List<DigitalizedCardsGetDigitalizedCardResponse>> localVarResp = getDigitalizedWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Get Digitalized Cards
     * Retrieve the list of digitalized cards for a given &#x60;cardId&#x60;. 
     * @param cardId The unique identifier of the virtual or physical card. (required)
     * @return ApiResponse&lt;List&lt;DigitalizedCardsGetDigitalizedCardResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DigitalizedCardsGetDigitalizedCardResponse>> getDigitalizedWithHttpInfo(String cardId) throws ApiException {
        okhttp3.Call localVarCall = getDigitalizedValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<List<DigitalizedCardsGetDigitalizedCardResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Digitalized Cards (asynchronously)
     * Retrieve the list of digitalized cards for a given &#x60;cardId&#x60;. 
     * @param cardId The unique identifier of the virtual or physical card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDigitalizedAsync(String cardId, final ApiCallback<List<DigitalizedCardsGetDigitalizedCardResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDigitalizedValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<List<DigitalizedCardsGetDigitalizedCardResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentToken
     * @param id The unique identifier of a digitalized card.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentTokenCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/digitalizedCard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentTokenValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPaymentToken(Async)");
        }

        return getPaymentTokenCall(id, _callback);

    }

    /**
     * Get Payment Token
     * Retrieve a payment token.
     * @param id The unique identifier of a digitalized card.  (required)
     * @return DigitalizedCardsGetDigitalizedCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalizedCardsGetDigitalizedCardResponse getPaymentToken(String id) throws ApiException {
        ApiResponse<DigitalizedCardsGetDigitalizedCardResponse> localVarResp = getPaymentTokenWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Payment Token
     * Retrieve a payment token.
     * @param id The unique identifier of a digitalized card.  (required)
     * @return ApiResponse&lt;DigitalizedCardsGetDigitalizedCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalizedCardsGetDigitalizedCardResponse> getPaymentTokenWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPaymentTokenValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DigitalizedCardsGetDigitalizedCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Token (asynchronously)
     * Retrieve a payment token.
     * @param id The unique identifier of a digitalized card.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentTokenAsync(String id, final ApiCallback<DigitalizedCardsGetDigitalizedCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentTokenValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DigitalizedCardsGetDigitalizedCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDigitalized
     * @param id The unique identifier of a digitalized card.  (required)
     * @param putDigitalizedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDigitalizedCall(String id, PutDigitalizedRequest putDigitalizedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putDigitalizedRequest;

        // create path and map variables
        String localVarPath = "/v1/digitalizedCard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDigitalizedValidateBeforeCall(String id, PutDigitalizedRequest putDigitalizedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putDigitalized(Async)");
        }

        // verify the required parameter 'putDigitalizedRequest' is set
        if (putDigitalizedRequest == null) {
            throw new ApiException("Missing the required parameter 'putDigitalizedRequest' when calling putDigitalized(Async)");
        }

        return putDigitalizedCall(id, putDigitalizedRequest, _callback);

    }

    /**
     * Update Payment Token Status
     * Update the status of a payment Token. 
     * @param id The unique identifier of a digitalized card.  (required)
     * @param putDigitalizedRequest  (required)
     * @return DigitalizedCardsPutDigitalizedCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalizedCardsPutDigitalizedCardResponse putDigitalized(String id, PutDigitalizedRequest putDigitalizedRequest) throws ApiException {
        ApiResponse<DigitalizedCardsPutDigitalizedCardResponse> localVarResp = putDigitalizedWithHttpInfo(id, putDigitalizedRequest);
        return localVarResp.getData();
    }

    /**
     * Update Payment Token Status
     * Update the status of a payment Token. 
     * @param id The unique identifier of a digitalized card.  (required)
     * @param putDigitalizedRequest  (required)
     * @return ApiResponse&lt;DigitalizedCardsPutDigitalizedCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalizedCardsPutDigitalizedCardResponse> putDigitalizedWithHttpInfo(String id, PutDigitalizedRequest putDigitalizedRequest) throws ApiException {
        okhttp3.Call localVarCall = putDigitalizedValidateBeforeCall(id, putDigitalizedRequest, null);
        Type localVarReturnType = new TypeToken<DigitalizedCardsPutDigitalizedCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Payment Token Status (asynchronously)
     * Update the status of a payment Token. 
     * @param id The unique identifier of a digitalized card.  (required)
     * @param putDigitalizedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> one of input is invalid or missing, or else card is not unlock. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> user is not authorized to do this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> digitalized card does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDigitalizedAsync(String id, PutDigitalizedRequest putDigitalizedRequest, final ApiCallback<DigitalizedCardsPutDigitalizedCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDigitalizedValidateBeforeCall(id, putDigitalizedRequest, _callback);
        Type localVarReturnType = new TypeToken<DigitalizedCardsPutDigitalizedCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tavRequestPOST
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use. (optional)
     * @param accessUserIp Legacy attribute, do not use. (optional)
     * @param tavRequestPOSTRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tavRequestPOSTCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, TavRequestPOSTRequest tavRequestPOSTRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tavRequestPOSTRequest;

        // create path and map variables
        String localVarPath = "/v1/issuerInitiatedDigitizationDatas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tavRequestPOSTValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, TavRequestPOSTRequest tavRequestPOSTRequest, final ApiCallback _callback) throws ApiException {
        return tavRequestPOSTCall(accessSignature, accessTag, accessUserId, accessUserIp, tavRequestPOSTRequest, _callback);

    }

    /**
     * Request issuerInitiatedDigitizationData
     * Create a new issuerInitiatedDigitizationData request  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use. (optional)
     * @param accessUserIp Legacy attribute, do not use. (optional)
     * @param tavRequestPOSTRequest  (optional)
     * @return TavRequestPOST200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TavRequestPOST200Response tavRequestPOST(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, TavRequestPOSTRequest tavRequestPOSTRequest) throws ApiException {
        ApiResponse<TavRequestPOST200Response> localVarResp = tavRequestPOSTWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, tavRequestPOSTRequest);
        return localVarResp.getData();
    }

    /**
     * Request issuerInitiatedDigitizationData
     * Create a new issuerInitiatedDigitizationData request  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use. (optional)
     * @param accessUserIp Legacy attribute, do not use. (optional)
     * @param tavRequestPOSTRequest  (optional)
     * @return ApiResponse&lt;TavRequestPOST200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TavRequestPOST200Response> tavRequestPOSTWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, TavRequestPOSTRequest tavRequestPOSTRequest) throws ApiException {
        okhttp3.Call localVarCall = tavRequestPOSTValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, tavRequestPOSTRequest, null);
        Type localVarReturnType = new TypeToken<TavRequestPOST200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request issuerInitiatedDigitizationData (asynchronously)
     * Create a new issuerInitiatedDigitizationData request  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use. (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use. (optional)
     * @param accessUserIp Legacy attribute, do not use. (optional)
     * @param tavRequestPOSTRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tavRequestPOSTAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, TavRequestPOSTRequest tavRequestPOSTRequest, final ApiCallback<TavRequestPOST200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tavRequestPOSTValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, tavRequestPOSTRequest, _callback);
        Type localVarReturnType = new TypeToken<TavRequestPOST200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
