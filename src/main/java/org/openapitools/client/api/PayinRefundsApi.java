/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetPayinrefunds200Response;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayinRefundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayinRefundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayinRefundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPayinrefund
     * @param id The unique identifier of the payin refund. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinrefundCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payinrefunds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayinrefundValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPayinrefund(Async)");
        }

        return getPayinrefundCall(id, _callback);

    }

    /**
     * Get Payin Refund
     * Get a payin refund.
     * @param id The unique identifier of the payin refund. (required)
     * @return GetPayinrefunds200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetPayinrefunds200Response getPayinrefund(Long id) throws ApiException {
        ApiResponse<GetPayinrefunds200Response> localVarResp = getPayinrefundWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Payin Refund
     * Get a payin refund.
     * @param id The unique identifier of the payin refund. (required)
     * @return ApiResponse&lt;GetPayinrefunds200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPayinrefunds200Response> getPayinrefundWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getPayinrefundValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetPayinrefunds200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payin Refund (asynchronously)
     * Get a payin refund.
     * @param id The unique identifier of the payin refund. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinrefundAsync(Long id, final ApiCallback<GetPayinrefunds200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayinrefundValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetPayinrefunds200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayinrefunds
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param payinrefundId Payinrefund&#39;s id. (optional)
     * @param payinrefundTag Custom data. (optional)
     * @param payinrefundStatus The status of the payin refund. (optional)
     * @param walletId The unique identifier of the Wallet to refund. (optional)
     * @param payinrefundDate The date of the payin refund. Format: YYYY-MM-DD  (optional)
     * @param userId The unique identifier of the User who made the refund. (optional)
     * @param amount The amount of the refund. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints.  (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinrefundsCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payinId, Integer payinrefundId, String payinrefundTag, String payinrefundStatus, Integer walletId, OffsetDateTime payinrefundDate, Integer userId, String amount, String currency, Integer pageNumber, String cursor, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payinrefunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (payinId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinId", payinId));
        }

        if (payinrefundId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinrefundId", payinrefundId));
        }

        if (payinrefundTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinrefundTag", payinrefundTag));
        }

        if (payinrefundStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinrefundStatus", payinrefundStatus));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (payinrefundDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payinrefundDate", payinrefundDate));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayinrefundsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payinId, Integer payinrefundId, String payinrefundTag, String payinrefundStatus, Integer walletId, OffsetDateTime payinrefundDate, Integer userId, String amount, String currency, Integer pageNumber, String cursor, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        return getPayinrefundsCall(accessSignature, accessTag, accessUserId, accessUserIp, payinId, payinrefundId, payinrefundTag, payinrefundStatus, walletId, payinrefundDate, userId, amount, currency, pageNumber, cursor, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);

    }

    /**
     * Search Payin Refunds
     * Search for payin refunds. These can relate to [Acquiring](/guide/acquiring/legacy-v1.html#refunds) or [SEPA recalls](/guide/transfers/sepa-recalls.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param payinrefundId Payinrefund&#39;s id. (optional)
     * @param payinrefundTag Custom data. (optional)
     * @param payinrefundStatus The status of the payin refund. (optional)
     * @param walletId The unique identifier of the Wallet to refund. (optional)
     * @param payinrefundDate The date of the payin refund. Format: YYYY-MM-DD  (optional)
     * @param userId The unique identifier of the User who made the refund. (optional)
     * @param amount The amount of the refund. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints.  (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return GetPayinrefunds200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetPayinrefunds200Response getPayinrefunds(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payinId, Integer payinrefundId, String payinrefundTag, String payinrefundStatus, Integer walletId, OffsetDateTime payinrefundDate, Integer userId, String amount, String currency, Integer pageNumber, String cursor, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        ApiResponse<GetPayinrefunds200Response> localVarResp = getPayinrefundsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, payinId, payinrefundId, payinrefundTag, payinrefundStatus, walletId, payinrefundDate, userId, amount, currency, pageNumber, cursor, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        return localVarResp.getData();
    }

    /**
     * Search Payin Refunds
     * Search for payin refunds. These can relate to [Acquiring](/guide/acquiring/legacy-v1.html#refunds) or [SEPA recalls](/guide/transfers/sepa-recalls.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param payinrefundId Payinrefund&#39;s id. (optional)
     * @param payinrefundTag Custom data. (optional)
     * @param payinrefundStatus The status of the payin refund. (optional)
     * @param walletId The unique identifier of the Wallet to refund. (optional)
     * @param payinrefundDate The date of the payin refund. Format: YYYY-MM-DD  (optional)
     * @param userId The unique identifier of the User who made the refund. (optional)
     * @param amount The amount of the refund. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints.  (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return ApiResponse&lt;GetPayinrefunds200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPayinrefunds200Response> getPayinrefundsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payinId, Integer payinrefundId, String payinrefundTag, String payinrefundStatus, Integer walletId, OffsetDateTime payinrefundDate, Integer userId, String amount, String currency, Integer pageNumber, String cursor, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        okhttp3.Call localVarCall = getPayinrefundsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, payinId, payinrefundId, payinrefundTag, payinrefundStatus, walletId, payinrefundDate, userId, amount, currency, pageNumber, cursor, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, null);
        Type localVarReturnType = new TypeToken<GetPayinrefunds200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Payin Refunds (asynchronously)
     * Search for payin refunds. These can relate to [Acquiring](/guide/acquiring/legacy-v1.html#refunds) or [SEPA recalls](/guide/transfers/sepa-recalls.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payinId The unique identifier of the payin. (optional)
     * @param payinrefundId Payinrefund&#39;s id. (optional)
     * @param payinrefundTag Custom data. (optional)
     * @param payinrefundStatus The status of the payin refund. (optional)
     * @param walletId The unique identifier of the Wallet to refund. (optional)
     * @param payinrefundDate The date of the payin refund. Format: YYYY-MM-DD  (optional)
     * @param userId The unique identifier of the User who made the refund. (optional)
     * @param amount The amount of the refund. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints.  (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayinrefundsAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payinId, Integer payinrefundId, String payinrefundTag, String payinrefundStatus, Integer walletId, OffsetDateTime payinrefundDate, Integer userId, String amount, String currency, Integer pageNumber, String cursor, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback<GetPayinrefunds200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayinrefundsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, payinId, payinrefundId, payinrefundTag, payinrefundStatus, walletId, payinrefundDate, userId, amount, currency, pageNumber, cursor, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);
        Type localVarReturnType = new TypeToken<GetPayinrefunds200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
