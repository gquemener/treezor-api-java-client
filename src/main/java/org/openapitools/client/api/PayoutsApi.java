/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetPayouts200Response;
import org.openapitools.client.model.GetProofPayout200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostPayout200Response;
import org.openapitools.client.model.PostPayoutRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayoutsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayoutsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePayout
     * @param payoutId The unique identifier of the Payout. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayoutCall(Long payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payouts/{payoutId}"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayoutValidateBeforeCall(Long payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling deletePayout(Async)");
        }

        return deletePayoutCall(payoutId, _callback);

    }

    /**
     * Cancel Payout
     * Change payout status to &#x60;CANCELED&#x60;. A &#x60;VALIDATED&#x60; payout can&#39;t be canceled. 
     * @param payoutId The unique identifier of the Payout. (required)
     * @return PostPayout200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostPayout200Response deletePayout(Long payoutId) throws ApiException {
        ApiResponse<PostPayout200Response> localVarResp = deletePayoutWithHttpInfo(payoutId);
        return localVarResp.getData();
    }

    /**
     * Cancel Payout
     * Change payout status to &#x60;CANCELED&#x60;. A &#x60;VALIDATED&#x60; payout can&#39;t be canceled. 
     * @param payoutId The unique identifier of the Payout. (required)
     * @return ApiResponse&lt;PostPayout200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostPayout200Response> deletePayoutWithHttpInfo(Long payoutId) throws ApiException {
        okhttp3.Call localVarCall = deletePayoutValidateBeforeCall(payoutId, null);
        Type localVarReturnType = new TypeToken<PostPayout200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Payout (asynchronously)
     * Change payout status to &#x60;CANCELED&#x60;. A &#x60;VALIDATED&#x60; payout can&#39;t be canceled. 
     * @param payoutId The unique identifier of the Payout. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayoutAsync(Long payoutId, final ApiCallback<PostPayout200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayoutValidateBeforeCall(payoutId, _callback);
        Type localVarReturnType = new TypeToken<PostPayout200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayout
     * @param payoutId The unique identifier of the Payout. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayoutCall(Long payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payouts/{payoutId}"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutValidateBeforeCall(Long payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayout(Async)");
        }

        return getPayoutCall(payoutId, _callback);

    }

    /**
     * Get Payout
     * Retrieve a given Payout.
     * @param payoutId The unique identifier of the Payout. (required)
     * @return PostPayout200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostPayout200Response getPayout(Long payoutId) throws ApiException {
        ApiResponse<PostPayout200Response> localVarResp = getPayoutWithHttpInfo(payoutId);
        return localVarResp.getData();
    }

    /**
     * Get Payout
     * Retrieve a given Payout.
     * @param payoutId The unique identifier of the Payout. (required)
     * @return ApiResponse&lt;PostPayout200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostPayout200Response> getPayoutWithHttpInfo(Long payoutId) throws ApiException {
        okhttp3.Call localVarCall = getPayoutValidateBeforeCall(payoutId, null);
        Type localVarReturnType = new TypeToken<PostPayout200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payout (asynchronously)
     * Retrieve a given Payout.
     * @param payoutId The unique identifier of the Payout. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayoutAsync(Long payoutId, final ApiCallback<PostPayout200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutValidateBeforeCall(payoutId, _callback);
        Type localVarReturnType = new TypeToken<PostPayout200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayouts
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payoutId The unique identifier of the payout. (optional)
     * @param payoutTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param payoutStatus The status of the payout.  (optional)
     * @param payoutTypeId Payout type&#39;s id:  | ID | Description | |-----|-----| | 1 | Credit Transfer | | 2 | Direct Debit | | 3 | Sepa Instant Credit Transfer |  (optional)
     * @param walletId The unique identifier of the payout Wallet. (optional)
     * @param userId The unique identifier of the payout User. (optional)
     * @param payoutDate Payout execution date. Format: YYYY-MM-DD HH:MM:SS  (optional)
     * @param bankaccountId Legacy attribute, do not use. (optional)
     * @param beneficiaryId The unique identifier of the payout Beneficiary. (optional)
     * @param amount The amount of the payout. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayoutsCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payoutId, String payoutTag, String payoutStatus, Integer payoutTypeId, Integer walletId, Integer userId, OffsetDateTime payoutDate, Integer bankaccountId, Integer beneficiaryId, String amount, String currency, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (payoutId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payoutId", payoutId));
        }

        if (payoutTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payoutTag", payoutTag));
        }

        if (payoutStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payoutStatus", payoutStatus));
        }

        if (payoutTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payoutTypeId", payoutTypeId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (payoutDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payoutDate", payoutDate));
        }

        if (bankaccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bankaccountId", bankaccountId));
        }

        if (beneficiaryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beneficiaryId", beneficiaryId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (updatedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateFrom", updatedDateFrom));
        }

        if (updatedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedDateTo", updatedDateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payoutId, String payoutTag, String payoutStatus, Integer payoutTypeId, Integer walletId, Integer userId, OffsetDateTime payoutDate, Integer bankaccountId, Integer beneficiaryId, String amount, String currency, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback _callback) throws ApiException {
        return getPayoutsCall(accessSignature, accessTag, accessUserId, accessUserIp, payoutId, payoutTag, payoutStatus, payoutTypeId, walletId, userId, payoutDate, bankaccountId, beneficiaryId, amount, currency, cursor, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);

    }

    /**
     * Search Payouts
     * Retrieve Payouts that match search criteria. The request must contain at least one of the following inputs: &#x60;userId&#x60;, &#x60;walletId&#x60;. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payoutId The unique identifier of the payout. (optional)
     * @param payoutTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param payoutStatus The status of the payout.  (optional)
     * @param payoutTypeId Payout type&#39;s id:  | ID | Description | |-----|-----| | 1 | Credit Transfer | | 2 | Direct Debit | | 3 | Sepa Instant Credit Transfer |  (optional)
     * @param walletId The unique identifier of the payout Wallet. (optional)
     * @param userId The unique identifier of the payout User. (optional)
     * @param payoutDate Payout execution date. Format: YYYY-MM-DD HH:MM:SS  (optional)
     * @param bankaccountId Legacy attribute, do not use. (optional)
     * @param beneficiaryId The unique identifier of the payout Beneficiary. (optional)
     * @param amount The amount of the payout. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return GetPayouts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetPayouts200Response getPayouts(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payoutId, String payoutTag, String payoutStatus, Integer payoutTypeId, Integer walletId, Integer userId, OffsetDateTime payoutDate, Integer bankaccountId, Integer beneficiaryId, String amount, String currency, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        ApiResponse<GetPayouts200Response> localVarResp = getPayoutsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, payoutId, payoutTag, payoutStatus, payoutTypeId, walletId, userId, payoutDate, bankaccountId, beneficiaryId, amount, currency, cursor, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo);
        return localVarResp.getData();
    }

    /**
     * Search Payouts
     * Retrieve Payouts that match search criteria. The request must contain at least one of the following inputs: &#x60;userId&#x60;, &#x60;walletId&#x60;. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payoutId The unique identifier of the payout. (optional)
     * @param payoutTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param payoutStatus The status of the payout.  (optional)
     * @param payoutTypeId Payout type&#39;s id:  | ID | Description | |-----|-----| | 1 | Credit Transfer | | 2 | Direct Debit | | 3 | Sepa Instant Credit Transfer |  (optional)
     * @param walletId The unique identifier of the payout Wallet. (optional)
     * @param userId The unique identifier of the payout User. (optional)
     * @param payoutDate Payout execution date. Format: YYYY-MM-DD HH:MM:SS  (optional)
     * @param bankaccountId Legacy attribute, do not use. (optional)
     * @param beneficiaryId The unique identifier of the payout Beneficiary. (optional)
     * @param amount The amount of the payout. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return ApiResponse&lt;GetPayouts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPayouts200Response> getPayoutsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payoutId, String payoutTag, String payoutStatus, Integer payoutTypeId, Integer walletId, Integer userId, OffsetDateTime payoutDate, Integer bankaccountId, Integer beneficiaryId, String amount, String currency, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo) throws ApiException {
        okhttp3.Call localVarCall = getPayoutsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, payoutId, payoutTag, payoutStatus, payoutTypeId, walletId, userId, payoutDate, bankaccountId, beneficiaryId, amount, currency, cursor, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, null);
        Type localVarReturnType = new TypeToken<GetPayouts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Payouts (asynchronously)
     * Retrieve Payouts that match search criteria. The request must contain at least one of the following inputs: &#x60;userId&#x60;, &#x60;walletId&#x60;. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param payoutId The unique identifier of the payout. (optional)
     * @param payoutTag Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60;  (optional)
     * @param payoutStatus The status of the payout.  (optional)
     * @param payoutTypeId Payout type&#39;s id:  | ID | Description | |-----|-----| | 1 | Credit Transfer | | 2 | Direct Debit | | 3 | Sepa Instant Credit Transfer |  (optional)
     * @param walletId The unique identifier of the payout Wallet. (optional)
     * @param userId The unique identifier of the payout User. (optional)
     * @param payoutDate Payout execution date. Format: YYYY-MM-DD HH:MM:SS  (optional)
     * @param bankaccountId Legacy attribute, do not use. (optional)
     * @param beneficiaryId The unique identifier of the payout Beneficiary. (optional)
     * @param amount The amount of the payout. (optional)
     * @param currency The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateFrom The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param updatedDateTo The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayoutsAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer payoutId, String payoutTag, String payoutStatus, Integer payoutTypeId, Integer walletId, Integer userId, OffsetDateTime payoutDate, Integer bankaccountId, Integer beneficiaryId, String amount, String currency, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, OffsetDateTime updatedDateFrom, OffsetDateTime updatedDateTo, final ApiCallback<GetPayouts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, payoutId, payoutTag, payoutStatus, payoutTypeId, walletId, userId, payoutDate, bankaccountId, beneficiaryId, amount, currency, cursor, createdDateFrom, createdDateTo, updatedDateFrom, updatedDateTo, _callback);
        Type localVarReturnType = new TypeToken<GetPayouts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProofPayout
     * @param payoutId The unique identifier of the Payout. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProofPayoutCall(String payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/payouts/{payoutId}/proof"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProofPayoutValidateBeforeCall(String payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getProofPayout(Async)");
        }

        return getProofPayoutCall(payoutId, _callback);

    }

    /**
     * Create Payout Proof
     * Generate and download a proof of payout in .PDF format. See [Proof of Payout](/guide/transfers/proof-of-payout.html) for more information. 
     * @param payoutId The unique identifier of the Payout. (required)
     * @return GetProofPayout200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetProofPayout200Response getProofPayout(String payoutId) throws ApiException {
        ApiResponse<GetProofPayout200Response> localVarResp = getProofPayoutWithHttpInfo(payoutId);
        return localVarResp.getData();
    }

    /**
     * Create Payout Proof
     * Generate and download a proof of payout in .PDF format. See [Proof of Payout](/guide/transfers/proof-of-payout.html) for more information. 
     * @param payoutId The unique identifier of the Payout. (required)
     * @return ApiResponse&lt;GetProofPayout200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProofPayout200Response> getProofPayoutWithHttpInfo(String payoutId) throws ApiException {
        okhttp3.Call localVarCall = getProofPayoutValidateBeforeCall(payoutId, null);
        Type localVarReturnType = new TypeToken<GetProofPayout200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payout Proof (asynchronously)
     * Generate and download a proof of payout in .PDF format. See [Proof of Payout](/guide/transfers/proof-of-payout.html) for more information. 
     * @param payoutId The unique identifier of the Payout. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProofPayoutAsync(String payoutId, final ApiCallback<GetProofPayout200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProofPayoutValidateBeforeCall(payoutId, _callback);
        Type localVarReturnType = new TypeToken<GetProofPayout200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPayout
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayoutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPayoutCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayoutRequest postPayoutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postPayoutRequest;

        // create path and map variables
        String localVarPath = "/v1/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPayoutValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayoutRequest postPayoutRequest, final ApiCallback _callback) throws ApiException {
        return postPayoutCall(accessSignature, accessTag, accessUserId, accessUserIp, postPayoutRequest, _callback);

    }

    /**
     * Create Payout
     * Create a new payout.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayoutRequest  (optional)
     * @return PostPayout200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostPayout200Response postPayout(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayoutRequest postPayoutRequest) throws ApiException {
        ApiResponse<PostPayout200Response> localVarResp = postPayoutWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, postPayoutRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payout
     * Create a new payout.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayoutRequest  (optional)
     * @return ApiResponse&lt;PostPayout200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostPayout200Response> postPayoutWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayoutRequest postPayoutRequest) throws ApiException {
        okhttp3.Call localVarCall = postPayoutValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postPayoutRequest, null);
        Type localVarReturnType = new TypeToken<PostPayout200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payout (asynchronously)
     * Create a new payout.  This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html). 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param postPayoutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPayoutAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PostPayoutRequest postPayoutRequest, final ApiCallback<PostPayout200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPayoutValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, postPayoutRequest, _callback);
        Type localVarReturnType = new TypeToken<PostPayout200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
