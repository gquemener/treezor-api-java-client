/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCountryRestrictionGroups200Response;
import org.openapitools.client.model.GetCountryRestrictionGroupsId200Response;
import org.openapitools.client.model.PostCountryRestrictionGroup200Response;
import org.openapitools.client.model.PostCountryRestrictionGroupRequest;
import org.openapitools.client.model.PutCountryRestrictionGroups200Response;
import org.openapitools.client.model.PutCountryRestrictionGroupsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CountryRestrictionGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CountryRestrictionGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CountryRestrictionGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCountryRestrictionGroups
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCountryRestrictionGroupsCall(Long id, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countryRestrictionGroups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCountryRestrictionGroupsValidateBeforeCall(Long id, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCountryRestrictionGroups(Async)");
        }

        return deleteCountryRestrictionGroupsCall(id, fields, _callback);

    }

    /**
     * Cancel Country Restriction Group
     * Cancel a country restriction group.
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @return GetCountryRestrictionGroupsId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryRestrictionGroupsId200Response deleteCountryRestrictionGroups(Long id, List<String> fields) throws ApiException {
        ApiResponse<GetCountryRestrictionGroupsId200Response> localVarResp = deleteCountryRestrictionGroupsWithHttpInfo(id, fields);
        return localVarResp.getData();
    }

    /**
     * Cancel Country Restriction Group
     * Cancel a country restriction group.
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @return ApiResponse&lt;GetCountryRestrictionGroupsId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCountryRestrictionGroupsId200Response> deleteCountryRestrictionGroupsWithHttpInfo(Long id, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = deleteCountryRestrictionGroupsValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<GetCountryRestrictionGroupsId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Country Restriction Group (asynchronously)
     * Cancel a country restriction group.
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCountryRestrictionGroupsAsync(Long id, List<String> fields, final ApiCallback<GetCountryRestrictionGroupsId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCountryRestrictionGroupsValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<GetCountryRestrictionGroupsId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCountryRestrictionGroups
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s). Filterable fields are:   - id   - name   - isWhitelist   - status   - startDate   - createdDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax: \&quot;fieldName criterion expression\&quot;, where:   - fieldName: the name of a filterable field of this object.   - expression: the values to be included or excluded (see the table below for more information)   - criterion: a filter criterion.  Here are the possible values for criterion:  | Criteria |         Description    |                   Type                   | Expression Example | |----------|------------------------|------------------------------------------|--------------------| |     &gt;    |      greater than      |            alphanumeric string           |         100        | |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        | |     &lt;    |        less than       |            alphanumeric string           |         100        | |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        | |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        | |   like   |          like          |            alphanumeric string           |         100        | |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     | |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryRestrictionGroupsCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countryRestrictionGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryRestrictionGroupsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return getCountryRestrictionGroupsCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, pageNumber, pageCount, sortBy, sortOrder, _callback);

    }

    /**
     * Search Country Restriction Groups
     * Retrive country restriction groups that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s). Filterable fields are:   - id   - name   - isWhitelist   - status   - startDate   - createdDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax: \&quot;fieldName criterion expression\&quot;, where:   - fieldName: the name of a filterable field of this object.   - expression: the values to be included or excluded (see the table below for more information)   - criterion: a filter criterion.  Here are the possible values for criterion:  | Criteria |         Description    |                   Type                   | Expression Example | |----------|------------------------|------------------------------------------|--------------------| |     &gt;    |      greater than      |            alphanumeric string           |         100        | |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        | |     &lt;    |        less than       |            alphanumeric string           |         100        | |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        | |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        | |   like   |          like          |            alphanumeric string           |         100        | |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     | |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @return GetCountryRestrictionGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryRestrictionGroups200Response getCountryRestrictionGroups(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<GetCountryRestrictionGroups200Response> localVarResp = getCountryRestrictionGroupsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, pageNumber, pageCount, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Search Country Restriction Groups
     * Retrive country restriction groups that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s). Filterable fields are:   - id   - name   - isWhitelist   - status   - startDate   - createdDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax: \&quot;fieldName criterion expression\&quot;, where:   - fieldName: the name of a filterable field of this object.   - expression: the values to be included or excluded (see the table below for more information)   - criterion: a filter criterion.  Here are the possible values for criterion:  | Criteria |         Description    |                   Type                   | Expression Example | |----------|------------------------|------------------------------------------|--------------------| |     &gt;    |      greater than      |            alphanumeric string           |         100        | |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        | |     &lt;    |        less than       |            alphanumeric string           |         100        | |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        | |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        | |   like   |          like          |            alphanumeric string           |         100        | |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     | |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @return ApiResponse&lt;GetCountryRestrictionGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCountryRestrictionGroups200Response> getCountryRestrictionGroupsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getCountryRestrictionGroupsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, pageNumber, pageCount, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<GetCountryRestrictionGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Country Restriction Groups (asynchronously)
     * Retrive country restriction groups that match search criteria.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param filter You can filter the API response by using filter(s). Filterable fields are:   - id   - name   - isWhitelist   - status   - startDate   - createdDate  Filters should be separated by a \&quot;;\&quot;. Example for 3 filters: FILTER1;FILTER2;FILTER3.  A single filter has the following syntax: \&quot;fieldName criterion expression\&quot;, where:   - fieldName: the name of a filterable field of this object.   - expression: the values to be included or excluded (see the table below for more information)   - criterion: a filter criterion.  Here are the possible values for criterion:  | Criteria |         Description    |                   Type                   | Expression Example | |----------|------------------------|------------------------------------------|--------------------| |     &gt;    |      greater than      |            alphanumeric string           |         100        | |    &gt;&#x3D;    | greater or equal than  |            alphanumeric string           |         100        | |     &lt;    |        less than       |            alphanumeric string           |         100        | |    &lt;&#x3D;    |   less or equal than   |            alphanumeric string           |         100        | |    !&#x3D;    |      not equal to      |            alphanumeric string           |         100        | |   like   |          like          |            alphanumeric string           |         100        | |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     | |    &#x3D;&#x3D;    |         equals         |            alphanumeric string           |         100        |  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list.  (optional, default to DESC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryRestrictionGroupsAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, String filter, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, final ApiCallback<GetCountryRestrictionGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryRestrictionGroupsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, filter, pageNumber, pageCount, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<GetCountryRestrictionGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCountryRestrictionGroupsId
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryRestrictionGroupsIdCall(Long id, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countryRestrictionGroups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryRestrictionGroupsIdValidateBeforeCall(Long id, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCountryRestrictionGroupsId(Async)");
        }

        return getCountryRestrictionGroupsIdCall(id, fields, _callback);

    }

    /**
     * Get Country Restriction Group
     * Retrive a Country Restriction Group based on its &#x60;id&#x60;.
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @return GetCountryRestrictionGroupsId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryRestrictionGroupsId200Response getCountryRestrictionGroupsId(Long id, List<String> fields) throws ApiException {
        ApiResponse<GetCountryRestrictionGroupsId200Response> localVarResp = getCountryRestrictionGroupsIdWithHttpInfo(id, fields);
        return localVarResp.getData();
    }

    /**
     * Get Country Restriction Group
     * Retrive a Country Restriction Group based on its &#x60;id&#x60;.
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @return ApiResponse&lt;GetCountryRestrictionGroupsId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCountryRestrictionGroupsId200Response> getCountryRestrictionGroupsIdWithHttpInfo(Long id, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getCountryRestrictionGroupsIdValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<GetCountryRestrictionGroupsId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Country Restriction Group (asynchronously)
     * Retrive a Country Restriction Group based on its &#x60;id&#x60;.
     * @param id The unique identifier of the Country Group. (required)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryRestrictionGroupsIdAsync(Long id, List<String> fields, final ApiCallback<GetCountryRestrictionGroupsId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryRestrictionGroupsIdValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<GetCountryRestrictionGroupsId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCountryRestrictionGroup
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param postCountryRestrictionGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCountryRestrictionGroupCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, PostCountryRestrictionGroupRequest postCountryRestrictionGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCountryRestrictionGroupRequest;

        // create path and map variables
        String localVarPath = "/v1/countryRestrictionGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCountryRestrictionGroupValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, PostCountryRestrictionGroupRequest postCountryRestrictionGroupRequest, final ApiCallback _callback) throws ApiException {
        return postCountryRestrictionGroupCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, postCountryRestrictionGroupRequest, _callback);

    }

    /**
     * Create Country Restriction Group
     * Create a new country restriction group.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param postCountryRestrictionGroupRequest  (optional)
     * @return PostCountryRestrictionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostCountryRestrictionGroup200Response postCountryRestrictionGroup(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, PostCountryRestrictionGroupRequest postCountryRestrictionGroupRequest) throws ApiException {
        ApiResponse<PostCountryRestrictionGroup200Response> localVarResp = postCountryRestrictionGroupWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, fields, postCountryRestrictionGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create Country Restriction Group
     * Create a new country restriction group.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param postCountryRestrictionGroupRequest  (optional)
     * @return ApiResponse&lt;PostCountryRestrictionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostCountryRestrictionGroup200Response> postCountryRestrictionGroupWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, PostCountryRestrictionGroupRequest postCountryRestrictionGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = postCountryRestrictionGroupValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, postCountryRestrictionGroupRequest, null);
        Type localVarReturnType = new TypeToken<PostCountryRestrictionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Country Restriction Group (asynchronously)
     * Create a new country restriction group.
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param fields List of the object properties you want to pick up. (optional)
     * @param postCountryRestrictionGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCountryRestrictionGroupAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, List<String> fields, PostCountryRestrictionGroupRequest postCountryRestrictionGroupRequest, final ApiCallback<PostCountryRestrictionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCountryRestrictionGroupValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, fields, postCountryRestrictionGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<PostCountryRestrictionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCountryRestrictionGroups
     * @param id The unique identifier of the Country Group. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCountryRestrictionGroupsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCountryRestrictionGroupsCall(Integer id, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutCountryRestrictionGroupsRequest putCountryRestrictionGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putCountryRestrictionGroupsRequest;

        // create path and map variables
        String localVarPath = "/v1/countryRestrictionGroups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCountryRestrictionGroupsValidateBeforeCall(Integer id, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutCountryRestrictionGroupsRequest putCountryRestrictionGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putCountryRestrictionGroups(Async)");
        }

        return putCountryRestrictionGroupsCall(id, accessSignature, accessTag, accessUserId, accessUserIp, putCountryRestrictionGroupsRequest, _callback);

    }

    /**
     * Update Country Restriction Group
     * Edit a country restriction group.
     * @param id The unique identifier of the Country Group. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCountryRestrictionGroupsRequest  (optional)
     * @return PutCountryRestrictionGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PutCountryRestrictionGroups200Response putCountryRestrictionGroups(Integer id, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutCountryRestrictionGroupsRequest putCountryRestrictionGroupsRequest) throws ApiException {
        ApiResponse<PutCountryRestrictionGroups200Response> localVarResp = putCountryRestrictionGroupsWithHttpInfo(id, accessSignature, accessTag, accessUserId, accessUserIp, putCountryRestrictionGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Update Country Restriction Group
     * Edit a country restriction group.
     * @param id The unique identifier of the Country Group. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCountryRestrictionGroupsRequest  (optional)
     * @return ApiResponse&lt;PutCountryRestrictionGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutCountryRestrictionGroups200Response> putCountryRestrictionGroupsWithHttpInfo(Integer id, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutCountryRestrictionGroupsRequest putCountryRestrictionGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = putCountryRestrictionGroupsValidateBeforeCall(id, accessSignature, accessTag, accessUserId, accessUserIp, putCountryRestrictionGroupsRequest, null);
        Type localVarReturnType = new TypeToken<PutCountryRestrictionGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Country Restriction Group (asynchronously)
     * Edit a country restriction group.
     * @param id The unique identifier of the Country Group. (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param putCountryRestrictionGroupsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCountryRestrictionGroupsAsync(Integer id, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, PutCountryRestrictionGroupsRequest putCountryRestrictionGroupsRequest, final ApiCallback<PutCountryRestrictionGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCountryRestrictionGroupsValidateBeforeCall(id, accessSignature, accessTag, accessUserId, accessUserIp, putCountryRestrictionGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<PutCountryRestrictionGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
