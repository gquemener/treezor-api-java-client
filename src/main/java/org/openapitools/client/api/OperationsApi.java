/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetOperations200Response;
import org.openapitools.client.model.GetOperationsReport200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostOperationsReportRequest;
import org.openapitools.client.model.SimulateOperationsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOperations
     * @param cardId The unique identifier of the card. (required)
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The start of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The end of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param pageSize Number of results per page (optional, default to 15)
     * @param operationType The type of operation. Multiple values separated by a comma is authorized. May be:  &#x60;cardTransaction&#x60;, &#x60;bankTransfer&#x60;, &#x60;instantBankTransfer&#x60;, &#x60;check&#x60;, &#x60;walletTransfer&#x60;, &#x60;bankDirectDebit&#x60;, &#x60;cardTopup&#x60;, &#x60;fees&#x60;, &#x60;creditNote&#x60;, &#x60;other&#x60;  By default, Treezor returns all operation types when this field isn&#39;t defined.  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationsCall(Long cardId, Long walletId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Long pageSize, String operationType, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardId", cardId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (operationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operationType", operationType));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationsValidateBeforeCall(Long cardId, Long walletId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Long pageSize, String operationType, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getOperations(Async)");
        }

        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling getOperations(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getOperations(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getOperations(Async)");
        }

        return getOperationsCall(cardId, walletId, dateFrom, dateTo, pageSize, operationType, cursor, _callback);

    }

    /**
     * Search Operations
     * Retrieve Operations that match your search conditions. The request must specify at least: &#x60;walletId&#x60;, &#x60;dateTo&#x60;, &#x60;dateFrom&#x60;.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html) for operations that are more than 90 days old. 
     * @param cardId The unique identifier of the card. (required)
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The start of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The end of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param pageSize Number of results per page (optional, default to 15)
     * @param operationType The type of operation. Multiple values separated by a comma is authorized. May be:  &#x60;cardTransaction&#x60;, &#x60;bankTransfer&#x60;, &#x60;instantBankTransfer&#x60;, &#x60;check&#x60;, &#x60;walletTransfer&#x60;, &#x60;bankDirectDebit&#x60;, &#x60;cardTopup&#x60;, &#x60;fees&#x60;, &#x60;creditNote&#x60;, &#x60;other&#x60;  By default, Treezor returns all operation types when this field isn&#39;t defined.  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @return GetOperations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetOperations200Response getOperations(Long cardId, Long walletId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Long pageSize, String operationType, String cursor) throws ApiException {
        ApiResponse<GetOperations200Response> localVarResp = getOperationsWithHttpInfo(cardId, walletId, dateFrom, dateTo, pageSize, operationType, cursor);
        return localVarResp.getData();
    }

    /**
     * Search Operations
     * Retrieve Operations that match your search conditions. The request must specify at least: &#x60;walletId&#x60;, &#x60;dateTo&#x60;, &#x60;dateFrom&#x60;.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html) for operations that are more than 90 days old. 
     * @param cardId The unique identifier of the card. (required)
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The start of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The end of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param pageSize Number of results per page (optional, default to 15)
     * @param operationType The type of operation. Multiple values separated by a comma is authorized. May be:  &#x60;cardTransaction&#x60;, &#x60;bankTransfer&#x60;, &#x60;instantBankTransfer&#x60;, &#x60;check&#x60;, &#x60;walletTransfer&#x60;, &#x60;bankDirectDebit&#x60;, &#x60;cardTopup&#x60;, &#x60;fees&#x60;, &#x60;creditNote&#x60;, &#x60;other&#x60;  By default, Treezor returns all operation types when this field isn&#39;t defined.  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @return ApiResponse&lt;GetOperations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOperations200Response> getOperationsWithHttpInfo(Long cardId, Long walletId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Long pageSize, String operationType, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getOperationsValidateBeforeCall(cardId, walletId, dateFrom, dateTo, pageSize, operationType, cursor, null);
        Type localVarReturnType = new TypeToken<GetOperations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Operations (asynchronously)
     * Retrieve Operations that match your search conditions. The request must specify at least: &#x60;walletId&#x60;, &#x60;dateTo&#x60;, &#x60;dateFrom&#x60;.  This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html) for operations that are more than 90 days old. 
     * @param cardId The unique identifier of the card. (required)
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The start of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The end of the period to take into account operations. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param pageSize Number of results per page (optional, default to 15)
     * @param operationType The type of operation. Multiple values separated by a comma is authorized. May be:  &#x60;cardTransaction&#x60;, &#x60;bankTransfer&#x60;, &#x60;instantBankTransfer&#x60;, &#x60;check&#x60;, &#x60;walletTransfer&#x60;, &#x60;bankDirectDebit&#x60;, &#x60;cardTopup&#x60;, &#x60;fees&#x60;, &#x60;creditNote&#x60;, &#x60;other&#x60;  By default, Treezor returns all operation types when this field isn&#39;t defined.  (optional)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationsAsync(Long cardId, Long walletId, OffsetDateTime dateFrom, OffsetDateTime dateTo, Long pageSize, String operationType, String cursor, final ApiCallback<GetOperations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationsValidateBeforeCall(cardId, walletId, dateFrom, dateTo, pageSize, operationType, cursor, _callback);
        Type localVarReturnType = new TypeToken<GetOperations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOperationsReport
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The date and time from which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The date and time up to which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationsReportCall(Integer walletId, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/operations/{walletId}/report"
            .replace("{" + "walletId" + "}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationsReportValidateBeforeCall(Integer walletId, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling getOperationsReport(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getOperationsReport(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getOperationsReport(Async)");
        }

        return getOperationsReportCall(walletId, dateFrom, dateTo, _callback);

    }

    /**
     * Get Operations Report
     * Retrieve an Operations Report based on the corresponding Wallet &#x60;id&#x60;.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The date and time from which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The date and time up to which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @return GetOperationsReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetOperationsReport200Response getOperationsReport(Integer walletId, String dateFrom, String dateTo) throws ApiException {
        ApiResponse<GetOperationsReport200Response> localVarResp = getOperationsReportWithHttpInfo(walletId, dateFrom, dateTo);
        return localVarResp.getData();
    }

    /**
     * Get Operations Report
     * Retrieve an Operations Report based on the corresponding Wallet &#x60;id&#x60;.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The date and time from which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The date and time up to which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @return ApiResponse&lt;GetOperationsReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOperationsReport200Response> getOperationsReportWithHttpInfo(Integer walletId, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = getOperationsReportValidateBeforeCall(walletId, dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<GetOperationsReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Operations Report (asynchronously)
     * Retrieve an Operations Report based on the corresponding Wallet &#x60;id&#x60;.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param dateFrom The date and time from which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param dateTo The date and time up to which the operations are taken into account for the report. The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes &#x60;2024-01-11T11:25:36%2B01:00&#x60;)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationsReportAsync(Integer walletId, String dateFrom, String dateTo, final ApiCallback<GetOperationsReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationsReportValidateBeforeCall(walletId, dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<GetOperationsReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOperationsReport
     * @param walletId The unique identifier of the Wallet. (required)
     * @param postOperationsReportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOperationsReportCall(Integer walletId, PostOperationsReportRequest postOperationsReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postOperationsReportRequest;

        // create path and map variables
        String localVarPath = "/core-connect/operations/{walletId}/report"
            .replace("{" + "walletId" + "}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOperationsReportValidateBeforeCall(Integer walletId, PostOperationsReportRequest postOperationsReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling postOperationsReport(Async)");
        }

        return postOperationsReportCall(walletId, postOperationsReportRequest, _callback);

    }

    /**
     * Create Operations Report
     * Create a CSV export that includes all operations for a given Wallet on a given period.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param postOperationsReportRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void postOperationsReport(Integer walletId, PostOperationsReportRequest postOperationsReportRequest) throws ApiException {
        postOperationsReportWithHttpInfo(walletId, postOperationsReportRequest);
    }

    /**
     * Create Operations Report
     * Create a CSV export that includes all operations for a given Wallet on a given period.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param postOperationsReportRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOperationsReportWithHttpInfo(Integer walletId, PostOperationsReportRequest postOperationsReportRequest) throws ApiException {
        okhttp3.Call localVarCall = postOperationsReportValidateBeforeCall(walletId, postOperationsReportRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Operations Report (asynchronously)
     * Create a CSV export that includes all operations for a given Wallet on a given period.
     * @param walletId The unique identifier of the Wallet. (required)
     * @param postOperationsReportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOperationsReportAsync(Integer walletId, PostOperationsReportRequest postOperationsReportRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOperationsReportValidateBeforeCall(walletId, postOperationsReportRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateOperations
     * @param simulateOperationsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateOperationsCall(SimulateOperationsRequest simulateOperationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateOperationsRequest;

        // create path and map variables
        String localVarPath = "/simulation/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateOperationsValidateBeforeCall(SimulateOperationsRequest simulateOperationsRequest, final ApiCallback _callback) throws ApiException {
        return simulateOperationsCall(simulateOperationsRequest, _callback);

    }

    /**
     * Simulate Operations
     * Create fake operations for a given Wallet.
     * @param simulateOperationsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void simulateOperations(SimulateOperationsRequest simulateOperationsRequest) throws ApiException {
        simulateOperationsWithHttpInfo(simulateOperationsRequest);
    }

    /**
     * Simulate Operations
     * Create fake operations for a given Wallet.
     * @param simulateOperationsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulateOperationsWithHttpInfo(SimulateOperationsRequest simulateOperationsRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateOperationsValidateBeforeCall(simulateOperationsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Simulate Operations (asynchronously)
     * Create fake operations for a given Wallet.
     * @param simulateOperationsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateOperationsAsync(SimulateOperationsRequest simulateOperationsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateOperationsValidateBeforeCall(simulateOperationsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
