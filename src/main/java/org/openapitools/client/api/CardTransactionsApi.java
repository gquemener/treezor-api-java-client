/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetCardtransaction200Response;
import org.openapitools.client.model.GetCoCardTransactions200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ReadCardTransaction200Response;
import org.openapitools.client.model.SimulateCardTransactions201ResponseInner;
import org.openapitools.client.model.SimulateCardTransactionsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardTransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardTransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardTransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCardtransaction
     * @param cardtransactionId The unique identifier of the Card Transaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardtransactionCall(Long cardtransactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cardtransactions/{cardtransactionId}"
            .replace("{" + "cardtransactionId" + "}", localVarApiClient.escapeString(cardtransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardtransactionValidateBeforeCall(Long cardtransactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardtransactionId' is set
        if (cardtransactionId == null) {
            throw new ApiException("Missing the required parameter 'cardtransactionId' when calling getCardtransaction(Async)");
        }

        return getCardtransactionCall(cardtransactionId, _callback);

    }

    /**
     * Get Card Transaction
     * Retrieve a Card Transaction based on its &#x60;id&#x60;.
     * @param cardtransactionId The unique identifier of the Card Transaction. (required)
     * @return GetCardtransaction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCardtransaction200Response getCardtransaction(Long cardtransactionId) throws ApiException {
        ApiResponse<GetCardtransaction200Response> localVarResp = getCardtransactionWithHttpInfo(cardtransactionId);
        return localVarResp.getData();
    }

    /**
     * Get Card Transaction
     * Retrieve a Card Transaction based on its &#x60;id&#x60;.
     * @param cardtransactionId The unique identifier of the Card Transaction. (required)
     * @return ApiResponse&lt;GetCardtransaction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCardtransaction200Response> getCardtransactionWithHttpInfo(Long cardtransactionId) throws ApiException {
        okhttp3.Call localVarCall = getCardtransactionValidateBeforeCall(cardtransactionId, null);
        Type localVarReturnType = new TypeToken<GetCardtransaction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Card Transaction (asynchronously)
     * Retrieve a Card Transaction based on its &#x60;id&#x60;.
     * @param cardtransactionId The unique identifier of the Card Transaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardtransactionAsync(Long cardtransactionId, final ApiCallback<GetCardtransaction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardtransactionValidateBeforeCall(cardtransactionId, _callback);
        Type localVarReturnType = new TypeToken<GetCardtransaction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoCardTransaction
     * @param cardId The unique identifier of the card. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @param amountFrom The minimum amount of the transactions to be taken into account. (optional)
     * @param amountTo The maximum amount of the transactions to be taken into account. (optional)
     * @param paymentStatus  (optional)
     * @param paymentType  (optional)
     * @param merchantId The unique identifier of the merchant. See [Merchant Identification Number (MID)](/guide/overview/glossary.html#merchant-identification-number-mid).  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCoCardTransactionCall(String cardId, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, BigDecimal amountFrom, BigDecimal amountTo, List<String> paymentStatus, List<String> paymentType, String merchantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/cardtransactions/{cardId}"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (amountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amountFrom", amountFrom));
        }

        if (amountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amountTo", amountTo));
        }

        if (paymentStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "paymentStatus", paymentStatus));
        }

        if (paymentType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "paymentType", paymentType));
        }

        if (merchantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantId", merchantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoCardTransactionValidateBeforeCall(String cardId, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, BigDecimal amountFrom, BigDecimal amountTo, List<String> paymentStatus, List<String> paymentType, String merchantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCoCardTransaction(Async)");
        }

        return getCoCardTransactionCall(cardId, cursor, createdDateFrom, createdDateTo, amountFrom, amountTo, paymentStatus, paymentType, merchantId, _callback);

    }

    /**
     * Get Card Transactions
     * Retrieve the Card Transactions for a specific card. This request is preferred for a dashboard-oriented usage. You shouldn&#39;t expose this endpoint to your end users.
     * @param cardId The unique identifier of the card. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @param amountFrom The minimum amount of the transactions to be taken into account. (optional)
     * @param amountTo The maximum amount of the transactions to be taken into account. (optional)
     * @param paymentStatus  (optional)
     * @param paymentType  (optional)
     * @param merchantId The unique identifier of the merchant. See [Merchant Identification Number (MID)](/guide/overview/glossary.html#merchant-identification-number-mid).  (optional)
     * @return GetCoCardTransactions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCoCardTransactions200Response getCoCardTransaction(String cardId, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, BigDecimal amountFrom, BigDecimal amountTo, List<String> paymentStatus, List<String> paymentType, String merchantId) throws ApiException {
        ApiResponse<GetCoCardTransactions200Response> localVarResp = getCoCardTransactionWithHttpInfo(cardId, cursor, createdDateFrom, createdDateTo, amountFrom, amountTo, paymentStatus, paymentType, merchantId);
        return localVarResp.getData();
    }

    /**
     * Get Card Transactions
     * Retrieve the Card Transactions for a specific card. This request is preferred for a dashboard-oriented usage. You shouldn&#39;t expose this endpoint to your end users.
     * @param cardId The unique identifier of the card. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @param amountFrom The minimum amount of the transactions to be taken into account. (optional)
     * @param amountTo The maximum amount of the transactions to be taken into account. (optional)
     * @param paymentStatus  (optional)
     * @param paymentType  (optional)
     * @param merchantId The unique identifier of the merchant. See [Merchant Identification Number (MID)](/guide/overview/glossary.html#merchant-identification-number-mid).  (optional)
     * @return ApiResponse&lt;GetCoCardTransactions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCoCardTransactions200Response> getCoCardTransactionWithHttpInfo(String cardId, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, BigDecimal amountFrom, BigDecimal amountTo, List<String> paymentStatus, List<String> paymentType, String merchantId) throws ApiException {
        okhttp3.Call localVarCall = getCoCardTransactionValidateBeforeCall(cardId, cursor, createdDateFrom, createdDateTo, amountFrom, amountTo, paymentStatus, paymentType, merchantId, null);
        Type localVarReturnType = new TypeToken<GetCoCardTransactions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Card Transactions (asynchronously)
     * Retrieve the Card Transactions for a specific card. This request is preferred for a dashboard-oriented usage. You shouldn&#39;t expose this endpoint to your end users.
     * @param cardId The unique identifier of the card. (required)
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @param amountFrom The minimum amount of the transactions to be taken into account. (optional)
     * @param amountTo The maximum amount of the transactions to be taken into account. (optional)
     * @param paymentStatus  (optional)
     * @param paymentType  (optional)
     * @param merchantId The unique identifier of the merchant. See [Merchant Identification Number (MID)](/guide/overview/glossary.html#merchant-identification-number-mid).  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCoCardTransactionAsync(String cardId, String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, BigDecimal amountFrom, BigDecimal amountTo, List<String> paymentStatus, List<String> paymentType, String merchantId, final ApiCallback<GetCoCardTransactions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCoCardTransactionValidateBeforeCall(cardId, cursor, createdDateFrom, createdDateTo, amountFrom, amountTo, paymentStatus, paymentType, merchantId, _callback);
        Type localVarReturnType = new TypeToken<GetCoCardTransactions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoCardTransactions
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCoCardTransactionsCall(String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core-connect/cardtransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoCardTransactionsValidateBeforeCall(String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, final ApiCallback _callback) throws ApiException {
        return getCoCardTransactionsCall(cursor, createdDateFrom, createdDateTo, _callback);

    }

    /**
     * Get all Card Transactions
     * Retrieve all the Card Transactions. This is the preferred request for a dashboard-oriented approach. You shouldn&#39;t expose this endpoint to your end users.
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @return GetCoCardTransactions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetCoCardTransactions200Response getCoCardTransactions(String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo) throws ApiException {
        ApiResponse<GetCoCardTransactions200Response> localVarResp = getCoCardTransactionsWithHttpInfo(cursor, createdDateFrom, createdDateTo);
        return localVarResp.getData();
    }

    /**
     * Get all Card Transactions
     * Retrieve all the Card Transactions. This is the preferred request for a dashboard-oriented approach. You shouldn&#39;t expose this endpoint to your end users.
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @return ApiResponse&lt;GetCoCardTransactions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCoCardTransactions200Response> getCoCardTransactionsWithHttpInfo(String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo) throws ApiException {
        okhttp3.Call localVarCall = getCoCardTransactionsValidateBeforeCall(cursor, createdDateFrom, createdDateTo, null);
        Type localVarReturnType = new TypeToken<GetCoCardTransactions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Card Transactions (asynchronously)
     * Retrieve all the Card Transactions. This is the preferred request for a dashboard-oriented approach. You shouldn&#39;t expose this endpoint to your end users.
     * @param cursor Pagination cursor, if you don&#39;t pass a cursor, result will start at the first page. (optional)
     * @param createdDateFrom The date and time from which the transactions are taken into account. (optional)
     * @param createdDateTo The date and time up to which the transactions are taken into account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCoCardTransactionsAsync(String cursor, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, final ApiCallback<GetCoCardTransactions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCoCardTransactionsValidateBeforeCall(cursor, createdDateFrom, createdDateTo, _callback);
        Type localVarReturnType = new TypeToken<GetCoCardTransactions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readCardTransaction
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardtransactionId The unique identifier of the Card Transaction. (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param walletId The unique identifier of the Wallet the card is attached to. (optional)
     * @param merchantId The Merchant&#39;s Id. (optional)
     * @param publicToken The public token of the Card. (optional)
     * @param paymentId The identifier of the payment. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readCardTransactionCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardtransactionId, Integer cardId, Integer walletId, String merchantId, String publicToken, Integer paymentId, Integer pageNumber, Integer pageCount, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cardtransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (cardtransactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardtransactionId", cardtransactionId));
        }

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardId", cardId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (merchantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantId", merchantId));
        }

        if (publicToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicToken", publicToken));
        }

        if (paymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentId", paymentId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readCardTransactionValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardtransactionId, Integer cardId, Integer walletId, String merchantId, String publicToken, Integer paymentId, Integer pageNumber, Integer pageCount, String sortBy, final ApiCallback _callback) throws ApiException {
        return readCardTransactionCall(accessSignature, accessTag, accessUserId, accessUserIp, cardtransactionId, cardId, walletId, merchantId, publicToken, paymentId, pageNumber, pageCount, sortBy, _callback);

    }

    /**
     * Search Card Transactions
     * Retrieve Card Transactions based at least on one of the following intputs: &#x60;cardId&#x60;, &#x60;paymentId&#x60;, &#x60;publicToken&#x60;, &#x60;walletId&#x60;. This is the preferred request for end-user-oriented usage. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardtransactionId The unique identifier of the Card Transaction. (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param walletId The unique identifier of the Wallet the card is attached to. (optional)
     * @param merchantId The Merchant&#39;s Id. (optional)
     * @param publicToken The public token of the Card. (optional)
     * @param paymentId The identifier of the payment. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @return ReadCardTransaction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReadCardTransaction200Response readCardTransaction(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardtransactionId, Integer cardId, Integer walletId, String merchantId, String publicToken, Integer paymentId, Integer pageNumber, Integer pageCount, String sortBy) throws ApiException {
        ApiResponse<ReadCardTransaction200Response> localVarResp = readCardTransactionWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, cardtransactionId, cardId, walletId, merchantId, publicToken, paymentId, pageNumber, pageCount, sortBy);
        return localVarResp.getData();
    }

    /**
     * Search Card Transactions
     * Retrieve Card Transactions based at least on one of the following intputs: &#x60;cardId&#x60;, &#x60;paymentId&#x60;, &#x60;publicToken&#x60;, &#x60;walletId&#x60;. This is the preferred request for end-user-oriented usage. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardtransactionId The unique identifier of the Card Transaction. (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param walletId The unique identifier of the Wallet the card is attached to. (optional)
     * @param merchantId The Merchant&#39;s Id. (optional)
     * @param publicToken The public token of the Card. (optional)
     * @param paymentId The identifier of the payment. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @return ApiResponse&lt;ReadCardTransaction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadCardTransaction200Response> readCardTransactionWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardtransactionId, Integer cardId, Integer walletId, String merchantId, String publicToken, Integer paymentId, Integer pageNumber, Integer pageCount, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = readCardTransactionValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, cardtransactionId, cardId, walletId, merchantId, publicToken, paymentId, pageNumber, pageCount, sortBy, null);
        Type localVarReturnType = new TypeToken<ReadCardTransaction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Card Transactions (asynchronously)
     * Retrieve Card Transactions based at least on one of the following intputs: &#x60;cardId&#x60;, &#x60;paymentId&#x60;, &#x60;publicToken&#x60;, &#x60;walletId&#x60;. This is the preferred request for end-user-oriented usage. 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param cardtransactionId The unique identifier of the Card Transaction. (optional)
     * @param cardId The unique identifier of the Card. (optional)
     * @param walletId The unique identifier of the Wallet the card is attached to. (optional)
     * @param merchantId The Merchant&#39;s Id. (optional)
     * @param publicToken The public token of the Card. (optional)
     * @param paymentId The identifier of the payment. (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with. Default value: _createdDate_.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readCardTransactionAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer cardtransactionId, Integer cardId, Integer walletId, String merchantId, String publicToken, Integer paymentId, Integer pageNumber, Integer pageCount, String sortBy, final ApiCallback<ReadCardTransaction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = readCardTransactionValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, cardtransactionId, cardId, walletId, merchantId, publicToken, paymentId, pageNumber, pageCount, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ReadCardTransaction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateCardTransactions
     * @param simulateCardTransactionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateCardTransactionsCall(SimulateCardTransactionsRequest simulateCardTransactionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateCardTransactionsRequest;

        // create path and map variables
        String localVarPath = "/simulation/cardtransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateCardTransactionsValidateBeforeCall(SimulateCardTransactionsRequest simulateCardTransactionsRequest, final ApiCallback _callback) throws ApiException {
        return simulateCardTransactionsCall(simulateCardTransactionsRequest, _callback);

    }

    /**
     * Simulate Card Transactions
     * Simulate Card Transactions in Sandbox environment
     * @param simulateCardTransactionsRequest  (optional)
     * @return List&lt;SimulateCardTransactions201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<SimulateCardTransactions201ResponseInner> simulateCardTransactions(SimulateCardTransactionsRequest simulateCardTransactionsRequest) throws ApiException {
        ApiResponse<List<SimulateCardTransactions201ResponseInner>> localVarResp = simulateCardTransactionsWithHttpInfo(simulateCardTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate Card Transactions
     * Simulate Card Transactions in Sandbox environment
     * @param simulateCardTransactionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;SimulateCardTransactions201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimulateCardTransactions201ResponseInner>> simulateCardTransactionsWithHttpInfo(SimulateCardTransactionsRequest simulateCardTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateCardTransactionsValidateBeforeCall(simulateCardTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<List<SimulateCardTransactions201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate Card Transactions (asynchronously)
     * Simulate Card Transactions in Sandbox environment
     * @param simulateCardTransactionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateCardTransactionsAsync(SimulateCardTransactionsRequest simulateCardTransactionsRequest, final ApiCallback<List<SimulateCardTransactions201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateCardTransactionsValidateBeforeCall(simulateCardTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SimulateCardTransactions201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
