/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetRecallRs200Response;
import org.openapitools.client.model.GetRecallSctInst200Response;
import org.openapitools.client.model.GetRecallSctInst404Response;
import org.openapitools.client.model.PutRecallRRequest;
import org.openapitools.client.model.PutRecallSctInst201Response;
import org.openapitools.client.model.PutRecallSctInst409Response;
import org.openapitools.client.model.PutRecallSctInstRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecallsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecallsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRecallR
     * @param recallId The unique identifier of the recall.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecallRCall(String recallId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/recallRs/{recallId}"
            .replace("{" + "recallId" + "}", localVarApiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecallRValidateBeforeCall(String recallId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling getRecallR(Async)");
        }

        return getRecallRCall(recallId, accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, _callback);

    }

    /**
     * Get Recall or RRO
     * Retrieve a given recall or RRO.
     * @param recallId The unique identifier of the recall.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @return GetRecallRs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetRecallRs200Response getRecallR(String recallId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber) throws ApiException {
        ApiResponse<GetRecallRs200Response> localVarResp = getRecallRWithHttpInfo(recallId, accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber);
        return localVarResp.getData();
    }

    /**
     * Get Recall or RRO
     * Retrieve a given recall or RRO.
     * @param recallId The unique identifier of the recall.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @return ApiResponse&lt;GetRecallRs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecallRs200Response> getRecallRWithHttpInfo(String recallId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getRecallRValidateBeforeCall(recallId, accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, null);
        Type localVarReturnType = new TypeToken<GetRecallRs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recall or RRO (asynchronously)
     * Retrieve a given recall or RRO.
     * @param recallId The unique identifier of the recall.  (required)
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecallRAsync(String recallId, String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, final ApiCallback<GetRecallRs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecallRValidateBeforeCall(recallId, accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<GetRecallRs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecallRs
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @param filter List of available filters: - id - recallRSepaMessageId - cxlId - statusId - reasonCode - clientId - userId - walletId - sctrId - receivedDate - frozenWalletFollowingRecallr - createdDate - inError  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecallRsCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/recallRs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecallRsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, String filter, final ApiCallback _callback) throws ApiException {
        return getRecallRsCall(accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, filter, _callback);

    }

    /**
     * Get Recalls or RRO
     * Retrieve recalls or RROs
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @param filter List of available filters: - id - recallRSepaMessageId - cxlId - statusId - reasonCode - clientId - userId - walletId - sctrId - receivedDate - frozenWalletFollowingRecallr - createdDate - inError  (optional)
     * @return GetRecallRs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetRecallRs200Response getRecallRs(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, String filter) throws ApiException {
        ApiResponse<GetRecallRs200Response> localVarResp = getRecallRsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, filter);
        return localVarResp.getData();
    }

    /**
     * Get Recalls or RRO
     * Retrieve recalls or RROs
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @param filter List of available filters: - id - recallRSepaMessageId - cxlId - statusId - reasonCode - clientId - userId - walletId - sctrId - receivedDate - frozenWalletFollowingRecallr - createdDate - inError  (optional)
     * @return ApiResponse&lt;GetRecallRs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecallRs200Response> getRecallRsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, String filter) throws ApiException {
        okhttp3.Call localVarCall = getRecallRsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, filter, null);
        Type localVarReturnType = new TypeToken<GetRecallRs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recalls or RRO (asynchronously)
     * Retrieve recalls or RROs
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints  (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints  (optional)
     * @param filter List of available filters: - id - recallRSepaMessageId - cxlId - statusId - reasonCode - clientId - userId - walletId - sctrId - receivedDate - frozenWalletFollowingRecallr - createdDate - inError  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecallRsAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer pageCount, Integer pageNumber, String filter, final ApiCallback<GetRecallRs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecallRsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, pageCount, pageNumber, filter, _callback);
        Type localVarReturnType = new TypeToken<GetRecallRs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecallSctInst
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecallSctInstCall(String sctInstId, String recallId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/recall-sct-inst/{sctInstId}/{recallId}"
            .replace("{" + "sctInstId" + "}", localVarApiClient.escapeString(sctInstId.toString()))
            .replace("{" + "recallId" + "}", localVarApiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecallSctInstValidateBeforeCall(String sctInstId, String recallId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sctInstId' is set
        if (sctInstId == null) {
            throw new ApiException("Missing the required parameter 'sctInstId' when calling getRecallSctInst(Async)");
        }

        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling getRecallSctInst(Async)");
        }

        return getRecallSctInstCall(sctInstId, recallId, _callback);

    }

    /**
     * Get SCT Inst Recall
     * Retrieve an SCT Inst Recall.
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @return GetRecallSctInst200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetRecallSctInst200Response getRecallSctInst(String sctInstId, String recallId) throws ApiException {
        ApiResponse<GetRecallSctInst200Response> localVarResp = getRecallSctInstWithHttpInfo(sctInstId, recallId);
        return localVarResp.getData();
    }

    /**
     * Get SCT Inst Recall
     * Retrieve an SCT Inst Recall.
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @return ApiResponse&lt;GetRecallSctInst200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecallSctInst200Response> getRecallSctInstWithHttpInfo(String sctInstId, String recallId) throws ApiException {
        okhttp3.Call localVarCall = getRecallSctInstValidateBeforeCall(sctInstId, recallId, null);
        Type localVarReturnType = new TypeToken<GetRecallSctInst200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SCT Inst Recall (asynchronously)
     * Retrieve an SCT Inst Recall.
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecallSctInstAsync(String sctInstId, String recallId, final ApiCallback<GetRecallSctInst200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecallSctInstValidateBeforeCall(sctInstId, recallId, _callback);
        Type localVarReturnType = new TypeToken<GetRecallSctInst200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRecallR
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallRRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRecallRCall(Long recallId, PutRecallRRequest putRecallRRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRecallRRequest;

        // create path and map variables
        String localVarPath = "/v1/recallRs/{recallId}/response"
            .replace("{" + "recallId" + "}", localVarApiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRecallRValidateBeforeCall(Long recallId, PutRecallRRequest putRecallRRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling putRecallR(Async)");
        }

        return putRecallRCall(recallId, putRecallRRequest, _callback);

    }

    /**
     * Respond to Recall or RRO
     * Respond to a Recall or a RRO.
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallRRequest  (optional)
     * @return GetRecallRs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetRecallRs200Response putRecallR(Long recallId, PutRecallRRequest putRecallRRequest) throws ApiException {
        ApiResponse<GetRecallRs200Response> localVarResp = putRecallRWithHttpInfo(recallId, putRecallRRequest);
        return localVarResp.getData();
    }

    /**
     * Respond to Recall or RRO
     * Respond to a Recall or a RRO.
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallRRequest  (optional)
     * @return ApiResponse&lt;GetRecallRs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecallRs200Response> putRecallRWithHttpInfo(Long recallId, PutRecallRRequest putRecallRRequest) throws ApiException {
        okhttp3.Call localVarCall = putRecallRValidateBeforeCall(recallId, putRecallRRequest, null);
        Type localVarReturnType = new TypeToken<GetRecallRs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Respond to Recall or RRO (asynchronously)
     * Respond to a Recall or a RRO.
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallRRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRecallRAsync(Long recallId, PutRecallRRequest putRecallRRequest, final ApiCallback<GetRecallRs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRecallRValidateBeforeCall(recallId, putRecallRRequest, _callback);
        Type localVarReturnType = new TypeToken<GetRecallRs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRecallSctInst
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallSctInstRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRecallSctInstCall(String sctInstId, String recallId, PutRecallSctInstRequest putRecallSctInstRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRecallSctInstRequest;

        // create path and map variables
        String localVarPath = "/v1/recall-sct-inst/{sctInstId}/{recallId}/response"
            .replace("{" + "sctInstId" + "}", localVarApiClient.escapeString(sctInstId.toString()))
            .replace("{" + "recallId" + "}", localVarApiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRecallSctInstValidateBeforeCall(String sctInstId, String recallId, PutRecallSctInstRequest putRecallSctInstRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sctInstId' is set
        if (sctInstId == null) {
            throw new ApiException("Missing the required parameter 'sctInstId' when calling putRecallSctInst(Async)");
        }

        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling putRecallSctInst(Async)");
        }

        return putRecallSctInstCall(sctInstId, recallId, putRecallSctInstRequest, _callback);

    }

    /**
     * Respond to SCT Inst Recall
     * Provide your decision following an SCT Inst Recall.
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallSctInstRequest  (optional)
     * @return PutRecallSctInst201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PutRecallSctInst201Response putRecallSctInst(String sctInstId, String recallId, PutRecallSctInstRequest putRecallSctInstRequest) throws ApiException {
        ApiResponse<PutRecallSctInst201Response> localVarResp = putRecallSctInstWithHttpInfo(sctInstId, recallId, putRecallSctInstRequest);
        return localVarResp.getData();
    }

    /**
     * Respond to SCT Inst Recall
     * Provide your decision following an SCT Inst Recall.
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallSctInstRequest  (optional)
     * @return ApiResponse&lt;PutRecallSctInst201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutRecallSctInst201Response> putRecallSctInstWithHttpInfo(String sctInstId, String recallId, PutRecallSctInstRequest putRecallSctInstRequest) throws ApiException {
        okhttp3.Call localVarCall = putRecallSctInstValidateBeforeCall(sctInstId, recallId, putRecallSctInstRequest, null);
        Type localVarReturnType = new TypeToken<PutRecallSctInst201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Respond to SCT Inst Recall (asynchronously)
     * Provide your decision following an SCT Inst Recall.
     * @param sctInstId The unique identifier of the initial SCT Inst. (required)
     * @param recallId The unique identifier of the recall. (required)
     * @param putRecallSctInstRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRecallSctInstAsync(String sctInstId, String recallId, PutRecallSctInstRequest putRecallSctInstRequest, final ApiCallback<PutRecallSctInst201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRecallSctInstValidateBeforeCall(sctInstId, recallId, putRecallSctInstRequest, _callback);
        Type localVarReturnType = new TypeToken<PutRecallSctInst201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
