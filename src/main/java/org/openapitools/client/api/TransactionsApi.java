/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetTransactions200Response;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTransaction
     * @param transactionId The unique identifier of the Transaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCall(Long transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transactions/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionValidateBeforeCall(Long transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransaction(Async)");
        }

        return getTransactionCall(transactionId, _callback);

    }

    /**
     * Get Transaction
     * Retrieve a transaction.
     * @param transactionId The unique identifier of the Transaction. (required)
     * @return GetTransactions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactions200Response getTransaction(Long transactionId) throws ApiException {
        ApiResponse<GetTransactions200Response> localVarResp = getTransactionWithHttpInfo(transactionId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction
     * Retrieve a transaction.
     * @param transactionId The unique identifier of the Transaction. (required)
     * @return ApiResponse&lt;GetTransactions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactions200Response> getTransactionWithHttpInfo(Long transactionId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionId, null);
        Type localVarReturnType = new TypeToken<GetTransactions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction (asynchronously)
     * Retrieve a transaction.
     * @param transactionId The unique identifier of the Transaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionAsync(Long transactionId, final ApiCallback<GetTransactions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(transactionId, _callback);
        Type localVarReturnType = new TypeToken<GetTransactions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactions
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param transactionId The unique identifier of the transaction. (optional)
     * @param transactionType Names of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param transactionTypeId The Id of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param walletId Unique identifier of the transactions Wallet. (optional)
     * @param userId Unique identifier of the transactions User. (optional)
     * @param name The name of the transaction. (optional)
     * @param description The description of the transaction. (optional)
     * @param amount The amount of the transaction. (optional)
     * @param currency The currency of the transaction amount currency. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param valueDate The value date of the transaction (date applied for the payment).  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param executionDate Date of the execution of the transaction.  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer transactionId, String transactionType, Integer transactionTypeId, Integer walletId, Integer userId, String name, String description, String amount, String currency, OffsetDateTime valueDate, OffsetDateTime executionDate, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessSignature", accessSignature));
        }

        if (accessTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessTag", accessTag));
        }

        if (accessUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserId", accessUserId));
        }

        if (accessUserIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessUserIp", accessUserIp));
        }

        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionType", transactionType));
        }

        if (transactionTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionTypeId", transactionTypeId));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (valueDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valueDate", valueDate));
        }

        if (executionDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("executionDate", executionDate));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsValidateBeforeCall(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer transactionId, String transactionType, Integer transactionTypeId, Integer walletId, Integer userId, String name, String description, String amount, String currency, OffsetDateTime valueDate, OffsetDateTime executionDate, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, final ApiCallback _callback) throws ApiException {
        return getTransactionsCall(accessSignature, accessTag, accessUserId, accessUserIp, transactionId, transactionType, transactionTypeId, walletId, userId, name, description, amount, currency, valueDate, executionDate, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, _callback);

    }

    /**
     * Search Transactions
     * Retrieve Transactions that match search criteria. The request must contain at least one of the following inputs: &#x60;walletId&#x60;, &#x60;transactionId&#x60;, &#x60;executionDate&#x60;, &#x60;valueDate&#x60; 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param transactionId The unique identifier of the transaction. (optional)
     * @param transactionType Names of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param transactionTypeId The Id of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param walletId Unique identifier of the transactions Wallet. (optional)
     * @param userId Unique identifier of the transactions User. (optional)
     * @param name The name of the transaction. (optional)
     * @param description The description of the transaction. (optional)
     * @param amount The amount of the transaction. (optional)
     * @param currency The currency of the transaction amount currency. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param valueDate The value date of the transaction (date applied for the payment).  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param executionDate Date of the execution of the transaction.  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return GetTransactions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactions200Response getTransactions(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer transactionId, String transactionType, Integer transactionTypeId, Integer walletId, Integer userId, String name, String description, String amount, String currency, OffsetDateTime valueDate, OffsetDateTime executionDate, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo) throws ApiException {
        ApiResponse<GetTransactions200Response> localVarResp = getTransactionsWithHttpInfo(accessSignature, accessTag, accessUserId, accessUserIp, transactionId, transactionType, transactionTypeId, walletId, userId, name, description, amount, currency, valueDate, executionDate, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo);
        return localVarResp.getData();
    }

    /**
     * Search Transactions
     * Retrieve Transactions that match search criteria. The request must contain at least one of the following inputs: &#x60;walletId&#x60;, &#x60;transactionId&#x60;, &#x60;executionDate&#x60;, &#x60;valueDate&#x60; 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param transactionId The unique identifier of the transaction. (optional)
     * @param transactionType Names of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param transactionTypeId The Id of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param walletId Unique identifier of the transactions Wallet. (optional)
     * @param userId Unique identifier of the transactions User. (optional)
     * @param name The name of the transaction. (optional)
     * @param description The description of the transaction. (optional)
     * @param amount The amount of the transaction. (optional)
     * @param currency The currency of the transaction amount currency. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param valueDate The value date of the transaction (date applied for the payment).  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param executionDate Date of the execution of the transaction.  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @return ApiResponse&lt;GetTransactions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactions200Response> getTransactionsWithHttpInfo(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer transactionId, String transactionType, Integer transactionTypeId, Integer walletId, Integer userId, String name, String description, String amount, String currency, OffsetDateTime valueDate, OffsetDateTime executionDate, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, transactionId, transactionType, transactionTypeId, walletId, userId, name, description, amount, currency, valueDate, executionDate, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, null);
        Type localVarReturnType = new TypeToken<GetTransactions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Transactions (asynchronously)
     * Retrieve Transactions that match search criteria. The request must contain at least one of the following inputs: &#x60;walletId&#x60;, &#x60;transactionId&#x60;, &#x60;executionDate&#x60;, &#x60;valueDate&#x60; 
     * @param accessSignature Legacy attribute, do not use.  (optional)
     * @param accessTag A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.  (optional)
     * @param accessUserId Legacy attribute, do not use.  (optional)
     * @param accessUserIp Legacy attribute, do not use.  (optional)
     * @param transactionId The unique identifier of the transaction. (optional)
     * @param transactionType Names of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param transactionTypeId The Id of the transaction types. Please refer to the [Transactions](/guide/wallets/transactions#transaction-types-transactiontype) article for the list of possible values.  (optional)
     * @param walletId Unique identifier of the transactions Wallet. (optional)
     * @param userId Unique identifier of the transactions User. (optional)
     * @param name The name of the transaction. (optional)
     * @param description The description of the transaction. (optional)
     * @param amount The amount of the transaction. (optional)
     * @param currency The currency of the transaction amount currency. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).  (optional)
     * @param valueDate The value date of the transaction (date applied for the payment).  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param executionDate Date of the execution of the transaction.  Format: YYYY-MM-DD HH:MM:SS (optional)
     * @param pageNumber The page number, only available on /v1/ endpoints   (optional)
     * @param pageCount The number of items per page, only available on /v1/ endpoints    (optional)
     * @param sortBy The transaction element you want to sort the list with.  (optional, default to createdDate)
     * @param sortOrder The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  (optional, default to DESC)
     * @param createdDateFrom The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param createdDateTo The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsAsync(String accessSignature, String accessTag, Integer accessUserId, String accessUserIp, Integer transactionId, String transactionType, Integer transactionTypeId, Integer walletId, Integer userId, String name, String description, String amount, String currency, OffsetDateTime valueDate, OffsetDateTime executionDate, Integer pageNumber, Integer pageCount, String sortBy, String sortOrder, OffsetDateTime createdDateFrom, OffsetDateTime createdDateTo, final ApiCallback<GetTransactions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(accessSignature, accessTag, accessUserId, accessUserIp, transactionId, transactionType, transactionTypeId, walletId, userId, name, description, amount, currency, valueDate, executionDate, pageNumber, pageCount, sortBy, sortOrder, createdDateFrom, createdDateTo, _callback);
        Type localVarReturnType = new TypeToken<GetTransactions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
