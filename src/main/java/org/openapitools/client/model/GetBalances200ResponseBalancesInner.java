/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBalances200ResponseBalancesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class GetBalances200ResponseBalancesInner {
  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nullable
  private Integer walletId;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "currentBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  @javax.annotation.Nullable
  private Float currentBalance;

  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  @javax.annotation.Nullable
  private Float authorizations;

  public static final String SERIALIZED_NAME_AUTHORIZED_BALANCE = "authorizedBalance";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_BALANCE)
  @javax.annotation.Nullable
  private Float authorizedBalance;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_CALCULATION_DATE = "calculationDate";
  @SerializedName(SERIALIZED_NAME_CALCULATION_DATE)
  @javax.annotation.Nullable
  private String calculationDate;

  public GetBalances200ResponseBalancesInner() {
  }

  public GetBalances200ResponseBalancesInner walletId(@javax.annotation.Nullable Integer walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Get walletId
   * @return walletId
   */
  @javax.annotation.Nullable
  public Integer getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nullable Integer walletId) {
    this.walletId = walletId;
  }


  public GetBalances200ResponseBalancesInner currentBalance(@javax.annotation.Nullable Float currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * Get currentBalance
   * @return currentBalance
   */
  @javax.annotation.Nullable
  public Float getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(@javax.annotation.Nullable Float currentBalance) {
    this.currentBalance = currentBalance;
  }


  public GetBalances200ResponseBalancesInner authorizations(@javax.annotation.Nullable Float authorizations) {
    this.authorizations = authorizations;
    return this;
  }

  /**
   * Get authorizations
   * @return authorizations
   */
  @javax.annotation.Nullable
  public Float getAuthorizations() {
    return authorizations;
  }

  public void setAuthorizations(@javax.annotation.Nullable Float authorizations) {
    this.authorizations = authorizations;
  }


  public GetBalances200ResponseBalancesInner authorizedBalance(@javax.annotation.Nullable Float authorizedBalance) {
    this.authorizedBalance = authorizedBalance;
    return this;
  }

  /**
   * Get authorizedBalance
   * @return authorizedBalance
   */
  @javax.annotation.Nullable
  public Float getAuthorizedBalance() {
    return authorizedBalance;
  }

  public void setAuthorizedBalance(@javax.annotation.Nullable Float authorizedBalance) {
    this.authorizedBalance = authorizedBalance;
  }


  public GetBalances200ResponseBalancesInner currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public GetBalances200ResponseBalancesInner calculationDate(@javax.annotation.Nullable String calculationDate) {
    this.calculationDate = calculationDate;
    return this;
  }

  /**
   * Date YYYY-MM-DD HH:MM:SS
   * @return calculationDate
   */
  @javax.annotation.Nullable
  public String getCalculationDate() {
    return calculationDate;
  }

  public void setCalculationDate(@javax.annotation.Nullable String calculationDate) {
    this.calculationDate = calculationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBalances200ResponseBalancesInner getBalances200ResponseBalancesInner = (GetBalances200ResponseBalancesInner) o;
    return Objects.equals(this.walletId, getBalances200ResponseBalancesInner.walletId) &&
        Objects.equals(this.currentBalance, getBalances200ResponseBalancesInner.currentBalance) &&
        Objects.equals(this.authorizations, getBalances200ResponseBalancesInner.authorizations) &&
        Objects.equals(this.authorizedBalance, getBalances200ResponseBalancesInner.authorizedBalance) &&
        Objects.equals(this.currency, getBalances200ResponseBalancesInner.currency) &&
        Objects.equals(this.calculationDate, getBalances200ResponseBalancesInner.calculationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(walletId, currentBalance, authorizations, authorizedBalance, currency, calculationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBalances200ResponseBalancesInner {\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    authorizedBalance: ").append(toIndentedString(authorizedBalance)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    calculationDate: ").append(toIndentedString(calculationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("walletId");
    openapiFields.add("currentBalance");
    openapiFields.add("authorizations");
    openapiFields.add("authorizedBalance");
    openapiFields.add("currency");
    openapiFields.add("calculationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBalances200ResponseBalancesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBalances200ResponseBalancesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBalances200ResponseBalancesInner is not found in the empty JSON string", GetBalances200ResponseBalancesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBalances200ResponseBalancesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBalances200ResponseBalancesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("calculationDate") != null && !jsonObj.get("calculationDate").isJsonNull()) && !jsonObj.get("calculationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculationDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBalances200ResponseBalancesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBalances200ResponseBalancesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBalances200ResponseBalancesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBalances200ResponseBalancesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBalances200ResponseBalancesInner>() {
           @Override
           public void write(JsonWriter out, GetBalances200ResponseBalancesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBalances200ResponseBalancesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBalances200ResponseBalancesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBalances200ResponseBalancesInner
   * @throws IOException if the JSON string is invalid with respect to GetBalances200ResponseBalancesInner
   */
  public static GetBalances200ResponseBalancesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBalances200ResponseBalancesInner.class);
  }

  /**
   * Convert an instance of GetBalances200ResponseBalancesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

