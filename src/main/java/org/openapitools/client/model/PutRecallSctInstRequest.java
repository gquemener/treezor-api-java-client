/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutRecallSctInstRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PutRecallSctInstRequest {
  /**
   * Indicates whether to accept (&#x60;1&#x60;) or decline (&#x60;0&#x60;) the recall. 
   */
  @JsonAdapter(ResponseTypeEnum.Adapter.class)
  public enum ResponseTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ResponseTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseTypeEnum fromValue(Integer value) {
      for (ResponseTypeEnum b : ResponseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ResponseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ResponseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_TYPE = "responseType";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE)
  @javax.annotation.Nonnull
  private ResponseTypeEnum responseType;

  public static final String SERIALIZED_NAME_NEGATIVE_RESPONSE_ADDITIONAL_INFORMATION = "negativeResponseAdditionalInformation";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_RESPONSE_ADDITIONAL_INFORMATION)
  @javax.annotation.Nullable
  private String negativeResponseAdditionalInformation;

  /**
   * The [type of Recall Rejection](/guide/transfers/sepa-recalls.html#types-of-recalls-reasoncode). This field is mandatory if the &#x60;responseType&#x60; is &#x60;0&#x60;.
   */
  @JsonAdapter(NegativeResponseReasonCodeEnum.Adapter.class)
  public enum NegativeResponseReasonCodeEnum {
    NOOR("NOOR"),
    
    ARDT("ARDT"),
    
    AC04("AC04"),
    
    NOAS("NOAS"),
    
    CUST("CUST"),
    
    AM04("AM04"),
    
    LEGL("LEGL");

    private String value;

    NegativeResponseReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NegativeResponseReasonCodeEnum fromValue(String value) {
      for (NegativeResponseReasonCodeEnum b : NegativeResponseReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NegativeResponseReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NegativeResponseReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NegativeResponseReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NegativeResponseReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NegativeResponseReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEGATIVE_RESPONSE_REASON_CODE = "negativeResponseReasonCode";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_RESPONSE_REASON_CODE)
  @javax.annotation.Nullable
  private NegativeResponseReasonCodeEnum negativeResponseReasonCode;

  public PutRecallSctInstRequest() {
  }

  public PutRecallSctInstRequest responseType(@javax.annotation.Nonnull ResponseTypeEnum responseType) {
    this.responseType = responseType;
    return this;
  }

  /**
   * Indicates whether to accept (&#x60;1&#x60;) or decline (&#x60;0&#x60;) the recall. 
   * @return responseType
   */
  @javax.annotation.Nonnull
  public ResponseTypeEnum getResponseType() {
    return responseType;
  }

  public void setResponseType(@javax.annotation.Nonnull ResponseTypeEnum responseType) {
    this.responseType = responseType;
  }


  public PutRecallSctInstRequest negativeResponseAdditionalInformation(@javax.annotation.Nullable String negativeResponseAdditionalInformation) {
    this.negativeResponseAdditionalInformation = negativeResponseAdditionalInformation;
    return this;
  }

  /**
   * Additional information for rejecting a Recall. May be mandatory in some situations, learn more in the [Reject a Recall](/guide/transfers/sepa-recalls.html#reject-a-recall-2) article. 
   * @return negativeResponseAdditionalInformation
   */
  @javax.annotation.Nullable
  public String getNegativeResponseAdditionalInformation() {
    return negativeResponseAdditionalInformation;
  }

  public void setNegativeResponseAdditionalInformation(@javax.annotation.Nullable String negativeResponseAdditionalInformation) {
    this.negativeResponseAdditionalInformation = negativeResponseAdditionalInformation;
  }


  public PutRecallSctInstRequest negativeResponseReasonCode(@javax.annotation.Nullable NegativeResponseReasonCodeEnum negativeResponseReasonCode) {
    this.negativeResponseReasonCode = negativeResponseReasonCode;
    return this;
  }

  /**
   * The [type of Recall Rejection](/guide/transfers/sepa-recalls.html#types-of-recalls-reasoncode). This field is mandatory if the &#x60;responseType&#x60; is &#x60;0&#x60;.
   * @return negativeResponseReasonCode
   */
  @javax.annotation.Nullable
  public NegativeResponseReasonCodeEnum getNegativeResponseReasonCode() {
    return negativeResponseReasonCode;
  }

  public void setNegativeResponseReasonCode(@javax.annotation.Nullable NegativeResponseReasonCodeEnum negativeResponseReasonCode) {
    this.negativeResponseReasonCode = negativeResponseReasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutRecallSctInstRequest putRecallSctInstRequest = (PutRecallSctInstRequest) o;
    return Objects.equals(this.responseType, putRecallSctInstRequest.responseType) &&
        Objects.equals(this.negativeResponseAdditionalInformation, putRecallSctInstRequest.negativeResponseAdditionalInformation) &&
        Objects.equals(this.negativeResponseReasonCode, putRecallSctInstRequest.negativeResponseReasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseType, negativeResponseAdditionalInformation, negativeResponseReasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutRecallSctInstRequest {\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    negativeResponseAdditionalInformation: ").append(toIndentedString(negativeResponseAdditionalInformation)).append("\n");
    sb.append("    negativeResponseReasonCode: ").append(toIndentedString(negativeResponseReasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseType");
    openapiFields.add("negativeResponseAdditionalInformation");
    openapiFields.add("negativeResponseReasonCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("responseType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutRecallSctInstRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutRecallSctInstRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutRecallSctInstRequest is not found in the empty JSON string", PutRecallSctInstRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutRecallSctInstRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutRecallSctInstRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutRecallSctInstRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `responseType`
      ResponseTypeEnum.validateJsonElement(jsonObj.get("responseType"));
      if ((jsonObj.get("negativeResponseAdditionalInformation") != null && !jsonObj.get("negativeResponseAdditionalInformation").isJsonNull()) && !jsonObj.get("negativeResponseAdditionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeResponseAdditionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeResponseAdditionalInformation").toString()));
      }
      if ((jsonObj.get("negativeResponseReasonCode") != null && !jsonObj.get("negativeResponseReasonCode").isJsonNull()) && !jsonObj.get("negativeResponseReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeResponseReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeResponseReasonCode").toString()));
      }
      // validate the optional field `negativeResponseReasonCode`
      if (jsonObj.get("negativeResponseReasonCode") != null && !jsonObj.get("negativeResponseReasonCode").isJsonNull()) {
        NegativeResponseReasonCodeEnum.validateJsonElement(jsonObj.get("negativeResponseReasonCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutRecallSctInstRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutRecallSctInstRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutRecallSctInstRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutRecallSctInstRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutRecallSctInstRequest>() {
           @Override
           public void write(JsonWriter out, PutRecallSctInstRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutRecallSctInstRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutRecallSctInstRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutRecallSctInstRequest
   * @throws IOException if the JSON string is invalid with respect to PutRecallSctInstRequest
   */
  public static PutRecallSctInstRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutRecallSctInstRequest.class);
  }

  /**
   * Convert an instance of PutRecallSctInstRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

