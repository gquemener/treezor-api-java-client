/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetOperations200ResponseDataInnerAmount;
import org.openapitools.client.model.GetOperations200ResponseDataInnerDate;
import org.openapitools.client.model.GetOperations200ResponseDataInnerMetadata;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOperations200ResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class GetOperations200ResponseDataInner {
  /**
   * Type of operation. 
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    BANK_DIRECT_DEBIT("bankDirectDebit"),
    
    BANK_TRANSFER("bankTransfer"),
    
    CARD_TOPUP("cardTopup"),
    
    CARD_TRANSACTION("cardTransaction"),
    
    CHECK("check"),
    
    CREDIT_NOTE("creditNote"),
    
    FEES("fees"),
    
    INSTANT_BANK_TRANSFER("instantBankTransfer"),
    
    WALLET_TRANSFER("walletTransfer");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  @javax.annotation.Nullable
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private GetOperations200ResponseDataInnerAmount amount;

  /**
   * operation status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AUTHORIZED("AUTHORIZED"),
    
    DECLINED("DECLINED"),
    
    SETTLED("SETTLED"),
    
    CANCELED("CANCELED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nullable
  private Long walletId;

  /**
   * Direction of operation credit or debit
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CREDIT("CREDIT"),
    
    DEBIT("DEBIT");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nullable
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  @javax.annotation.Nullable
  private Long objectId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private GetOperations200ResponseDataInnerMetadata metadata;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private GetOperations200ResponseDataInnerDate date;

  /**
   * Context about the technical conext of the initial operation.
   */
  @JsonAdapter(InitialFlowEnum.Adapter.class)
  public enum InitialFlowEnum {
    PAYIN("payin"),
    
    PAYIN_REFUND("payinRefund"),
    
    PAYOUT("payout"),
    
    PAYOUT_REFUND("payoutRefund"),
    
    TRANSFER("transfer"),
    
    CARD_TRANSACTION("cardTransaction"),
    
    CHARGEBACK("chargeback");

    private String value;

    InitialFlowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InitialFlowEnum fromValue(String value) {
      for (InitialFlowEnum b : InitialFlowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InitialFlowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InitialFlowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InitialFlowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InitialFlowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InitialFlowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INITIAL_FLOW = "initialFlow";
  @SerializedName(SERIALIZED_NAME_INITIAL_FLOW)
  @javax.annotation.Nullable
  private InitialFlowEnum initialFlow;

  public GetOperations200ResponseDataInner() {
  }

  public GetOperations200ResponseDataInner operationType(@javax.annotation.Nullable OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Type of operation. 
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(@javax.annotation.Nullable OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public GetOperations200ResponseDataInner amount(@javax.annotation.Nullable GetOperations200ResponseDataInnerAmount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public GetOperations200ResponseDataInnerAmount getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable GetOperations200ResponseDataInnerAmount amount) {
    this.amount = amount;
  }


  public GetOperations200ResponseDataInner status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * operation status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public GetOperations200ResponseDataInner walletId(@javax.annotation.Nullable Long walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * ID of the wallet impacted
   * @return walletId
   */
  @javax.annotation.Nullable
  public Long getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nullable Long walletId) {
    this.walletId = walletId;
  }


  public GetOperations200ResponseDataInner direction(@javax.annotation.Nullable DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Direction of operation credit or debit
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nullable DirectionEnum direction) {
    this.direction = direction;
  }


  public GetOperations200ResponseDataInner objectId(@javax.annotation.Nullable Long objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The unique identifier of the Treezor object that contains the initial operation 
   * @return objectId
   */
  @javax.annotation.Nullable
  public Long getObjectId() {
    return objectId;
  }

  public void setObjectId(@javax.annotation.Nullable Long objectId) {
    this.objectId = objectId;
  }


  public GetOperations200ResponseDataInner label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * The tag attached to the operation
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public GetOperations200ResponseDataInner metadata(@javax.annotation.Nullable GetOperations200ResponseDataInnerMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public GetOperations200ResponseDataInnerMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable GetOperations200ResponseDataInnerMetadata metadata) {
    this.metadata = metadata;
  }


  public GetOperations200ResponseDataInner date(@javax.annotation.Nullable GetOperations200ResponseDataInnerDate date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public GetOperations200ResponseDataInnerDate getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable GetOperations200ResponseDataInnerDate date) {
    this.date = date;
  }


  public GetOperations200ResponseDataInner initialFlow(@javax.annotation.Nullable InitialFlowEnum initialFlow) {
    this.initialFlow = initialFlow;
    return this;
  }

  /**
   * Context about the technical conext of the initial operation.
   * @return initialFlow
   */
  @javax.annotation.Nullable
  public InitialFlowEnum getInitialFlow() {
    return initialFlow;
  }

  public void setInitialFlow(@javax.annotation.Nullable InitialFlowEnum initialFlow) {
    this.initialFlow = initialFlow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOperations200ResponseDataInner getOperations200ResponseDataInner = (GetOperations200ResponseDataInner) o;
    return Objects.equals(this.operationType, getOperations200ResponseDataInner.operationType) &&
        Objects.equals(this.amount, getOperations200ResponseDataInner.amount) &&
        Objects.equals(this.status, getOperations200ResponseDataInner.status) &&
        Objects.equals(this.walletId, getOperations200ResponseDataInner.walletId) &&
        Objects.equals(this.direction, getOperations200ResponseDataInner.direction) &&
        Objects.equals(this.objectId, getOperations200ResponseDataInner.objectId) &&
        Objects.equals(this.label, getOperations200ResponseDataInner.label) &&
        Objects.equals(this.metadata, getOperations200ResponseDataInner.metadata) &&
        Objects.equals(this.date, getOperations200ResponseDataInner.date) &&
        Objects.equals(this.initialFlow, getOperations200ResponseDataInner.initialFlow);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationType, amount, status, walletId, direction, objectId, label, metadata, date, initialFlow);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOperations200ResponseDataInner {\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    initialFlow: ").append(toIndentedString(initialFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operationType");
    openapiFields.add("amount");
    openapiFields.add("status");
    openapiFields.add("walletId");
    openapiFields.add("direction");
    openapiFields.add("objectId");
    openapiFields.add("label");
    openapiFields.add("metadata");
    openapiFields.add("date");
    openapiFields.add("initialFlow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOperations200ResponseDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOperations200ResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOperations200ResponseDataInner is not found in the empty JSON string", GetOperations200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOperations200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOperations200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        GetOperations200ResponseDataInnerAmount.validateJsonElement(jsonObj.get("amount"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        GetOperations200ResponseDataInnerMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        GetOperations200ResponseDataInnerDate.validateJsonElement(jsonObj.get("date"));
      }
      if ((jsonObj.get("initialFlow") != null && !jsonObj.get("initialFlow").isJsonNull()) && !jsonObj.get("initialFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialFlow").toString()));
      }
      // validate the optional field `initialFlow`
      if (jsonObj.get("initialFlow") != null && !jsonObj.get("initialFlow").isJsonNull()) {
        InitialFlowEnum.validateJsonElement(jsonObj.get("initialFlow"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOperations200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOperations200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOperations200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOperations200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOperations200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, GetOperations200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOperations200ResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOperations200ResponseDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOperations200ResponseDataInner
   * @throws IOException if the JSON string is invalid with respect to GetOperations200ResponseDataInner
   */
  public static GetOperations200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOperations200ResponseDataInner.class);
  }

  /**
   * Convert an instance of GetOperations200ResponseDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

