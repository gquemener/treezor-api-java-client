/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.NotificationSimulationPayinsCardPaymentMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationSimulationPayins
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class NotificationSimulationPayins {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nonnull
  private String walletId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private Integer status;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "transactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  @javax.annotation.Nullable
  private String transactionReference;

  public static final String SERIALIZED_NAME_CARD_PAYMENT_METHOD = "cardPaymentMethod";
  @SerializedName(SERIALIZED_NAME_CARD_PAYMENT_METHOD)
  @javax.annotation.Nullable
  private NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private String profile;

  public NotificationSimulationPayins() {
  }

  public NotificationSimulationPayins userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Identifier of the user on behalf of which the simulated payin should be executed 
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public NotificationSimulationPayins walletId(@javax.annotation.Nonnull String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Identifier of the wallet to be credited
   * @return walletId
   */
  @javax.annotation.Nonnull
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nonnull String walletId) {
    this.walletId = walletId;
  }


  public NotificationSimulationPayins amount(@javax.annotation.Nonnull BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Payin amount
   * @return amount
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull BigDecimal amount) {
    this.amount = amount;
  }


  public NotificationSimulationPayins currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Base currency for this payin  This three-character currency code must comply with ISO-4217
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public NotificationSimulationPayins status(@javax.annotation.Nullable Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The status code of the simulated notification
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable Integer status) {
    this.status = status;
  }


  public NotificationSimulationPayins transactionReference(@javax.annotation.Nullable String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * The reference of the transaction
   * @return transactionReference
   */
  @javax.annotation.Nullable
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(@javax.annotation.Nullable String transactionReference) {
    this.transactionReference = transactionReference;
  }


  public NotificationSimulationPayins cardPaymentMethod(@javax.annotation.Nullable NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod) {
    this.cardPaymentMethod = cardPaymentMethod;
    return this;
  }

  /**
   * Get cardPaymentMethod
   * @return cardPaymentMethod
   */
  @javax.annotation.Nullable
  public NotificationSimulationPayinsCardPaymentMethod getCardPaymentMethod() {
    return cardPaymentMethod;
  }

  public void setCardPaymentMethod(@javax.annotation.Nullable NotificationSimulationPayinsCardPaymentMethod cardPaymentMethod) {
    this.cardPaymentMethod = cardPaymentMethod;
  }


  public NotificationSimulationPayins profile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * HiPay merchant identifier (mid) to be used for the operation. Required if the client has multiple merchant identifiers associated. If only one mid is associated, then that one is used for the operation. 
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationSimulationPayins notificationSimulationPayins = (NotificationSimulationPayins) o;
    return Objects.equals(this.userId, notificationSimulationPayins.userId) &&
        Objects.equals(this.walletId, notificationSimulationPayins.walletId) &&
        Objects.equals(this.amount, notificationSimulationPayins.amount) &&
        Objects.equals(this.currency, notificationSimulationPayins.currency) &&
        Objects.equals(this.status, notificationSimulationPayins.status) &&
        Objects.equals(this.transactionReference, notificationSimulationPayins.transactionReference) &&
        Objects.equals(this.cardPaymentMethod, notificationSimulationPayins.cardPaymentMethod) &&
        Objects.equals(this.profile, notificationSimulationPayins.profile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, walletId, amount, currency, status, transactionReference, cardPaymentMethod, profile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationSimulationPayins {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("    cardPaymentMethod: ").append(toIndentedString(cardPaymentMethod)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("walletId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("status");
    openapiFields.add("transactionReference");
    openapiFields.add("cardPaymentMethod");
    openapiFields.add("profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("walletId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationSimulationPayins
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationSimulationPayins.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationSimulationPayins is not found in the empty JSON string", NotificationSimulationPayins.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationSimulationPayins.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationSimulationPayins` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationSimulationPayins.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("transactionReference") != null && !jsonObj.get("transactionReference").isJsonNull()) && !jsonObj.get("transactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionReference").toString()));
      }
      // validate the optional field `cardPaymentMethod`
      if (jsonObj.get("cardPaymentMethod") != null && !jsonObj.get("cardPaymentMethod").isJsonNull()) {
        NotificationSimulationPayinsCardPaymentMethod.validateJsonElement(jsonObj.get("cardPaymentMethod"));
      }
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationSimulationPayins.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationSimulationPayins' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationSimulationPayins> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationSimulationPayins.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationSimulationPayins>() {
           @Override
           public void write(JsonWriter out, NotificationSimulationPayins value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationSimulationPayins read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationSimulationPayins given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationSimulationPayins
   * @throws IOException if the JSON string is invalid with respect to NotificationSimulationPayins
   */
  public static NotificationSimulationPayins fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationSimulationPayins.class);
  }

  /**
   * Convert an instance of NotificationSimulationPayins to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

