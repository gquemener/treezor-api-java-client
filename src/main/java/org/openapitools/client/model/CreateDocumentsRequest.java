/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDocumentsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class CreateDocumentsRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_TAG = "documentTag";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TAG)
  @javax.annotation.Nullable
  private String documentTag;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private Integer userId;

  public static final String SERIALIZED_NAME_RESIDENCE_ID = "residenceId";
  @SerializedName(SERIALIZED_NAME_RESIDENCE_ID)
  @javax.annotation.Nullable
  private Long residenceId;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE_ID = "documentTypeId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE_ID)
  @javax.annotation.Nonnull
  private Integer documentTypeId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_FILE_CONTENT_BASE64 = "fileContentBase64";
  @SerializedName(SERIALIZED_NAME_FILE_CONTENT_BASE64)
  @javax.annotation.Nonnull
  private byte[] fileContentBase64;

  public CreateDocumentsRequest() {
  }

  public CreateDocumentsRequest documentTag(@javax.annotation.Nullable String documentTag) {
    this.documentTag = documentTag;
    return this;
  }

  /**
   * Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60; 
   * @return documentTag
   */
  @javax.annotation.Nullable
  public String getDocumentTag() {
    return documentTag;
  }

  public void setDocumentTag(@javax.annotation.Nullable String documentTag) {
    this.documentTag = documentTag;
  }


  public CreateDocumentsRequest userId(@javax.annotation.Nonnull Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the User the document belongs to.
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull Integer userId) {
    this.userId = userId;
  }


  public CreateDocumentsRequest residenceId(@javax.annotation.Nullable Long residenceId) {
    this.residenceId = residenceId;
    return this;
  }

  /**
   * The unique identifier of the User&#39;s [Tax Residence](/guide/user-verification/tax-residence.html). Required if the document type is &#x60;24&#x60; or &#x60;25&#x60;.  Shouldn&#39;t be provided otherwise. 
   * minimum: 1
   * @return residenceId
   */
  @javax.annotation.Nullable
  public Long getResidenceId() {
    return residenceId;
  }

  public void setResidenceId(@javax.annotation.Nullable Long residenceId) {
    this.residenceId = residenceId;
  }


  public CreateDocumentsRequest documentTypeId(@javax.annotation.Nonnull Integer documentTypeId) {
    this.documentTypeId = documentTypeId;
    return this;
  }

  /**
   * The type of document. See the Document [Types](/guide/user-verification/documents.html#types-documenttypeid) article for the list. 
   * @return documentTypeId
   */
  @javax.annotation.Nonnull
  public Integer getDocumentTypeId() {
    return documentTypeId;
  }

  public void setDocumentTypeId(@javax.annotation.Nonnull Integer documentTypeId) {
    this.documentTypeId = documentTypeId;
  }


  public CreateDocumentsRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the document.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateDocumentsRequest fileContentBase64(@javax.annotation.Nonnull byte[] fileContentBase64) {
    this.fileContentBase64 = fileContentBase64;
    return this;
  }

  /**
   * The file encoded in standard base64 (RFC 4648).
   * @return fileContentBase64
   */
  @javax.annotation.Nonnull
  public byte[] getFileContentBase64() {
    return fileContentBase64;
  }

  public void setFileContentBase64(@javax.annotation.Nonnull byte[] fileContentBase64) {
    this.fileContentBase64 = fileContentBase64;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDocumentsRequest createDocumentsRequest = (CreateDocumentsRequest) o;
    return Objects.equals(this.documentTag, createDocumentsRequest.documentTag) &&
        Objects.equals(this.userId, createDocumentsRequest.userId) &&
        Objects.equals(this.residenceId, createDocumentsRequest.residenceId) &&
        Objects.equals(this.documentTypeId, createDocumentsRequest.documentTypeId) &&
        Objects.equals(this.name, createDocumentsRequest.name) &&
        Arrays.equals(this.fileContentBase64, createDocumentsRequest.fileContentBase64);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentTag, userId, residenceId, documentTypeId, name, Arrays.hashCode(fileContentBase64));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDocumentsRequest {\n");
    sb.append("    documentTag: ").append(toIndentedString(documentTag)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    residenceId: ").append(toIndentedString(residenceId)).append("\n");
    sb.append("    documentTypeId: ").append(toIndentedString(documentTypeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fileContentBase64: ").append(toIndentedString(fileContentBase64)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentTag");
    openapiFields.add("userId");
    openapiFields.add("residenceId");
    openapiFields.add("documentTypeId");
    openapiFields.add("name");
    openapiFields.add("fileContentBase64");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("documentTypeId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("fileContentBase64");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDocumentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDocumentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDocumentsRequest is not found in the empty JSON string", CreateDocumentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDocumentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDocumentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDocumentsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentTag") != null && !jsonObj.get("documentTag").isJsonNull()) && !jsonObj.get("documentTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTag").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDocumentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDocumentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDocumentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDocumentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDocumentsRequest>() {
           @Override
           public void write(JsonWriter out, CreateDocumentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDocumentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDocumentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDocumentsRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDocumentsRequest
   */
  public static CreateDocumentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDocumentsRequest.class);
  }

  /**
   * Convert an instance of CreateDocumentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

