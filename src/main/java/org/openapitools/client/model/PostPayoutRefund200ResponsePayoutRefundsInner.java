/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPayoutRefund200ResponsePayoutRefundsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostPayoutRefund200ResponsePayoutRefundsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_PAYOUT_REFUND_TAG = "payoutRefundTag";
  @SerializedName(SERIALIZED_NAME_PAYOUT_REFUND_TAG)
  @javax.annotation.Nullable
  private String payoutRefundTag;

  public static final String SERIALIZED_NAME_CODE_STATUS = "codeStatus";
  @SerializedName(SERIALIZED_NAME_CODE_STATUS)
  @javax.annotation.Nullable
  private String codeStatus;

  /**
   * Gets or Sets informationStatus
   */
  @JsonAdapter(InformationStatusEnum.Adapter.class)
  public enum InformationStatusEnum {
    PENDING("PENDING"),
    
    VALIDATED("VALIDATED"),
    
    CANCELED("CANCELED");

    private String value;

    InformationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InformationStatusEnum fromValue(String value) {
      for (InformationStatusEnum b : InformationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InformationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InformationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InformationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InformationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InformationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INFORMATION_STATUS = "informationStatus";
  @SerializedName(SERIALIZED_NAME_INFORMATION_STATUS)
  @javax.annotation.Nullable
  private InformationStatusEnum informationStatus;

  public static final String SERIALIZED_NAME_PAYOUT_ID = "payoutId";
  @SerializedName(SERIALIZED_NAME_PAYOUT_ID)
  @javax.annotation.Nullable
  private String payoutId;

  public static final String SERIALIZED_NAME_REQUEST_AMOUNT = "requestAmount";
  @SerializedName(SERIALIZED_NAME_REQUEST_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal requestAmount;

  /**
   * Gets or Sets requestCurrency
   */
  @JsonAdapter(RequestCurrencyEnum.Adapter.class)
  public enum RequestCurrencyEnum {
    EUR("EUR");

    private String value;

    RequestCurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestCurrencyEnum fromValue(String value) {
      for (RequestCurrencyEnum b : RequestCurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestCurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestCurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestCurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestCurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestCurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_CURRENCY = "requestCurrency";
  @SerializedName(SERIALIZED_NAME_REQUEST_CURRENCY)
  @javax.annotation.Nullable
  private RequestCurrencyEnum requestCurrency;

  public static final String SERIALIZED_NAME_REQUEST_COMMENT = "requestComment";
  @SerializedName(SERIALIZED_NAME_REQUEST_COMMENT)
  @javax.annotation.Nullable
  private String requestComment;

  /**
   * Gets or Sets reasonCode
   */
  @JsonAdapter(ReasonCodeEnum.Adapter.class)
  public enum ReasonCodeEnum {
    DUPL("DUPL"),
    
    TECH("TECH"),
    
    FRAD("FRAD"),
    
    CUST("CUST"),
    
    AM09("AM09"),
    
    AC03("AC03");

    private String value;

    ReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonCodeEnum fromValue(String value) {
      for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  @javax.annotation.Nullable
  private ReasonCodeEnum reasonCode;

  public static final String SERIALIZED_NAME_REFUND_AMOUNT = "refundAmount";
  @SerializedName(SERIALIZED_NAME_REFUND_AMOUNT)
  @javax.annotation.Nullable
  private Float refundAmount;

  /**
   * Gets or Sets refundCurrency
   */
  @JsonAdapter(RefundCurrencyEnum.Adapter.class)
  public enum RefundCurrencyEnum {
    EUR("EUR");

    private String value;

    RefundCurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefundCurrencyEnum fromValue(String value) {
      for (RefundCurrencyEnum b : RefundCurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefundCurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefundCurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefundCurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefundCurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefundCurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFUND_CURRENCY = "refundCurrency";
  @SerializedName(SERIALIZED_NAME_REFUND_CURRENCY)
  @javax.annotation.Nullable
  private RefundCurrencyEnum refundCurrency;

  public static final String SERIALIZED_NAME_REFUND_DATE = "refundDate";
  @SerializedName(SERIALIZED_NAME_REFUND_DATE)
  @javax.annotation.Nullable
  private String refundDate;

  public static final String SERIALIZED_NAME_REFUND_COMMENT = "refundComment";
  @SerializedName(SERIALIZED_NAME_REFUND_COMMENT)
  @javax.annotation.Nullable
  private String refundComment;

  public static final String SERIALIZED_NAME_NEGATIVE_RESPONSE_REASON_CODE = "negativeResponseReasonCode";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_RESPONSE_REASON_CODE)
  @javax.annotation.Nullable
  private String negativeResponseReasonCode;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private String createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private String modifiedDate;

  public PostPayoutRefund200ResponsePayoutRefundsInner() {
  }

  public PostPayoutRefund200ResponsePayoutRefundsInner id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner payoutRefundTag(@javax.annotation.Nullable String payoutRefundTag) {
    this.payoutRefundTag = payoutRefundTag;
    return this;
  }

  /**
   * Get payoutRefundTag
   * @return payoutRefundTag
   */
  @javax.annotation.Nullable
  public String getPayoutRefundTag() {
    return payoutRefundTag;
  }

  public void setPayoutRefundTag(@javax.annotation.Nullable String payoutRefundTag) {
    this.payoutRefundTag = payoutRefundTag;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner codeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
    return this;
  }

  /**
   * Get codeStatus
   * @return codeStatus
   */
  @javax.annotation.Nullable
  public String getCodeStatus() {
    return codeStatus;
  }

  public void setCodeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner informationStatus(@javax.annotation.Nullable InformationStatusEnum informationStatus) {
    this.informationStatus = informationStatus;
    return this;
  }

  /**
   * Get informationStatus
   * @return informationStatus
   */
  @javax.annotation.Nullable
  public InformationStatusEnum getInformationStatus() {
    return informationStatus;
  }

  public void setInformationStatus(@javax.annotation.Nullable InformationStatusEnum informationStatus) {
    this.informationStatus = informationStatus;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner payoutId(@javax.annotation.Nullable String payoutId) {
    this.payoutId = payoutId;
    return this;
  }

  /**
   * Get payoutId
   * @return payoutId
   */
  @javax.annotation.Nullable
  public String getPayoutId() {
    return payoutId;
  }

  public void setPayoutId(@javax.annotation.Nullable String payoutId) {
    this.payoutId = payoutId;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner requestAmount(@javax.annotation.Nullable BigDecimal requestAmount) {
    this.requestAmount = requestAmount;
    return this;
  }

  /**
   * Get requestAmount
   * @return requestAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRequestAmount() {
    return requestAmount;
  }

  public void setRequestAmount(@javax.annotation.Nullable BigDecimal requestAmount) {
    this.requestAmount = requestAmount;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner requestCurrency(@javax.annotation.Nullable RequestCurrencyEnum requestCurrency) {
    this.requestCurrency = requestCurrency;
    return this;
  }

  /**
   * Get requestCurrency
   * @return requestCurrency
   */
  @javax.annotation.Nullable
  public RequestCurrencyEnum getRequestCurrency() {
    return requestCurrency;
  }

  public void setRequestCurrency(@javax.annotation.Nullable RequestCurrencyEnum requestCurrency) {
    this.requestCurrency = requestCurrency;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner requestComment(@javax.annotation.Nullable String requestComment) {
    this.requestComment = requestComment;
    return this;
  }

  /**
   * Get requestComment
   * @return requestComment
   */
  @javax.annotation.Nullable
  public String getRequestComment() {
    return requestComment;
  }

  public void setRequestComment(@javax.annotation.Nullable String requestComment) {
    this.requestComment = requestComment;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner reasonCode(@javax.annotation.Nullable ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Get reasonCode
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(@javax.annotation.Nullable ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner refundAmount(@javax.annotation.Nullable Float refundAmount) {
    this.refundAmount = refundAmount;
    return this;
  }

  /**
   * Get refundAmount
   * @return refundAmount
   */
  @javax.annotation.Nullable
  public Float getRefundAmount() {
    return refundAmount;
  }

  public void setRefundAmount(@javax.annotation.Nullable Float refundAmount) {
    this.refundAmount = refundAmount;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner refundCurrency(@javax.annotation.Nullable RefundCurrencyEnum refundCurrency) {
    this.refundCurrency = refundCurrency;
    return this;
  }

  /**
   * Get refundCurrency
   * @return refundCurrency
   */
  @javax.annotation.Nullable
  public RefundCurrencyEnum getRefundCurrency() {
    return refundCurrency;
  }

  public void setRefundCurrency(@javax.annotation.Nullable RefundCurrencyEnum refundCurrency) {
    this.refundCurrency = refundCurrency;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner refundDate(@javax.annotation.Nullable String refundDate) {
    this.refundDate = refundDate;
    return this;
  }

  /**
   * Get refundDate
   * @return refundDate
   */
  @javax.annotation.Nullable
  public String getRefundDate() {
    return refundDate;
  }

  public void setRefundDate(@javax.annotation.Nullable String refundDate) {
    this.refundDate = refundDate;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner refundComment(@javax.annotation.Nullable String refundComment) {
    this.refundComment = refundComment;
    return this;
  }

  /**
   * Get refundComment
   * @return refundComment
   */
  @javax.annotation.Nullable
  public String getRefundComment() {
    return refundComment;
  }

  public void setRefundComment(@javax.annotation.Nullable String refundComment) {
    this.refundComment = refundComment;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner negativeResponseReasonCode(@javax.annotation.Nullable String negativeResponseReasonCode) {
    this.negativeResponseReasonCode = negativeResponseReasonCode;
    return this;
  }

  /**
   * Get negativeResponseReasonCode
   * @return negativeResponseReasonCode
   */
  @javax.annotation.Nullable
  public String getNegativeResponseReasonCode() {
    return negativeResponseReasonCode;
  }

  public void setNegativeResponseReasonCode(@javax.annotation.Nullable String negativeResponseReasonCode) {
    this.negativeResponseReasonCode = negativeResponseReasonCode;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner createdDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
  }


  public PostPayoutRefund200ResponsePayoutRefundsInner modifiedDate(@javax.annotation.Nullable String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPayoutRefund200ResponsePayoutRefundsInner postPayoutRefund200ResponsePayoutRefundsInner = (PostPayoutRefund200ResponsePayoutRefundsInner) o;
    return Objects.equals(this.id, postPayoutRefund200ResponsePayoutRefundsInner.id) &&
        Objects.equals(this.payoutRefundTag, postPayoutRefund200ResponsePayoutRefundsInner.payoutRefundTag) &&
        Objects.equals(this.codeStatus, postPayoutRefund200ResponsePayoutRefundsInner.codeStatus) &&
        Objects.equals(this.informationStatus, postPayoutRefund200ResponsePayoutRefundsInner.informationStatus) &&
        Objects.equals(this.payoutId, postPayoutRefund200ResponsePayoutRefundsInner.payoutId) &&
        Objects.equals(this.requestAmount, postPayoutRefund200ResponsePayoutRefundsInner.requestAmount) &&
        Objects.equals(this.requestCurrency, postPayoutRefund200ResponsePayoutRefundsInner.requestCurrency) &&
        Objects.equals(this.requestComment, postPayoutRefund200ResponsePayoutRefundsInner.requestComment) &&
        Objects.equals(this.reasonCode, postPayoutRefund200ResponsePayoutRefundsInner.reasonCode) &&
        Objects.equals(this.refundAmount, postPayoutRefund200ResponsePayoutRefundsInner.refundAmount) &&
        Objects.equals(this.refundCurrency, postPayoutRefund200ResponsePayoutRefundsInner.refundCurrency) &&
        Objects.equals(this.refundDate, postPayoutRefund200ResponsePayoutRefundsInner.refundDate) &&
        Objects.equals(this.refundComment, postPayoutRefund200ResponsePayoutRefundsInner.refundComment) &&
        Objects.equals(this.negativeResponseReasonCode, postPayoutRefund200ResponsePayoutRefundsInner.negativeResponseReasonCode) &&
        Objects.equals(this.createdDate, postPayoutRefund200ResponsePayoutRefundsInner.createdDate) &&
        Objects.equals(this.modifiedDate, postPayoutRefund200ResponsePayoutRefundsInner.modifiedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, payoutRefundTag, codeStatus, informationStatus, payoutId, requestAmount, requestCurrency, requestComment, reasonCode, refundAmount, refundCurrency, refundDate, refundComment, negativeResponseReasonCode, createdDate, modifiedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPayoutRefund200ResponsePayoutRefundsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    payoutRefundTag: ").append(toIndentedString(payoutRefundTag)).append("\n");
    sb.append("    codeStatus: ").append(toIndentedString(codeStatus)).append("\n");
    sb.append("    informationStatus: ").append(toIndentedString(informationStatus)).append("\n");
    sb.append("    payoutId: ").append(toIndentedString(payoutId)).append("\n");
    sb.append("    requestAmount: ").append(toIndentedString(requestAmount)).append("\n");
    sb.append("    requestCurrency: ").append(toIndentedString(requestCurrency)).append("\n");
    sb.append("    requestComment: ").append(toIndentedString(requestComment)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    refundAmount: ").append(toIndentedString(refundAmount)).append("\n");
    sb.append("    refundCurrency: ").append(toIndentedString(refundCurrency)).append("\n");
    sb.append("    refundDate: ").append(toIndentedString(refundDate)).append("\n");
    sb.append("    refundComment: ").append(toIndentedString(refundComment)).append("\n");
    sb.append("    negativeResponseReasonCode: ").append(toIndentedString(negativeResponseReasonCode)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("payoutRefundTag");
    openapiFields.add("codeStatus");
    openapiFields.add("informationStatus");
    openapiFields.add("payoutId");
    openapiFields.add("requestAmount");
    openapiFields.add("requestCurrency");
    openapiFields.add("requestComment");
    openapiFields.add("reasonCode");
    openapiFields.add("refundAmount");
    openapiFields.add("refundCurrency");
    openapiFields.add("refundDate");
    openapiFields.add("refundComment");
    openapiFields.add("negativeResponseReasonCode");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPayoutRefund200ResponsePayoutRefundsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPayoutRefund200ResponsePayoutRefundsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPayoutRefund200ResponsePayoutRefundsInner is not found in the empty JSON string", PostPayoutRefund200ResponsePayoutRefundsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPayoutRefund200ResponsePayoutRefundsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPayoutRefund200ResponsePayoutRefundsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("payoutRefundTag") != null && !jsonObj.get("payoutRefundTag").isJsonNull()) && !jsonObj.get("payoutRefundTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutRefundTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutRefundTag").toString()));
      }
      if ((jsonObj.get("codeStatus") != null && !jsonObj.get("codeStatus").isJsonNull()) && !jsonObj.get("codeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeStatus").toString()));
      }
      if ((jsonObj.get("informationStatus") != null && !jsonObj.get("informationStatus").isJsonNull()) && !jsonObj.get("informationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informationStatus").toString()));
      }
      // validate the optional field `informationStatus`
      if (jsonObj.get("informationStatus") != null && !jsonObj.get("informationStatus").isJsonNull()) {
        InformationStatusEnum.validateJsonElement(jsonObj.get("informationStatus"));
      }
      if ((jsonObj.get("payoutId") != null && !jsonObj.get("payoutId").isJsonNull()) && !jsonObj.get("payoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutId").toString()));
      }
      if ((jsonObj.get("requestCurrency") != null && !jsonObj.get("requestCurrency").isJsonNull()) && !jsonObj.get("requestCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCurrency").toString()));
      }
      // validate the optional field `requestCurrency`
      if (jsonObj.get("requestCurrency") != null && !jsonObj.get("requestCurrency").isJsonNull()) {
        RequestCurrencyEnum.validateJsonElement(jsonObj.get("requestCurrency"));
      }
      if ((jsonObj.get("requestComment") != null && !jsonObj.get("requestComment").isJsonNull()) && !jsonObj.get("requestComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestComment").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      // validate the optional field `reasonCode`
      if (jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) {
        ReasonCodeEnum.validateJsonElement(jsonObj.get("reasonCode"));
      }
      if ((jsonObj.get("refundCurrency") != null && !jsonObj.get("refundCurrency").isJsonNull()) && !jsonObj.get("refundCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundCurrency").toString()));
      }
      // validate the optional field `refundCurrency`
      if (jsonObj.get("refundCurrency") != null && !jsonObj.get("refundCurrency").isJsonNull()) {
        RefundCurrencyEnum.validateJsonElement(jsonObj.get("refundCurrency"));
      }
      if ((jsonObj.get("refundDate") != null && !jsonObj.get("refundDate").isJsonNull()) && !jsonObj.get("refundDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundDate").toString()));
      }
      if ((jsonObj.get("refundComment") != null && !jsonObj.get("refundComment").isJsonNull()) && !jsonObj.get("refundComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundComment").toString()));
      }
      if ((jsonObj.get("negativeResponseReasonCode") != null && !jsonObj.get("negativeResponseReasonCode").isJsonNull()) && !jsonObj.get("negativeResponseReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeResponseReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeResponseReasonCode").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPayoutRefund200ResponsePayoutRefundsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPayoutRefund200ResponsePayoutRefundsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPayoutRefund200ResponsePayoutRefundsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPayoutRefund200ResponsePayoutRefundsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPayoutRefund200ResponsePayoutRefundsInner>() {
           @Override
           public void write(JsonWriter out, PostPayoutRefund200ResponsePayoutRefundsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPayoutRefund200ResponsePayoutRefundsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPayoutRefund200ResponsePayoutRefundsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPayoutRefund200ResponsePayoutRefundsInner
   * @throws IOException if the JSON string is invalid with respect to PostPayoutRefund200ResponsePayoutRefundsInner
   */
  public static PostPayoutRefund200ResponsePayoutRefundsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPayoutRefund200ResponsePayoutRefundsInner.class);
  }

  /**
   * Convert an instance of PostPayoutRefund200ResponsePayoutRefundsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

