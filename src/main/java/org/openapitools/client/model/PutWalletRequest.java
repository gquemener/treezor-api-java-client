/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutWalletRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PutWalletRequest {
  public static final String SERIALIZED_NAME_TARIFF_ID = "tariffId";
  @SerializedName(SERIALIZED_NAME_TARIFF_ID)
  @javax.annotation.Nullable
  private Integer tariffId;

  /**
   * The type of Wallet. Can only be updated if no transaction occurred with the Wallet yet.  The following values are allowed: * &#x60;9&#x60; – Electronic Money Wallet * &#x60;10&#x60; – Payment Account Wallet  Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation. 
   */
  @JsonAdapter(WalletTypeIdEnum.Adapter.class)
  public enum WalletTypeIdEnum {
    NUMBER_9(9),
    
    NUMBER_10(10);

    private Integer value;

    WalletTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WalletTypeIdEnum fromValue(Integer value) {
      for (WalletTypeIdEnum b : WalletTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WalletTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WalletTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WalletTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return WalletTypeIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      WalletTypeIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WALLET_TYPE_ID = "walletTypeId";
  @SerializedName(SERIALIZED_NAME_WALLET_TYPE_ID)
  @javax.annotation.Nullable
  private WalletTypeIdEnum walletTypeId;

  public static final String SERIALIZED_NAME_WALLET_TAG = "walletTag";
  @SerializedName(SERIALIZED_NAME_WALLET_TAG)
  @javax.annotation.Nullable
  private String walletTag;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nullable
  private String eventName;

  public static final String SERIALIZED_NAME_EVENT_MESSAGE = "eventMessage";
  @SerializedName(SERIALIZED_NAME_EVENT_MESSAGE)
  @javax.annotation.Nullable
  private String eventMessage;

  public PutWalletRequest() {
  }

  public PutWalletRequest tariffId(@javax.annotation.Nullable Integer tariffId) {
    this.tariffId = tariffId;
    return this;
  }

  /**
   * The fees applied to the Wallet, as defined by your contract with Treezor.
   * @return tariffId
   */
  @javax.annotation.Nullable
  public Integer getTariffId() {
    return tariffId;
  }

  public void setTariffId(@javax.annotation.Nullable Integer tariffId) {
    this.tariffId = tariffId;
  }


  public PutWalletRequest walletTypeId(@javax.annotation.Nullable WalletTypeIdEnum walletTypeId) {
    this.walletTypeId = walletTypeId;
    return this;
  }

  /**
   * The type of Wallet. Can only be updated if no transaction occurred with the Wallet yet.  The following values are allowed: * &#x60;9&#x60; – Electronic Money Wallet * &#x60;10&#x60; – Payment Account Wallet  Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation. 
   * @return walletTypeId
   */
  @javax.annotation.Nullable
  public WalletTypeIdEnum getWalletTypeId() {
    return walletTypeId;
  }

  public void setWalletTypeId(@javax.annotation.Nullable WalletTypeIdEnum walletTypeId) {
    this.walletTypeId = walletTypeId;
  }


  public PutWalletRequest walletTag(@javax.annotation.Nullable String walletTag) {
    this.walletTag = walletTag;
    return this;
  }

  /**
   * Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60; 
   * @return walletTag
   */
  @javax.annotation.Nullable
  public String getWalletTag() {
    return walletTag;
  }

  public void setWalletTag(@javax.annotation.Nullable String walletTag) {
    this.walletTag = walletTag;
  }


  public PutWalletRequest eventName(@javax.annotation.Nullable String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * The name of the Wallet.
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nullable String eventName) {
    this.eventName = eventName;
  }


  public PutWalletRequest eventMessage(@javax.annotation.Nullable String eventMessage) {
    this.eventMessage = eventMessage;
    return this;
  }

  /**
   * Can be used to describe the Wallet.
   * @return eventMessage
   */
  @javax.annotation.Nullable
  public String getEventMessage() {
    return eventMessage;
  }

  public void setEventMessage(@javax.annotation.Nullable String eventMessage) {
    this.eventMessage = eventMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutWalletRequest putWalletRequest = (PutWalletRequest) o;
    return Objects.equals(this.tariffId, putWalletRequest.tariffId) &&
        Objects.equals(this.walletTypeId, putWalletRequest.walletTypeId) &&
        Objects.equals(this.walletTag, putWalletRequest.walletTag) &&
        Objects.equals(this.eventName, putWalletRequest.eventName) &&
        Objects.equals(this.eventMessage, putWalletRequest.eventMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tariffId, walletTypeId, walletTag, eventName, eventMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutWalletRequest {\n");
    sb.append("    tariffId: ").append(toIndentedString(tariffId)).append("\n");
    sb.append("    walletTypeId: ").append(toIndentedString(walletTypeId)).append("\n");
    sb.append("    walletTag: ").append(toIndentedString(walletTag)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventMessage: ").append(toIndentedString(eventMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tariffId");
    openapiFields.add("walletTypeId");
    openapiFields.add("walletTag");
    openapiFields.add("eventName");
    openapiFields.add("eventMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutWalletRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutWalletRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutWalletRequest is not found in the empty JSON string", PutWalletRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutWalletRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutWalletRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `walletTypeId`
      if (jsonObj.get("walletTypeId") != null && !jsonObj.get("walletTypeId").isJsonNull()) {
        WalletTypeIdEnum.validateJsonElement(jsonObj.get("walletTypeId"));
      }
      if ((jsonObj.get("walletTag") != null && !jsonObj.get("walletTag").isJsonNull()) && !jsonObj.get("walletTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletTag").toString()));
      }
      if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) && !jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("eventMessage") != null && !jsonObj.get("eventMessage").isJsonNull()) && !jsonObj.get("eventMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutWalletRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutWalletRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutWalletRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutWalletRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutWalletRequest>() {
           @Override
           public void write(JsonWriter out, PutWalletRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutWalletRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutWalletRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutWalletRequest
   * @throws IOException if the JSON string is invalid with respect to PutWalletRequest
   */
  public static PutWalletRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutWalletRequest.class);
  }

  /**
   * Convert an instance of PutWalletRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

