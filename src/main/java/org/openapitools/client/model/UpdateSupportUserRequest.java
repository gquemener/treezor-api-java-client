/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSupportUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class UpdateSupportUserRequest {
  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    READ_ALL("read_all"),
    
    READ_WRITE("read_write"),
    
    READ_ONLY("read_only"),
    
    ADMIN("admin"),
    
    SUPPORT_USER_MANAGEMENT("support_user_management"),
    
    LEGAL("legal");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nullable
  private List<ScopeEnum> scope = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAML_KEY = "samlKey";
  @SerializedName(SERIALIZED_NAME_SAML_KEY)
  @javax.annotation.Nullable
  private String samlKey;

  public UpdateSupportUserRequest() {
  }

  public UpdateSupportUserRequest username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * The identifier the user will use for logging in to the Dashboard or your own backoffice.  We strongly recommend not to change the username once set (you won&#39;t be able to do it from the Dashboard). 
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public UpdateSupportUserRequest password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * The password the user will use for logging in to the Dashboard or your own backoffice. Expected in cleartext.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public UpdateSupportUserRequest scope(@javax.annotation.Nullable List<ScopeEnum> scope) {
    this.scope = scope;
    return this;
  }

  public UpdateSupportUserRequest addScopeItem(ScopeEnum scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<>();
    }
    this.scope.add(scopeItem);
    return this;
  }

  /**
   * Set of permissions for your Support User. Learn more in the [Scope &amp; Permissions](/guide/api-basics/scopes) article. 
   * @return scope
   */
  @javax.annotation.Nullable
  public List<ScopeEnum> getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nullable List<ScopeEnum> scope) {
    this.scope = scope;
  }


  public UpdateSupportUserRequest samlKey(@javax.annotation.Nullable String samlKey) {
    this.samlKey = samlKey;
    return this;
  }

  /**
   * Optional key to link automatically a Support User to a [Dashboard](/guide/dashboard/introduction) OAuth2 client. 
   * @return samlKey
   */
  @javax.annotation.Nullable
  public String getSamlKey() {
    return samlKey;
  }

  public void setSamlKey(@javax.annotation.Nullable String samlKey) {
    this.samlKey = samlKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSupportUserRequest updateSupportUserRequest = (UpdateSupportUserRequest) o;
    return Objects.equals(this.username, updateSupportUserRequest.username) &&
        Objects.equals(this.password, updateSupportUserRequest.password) &&
        Objects.equals(this.scope, updateSupportUserRequest.scope) &&
        Objects.equals(this.samlKey, updateSupportUserRequest.samlKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, scope, samlKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSupportUserRequest {\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    samlKey: ").append(toIndentedString(samlKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("scope");
    openapiFields.add("samlKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSupportUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSupportUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSupportUserRequest is not found in the empty JSON string", UpdateSupportUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSupportUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSupportUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull() && !jsonObj.get("scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be an array in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("samlKey") != null && !jsonObj.get("samlKey").isJsonNull()) && !jsonObj.get("samlKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samlKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samlKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSupportUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSupportUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSupportUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSupportUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSupportUserRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSupportUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSupportUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSupportUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSupportUserRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSupportUserRequest
   */
  public static UpdateSupportUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSupportUserRequest.class);
  }

  /**
   * Convert an instance of UpdateSupportUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

