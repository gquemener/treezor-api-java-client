/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TavRequestPOSTRequestAdditionnalData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TavRequestPOSTRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class TavRequestPOSTRequest {
  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  @javax.annotation.Nonnull
  private Integer cardId;

  /**
   * The Token Requestor also named wallet provider.
   */
  @JsonAdapter(TokenRequestorEnum.Adapter.class)
  public enum TokenRequestorEnum {
    APPLE("APPLE"),
    
    SAMSUNG("SAMSUNG"),
    
    GOOGLE("GOOGLE");

    private String value;

    TokenRequestorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenRequestorEnum fromValue(String value) {
      for (TokenRequestorEnum b : TokenRequestorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TokenRequestorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenRequestorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenRequestorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TokenRequestorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TokenRequestorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOKEN_REQUESTOR = "tokenRequestor";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTOR)
  @javax.annotation.Nonnull
  private TokenRequestorEnum tokenRequestor;

  public static final String SERIALIZED_NAME_ADDITIONNAL_DATA = "additionnalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONNAL_DATA)
  @javax.annotation.Nullable
  private TavRequestPOSTRequestAdditionnalData additionnalData;

  public TavRequestPOSTRequest() {
  }

  public TavRequestPOSTRequest cardId(@javax.annotation.Nonnull Integer cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The id of the card on which to create an issuerInitiatedDigitizationData request 
   * @return cardId
   */
  @javax.annotation.Nonnull
  public Integer getCardId() {
    return cardId;
  }

  public void setCardId(@javax.annotation.Nonnull Integer cardId) {
    this.cardId = cardId;
  }


  public TavRequestPOSTRequest tokenRequestor(@javax.annotation.Nonnull TokenRequestorEnum tokenRequestor) {
    this.tokenRequestor = tokenRequestor;
    return this;
  }

  /**
   * The Token Requestor also named wallet provider.
   * @return tokenRequestor
   */
  @javax.annotation.Nonnull
  public TokenRequestorEnum getTokenRequestor() {
    return tokenRequestor;
  }

  public void setTokenRequestor(@javax.annotation.Nonnull TokenRequestorEnum tokenRequestor) {
    this.tokenRequestor = tokenRequestor;
  }


  public TavRequestPOSTRequest additionnalData(@javax.annotation.Nullable TavRequestPOSTRequestAdditionnalData additionnalData) {
    this.additionnalData = additionnalData;
    return this;
  }

  /**
   * Get additionnalData
   * @return additionnalData
   */
  @javax.annotation.Nullable
  public TavRequestPOSTRequestAdditionnalData getAdditionnalData() {
    return additionnalData;
  }

  public void setAdditionnalData(@javax.annotation.Nullable TavRequestPOSTRequestAdditionnalData additionnalData) {
    this.additionnalData = additionnalData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TavRequestPOSTRequest tavRequestPOSTRequest = (TavRequestPOSTRequest) o;
    return Objects.equals(this.cardId, tavRequestPOSTRequest.cardId) &&
        Objects.equals(this.tokenRequestor, tavRequestPOSTRequest.tokenRequestor) &&
        Objects.equals(this.additionnalData, tavRequestPOSTRequest.additionnalData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, tokenRequestor, additionnalData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TavRequestPOSTRequest {\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    tokenRequestor: ").append(toIndentedString(tokenRequestor)).append("\n");
    sb.append("    additionnalData: ").append(toIndentedString(additionnalData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardId");
    openapiFields.add("tokenRequestor");
    openapiFields.add("additionnalData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cardId");
    openapiRequiredFields.add("tokenRequestor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TavRequestPOSTRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TavRequestPOSTRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TavRequestPOSTRequest is not found in the empty JSON string", TavRequestPOSTRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TavRequestPOSTRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TavRequestPOSTRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TavRequestPOSTRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("tokenRequestor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenRequestor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenRequestor").toString()));
      }
      // validate the required field `tokenRequestor`
      TokenRequestorEnum.validateJsonElement(jsonObj.get("tokenRequestor"));
      // validate the optional field `additionnalData`
      if (jsonObj.get("additionnalData") != null && !jsonObj.get("additionnalData").isJsonNull()) {
        TavRequestPOSTRequestAdditionnalData.validateJsonElement(jsonObj.get("additionnalData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TavRequestPOSTRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TavRequestPOSTRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TavRequestPOSTRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TavRequestPOSTRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TavRequestPOSTRequest>() {
           @Override
           public void write(JsonWriter out, TavRequestPOSTRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TavRequestPOSTRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TavRequestPOSTRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TavRequestPOSTRequest
   * @throws IOException if the JSON string is invalid with respect to TavRequestPOSTRequest
   */
  public static TavRequestPOSTRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TavRequestPOSTRequest.class);
  }

  /**
   * Convert an instance of TavRequestPOSTRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

