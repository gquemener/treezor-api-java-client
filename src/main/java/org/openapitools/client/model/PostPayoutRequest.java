/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPayoutRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostPayoutRequest {
  public static final String SERIALIZED_NAME_PAYOUT_TAG = "payoutTag";
  @SerializedName(SERIALIZED_NAME_PAYOUT_TAG)
  @javax.annotation.Nullable
  private Integer payoutTag;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nonnull
  private Integer walletId;

  /**
   * Type of payout among the following: * &#x60;1&#x60; for SEPA Credit Transfer (default) * &#x60;2&#x60; for SEPA Direct Debit * &#x60;3&#x60; for SEPA Instant Credit Transfer 
   */
  @JsonAdapter(PayoutTypeIdEnum.Adapter.class)
  public enum PayoutTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    PayoutTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayoutTypeIdEnum fromValue(Integer value) {
      for (PayoutTypeIdEnum b : PayoutTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayoutTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayoutTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayoutTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PayoutTypeIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PayoutTypeIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYOUT_TYPE_ID = "payoutTypeId";
  @SerializedName(SERIALIZED_NAME_PAYOUT_TYPE_ID)
  @javax.annotation.Nullable
  private PayoutTypeIdEnum payoutTypeId;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bankAccountId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  @javax.annotation.Nullable
  private Integer bankAccountId;

  public static final String SERIALIZED_NAME_BENEFICIARY_ID = "beneficiaryId";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ID)
  @javax.annotation.Nonnull
  private Integer beneficiaryId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_END_TO_END_ID = "endToEndId";
  @SerializedName(SERIALIZED_NAME_END_TO_END_ID)
  @javax.annotation.Nullable
  private String endToEndId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private Float amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_SUPPORT_FILE_LINK = "supportFileLink";
  @SerializedName(SERIALIZED_NAME_SUPPORT_FILE_LINK)
  @javax.annotation.Nullable
  private String supportFileLink;

  public PostPayoutRequest() {
  }

  public PostPayoutRequest payoutTag(@javax.annotation.Nullable Integer payoutTag) {
    this.payoutTag = payoutTag;
    return this;
  }

  /**
   * Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. 
   * @return payoutTag
   */
  @javax.annotation.Nullable
  public Integer getPayoutTag() {
    return payoutTag;
  }

  public void setPayoutTag(@javax.annotation.Nullable Integer payoutTag) {
    this.payoutTag = payoutTag;
  }


  public PostPayoutRequest walletId(@javax.annotation.Nonnull Integer walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * The unique identifier of the debited Wallet.
   * @return walletId
   */
  @javax.annotation.Nonnull
  public Integer getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nonnull Integer walletId) {
    this.walletId = walletId;
  }


  public PostPayoutRequest payoutTypeId(@javax.annotation.Nullable PayoutTypeIdEnum payoutTypeId) {
    this.payoutTypeId = payoutTypeId;
    return this;
  }

  /**
   * Type of payout among the following: * &#x60;1&#x60; for SEPA Credit Transfer (default) * &#x60;2&#x60; for SEPA Direct Debit * &#x60;3&#x60; for SEPA Instant Credit Transfer 
   * @return payoutTypeId
   */
  @javax.annotation.Nullable
  public PayoutTypeIdEnum getPayoutTypeId() {
    return payoutTypeId;
  }

  public void setPayoutTypeId(@javax.annotation.Nullable PayoutTypeIdEnum payoutTypeId) {
    this.payoutTypeId = payoutTypeId;
  }


  @Deprecated
  public PostPayoutRequest bankAccountId(@javax.annotation.Nullable Integer bankAccountId) {
    this.bankAccountId = bankAccountId;
    return this;
  }

  /**
   * DEPRECATED - Do not use this field as it is deprecated. Please use &#x60;beneficiaryId&#x60; instead.
   * @return bankAccountId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getBankAccountId() {
    return bankAccountId;
  }

  @Deprecated
  public void setBankAccountId(@javax.annotation.Nullable Integer bankAccountId) {
    this.bankAccountId = bankAccountId;
  }


  public PostPayoutRequest beneficiaryId(@javax.annotation.Nonnull Integer beneficiaryId) {
    this.beneficiaryId = beneficiaryId;
    return this;
  }

  /**
   * The unique identifier of the payout Beneficiary.
   * @return beneficiaryId
   */
  @javax.annotation.Nonnull
  public Integer getBeneficiaryId() {
    return beneficiaryId;
  }

  public void setBeneficiaryId(@javax.annotation.Nonnull Integer beneficiaryId) {
    this.beneficiaryId = beneficiaryId;
  }


  public PostPayoutRequest label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * The payout label that will be displayed on the receiver&#39;s bank account. &lt;br&gt; Max length: 140 characters. * Allowed characters: &#x60;a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 / - ? : ( ) . , &#39; + Space“.&#x60;  * Accentuated characters will be replaced by the same characters without accent  * &#x60;/n&#x60; character are removed * Must not start or end with &#x60;/&#x60; * Must not contain &#x60;//&#x60; 
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public PostPayoutRequest endToEndId(@javax.annotation.Nullable String endToEndId) {
    this.endToEndId = endToEndId;
    return this;
  }

  /**
   * Unique identification assigned by the final client to unumbiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Length is 35 chars max * Allowed characters: &#x60;a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 / - ? : ( ) . , &#39; + Space“.&#x60;  * Accentuated characters will be replaced by the same characters without accent  * &#x60;/n&#x60; character are removed * Must not start or end with &#x60;/&#x60; * Must not contain &#x60;//&#x60; 
   * @return endToEndId
   */
  @javax.annotation.Nullable
  public String getEndToEndId() {
    return endToEndId;
  }

  public void setEndToEndId(@javax.annotation.Nullable String endToEndId) {
    this.endToEndId = endToEndId;
  }


  public PostPayoutRequest amount(@javax.annotation.Nonnull Float amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payout. * Must be greater than &#x60;0&#x60;.  * Must be specified as a float with two decimals.   For example &#x60;180.99&#x60; for 180,99 euros and &#x60;120.00&#x60; for 120 euros.  
   * @return amount
   */
  @javax.annotation.Nonnull
  public Float getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull Float amount) {
    this.amount = amount;
  }


  public PostPayoutRequest currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency of the transfer amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies). 
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public PostPayoutRequest supportFileLink(@javax.annotation.Nullable String supportFileLink) {
    this.supportFileLink = supportFileLink;
    return this;
  }

  /**
   * The link of the support file.
   * @return supportFileLink
   */
  @javax.annotation.Nullable
  public String getSupportFileLink() {
    return supportFileLink;
  }

  public void setSupportFileLink(@javax.annotation.Nullable String supportFileLink) {
    this.supportFileLink = supportFileLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPayoutRequest postPayoutRequest = (PostPayoutRequest) o;
    return Objects.equals(this.payoutTag, postPayoutRequest.payoutTag) &&
        Objects.equals(this.walletId, postPayoutRequest.walletId) &&
        Objects.equals(this.payoutTypeId, postPayoutRequest.payoutTypeId) &&
        Objects.equals(this.bankAccountId, postPayoutRequest.bankAccountId) &&
        Objects.equals(this.beneficiaryId, postPayoutRequest.beneficiaryId) &&
        Objects.equals(this.label, postPayoutRequest.label) &&
        Objects.equals(this.endToEndId, postPayoutRequest.endToEndId) &&
        Objects.equals(this.amount, postPayoutRequest.amount) &&
        Objects.equals(this.currency, postPayoutRequest.currency) &&
        Objects.equals(this.supportFileLink, postPayoutRequest.supportFileLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payoutTag, walletId, payoutTypeId, bankAccountId, beneficiaryId, label, endToEndId, amount, currency, supportFileLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPayoutRequest {\n");
    sb.append("    payoutTag: ").append(toIndentedString(payoutTag)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    payoutTypeId: ").append(toIndentedString(payoutTypeId)).append("\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    beneficiaryId: ").append(toIndentedString(beneficiaryId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    endToEndId: ").append(toIndentedString(endToEndId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    supportFileLink: ").append(toIndentedString(supportFileLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payoutTag");
    openapiFields.add("walletId");
    openapiFields.add("payoutTypeId");
    openapiFields.add("bankAccountId");
    openapiFields.add("beneficiaryId");
    openapiFields.add("label");
    openapiFields.add("endToEndId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("supportFileLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("walletId");
    openapiRequiredFields.add("beneficiaryId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPayoutRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPayoutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPayoutRequest is not found in the empty JSON string", PostPayoutRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPayoutRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPayoutRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPayoutRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `payoutTypeId`
      if (jsonObj.get("payoutTypeId") != null && !jsonObj.get("payoutTypeId").isJsonNull()) {
        PayoutTypeIdEnum.validateJsonElement(jsonObj.get("payoutTypeId"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("endToEndId") != null && !jsonObj.get("endToEndId").isJsonNull()) && !jsonObj.get("endToEndId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endToEndId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endToEndId").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("supportFileLink") != null && !jsonObj.get("supportFileLink").isJsonNull()) && !jsonObj.get("supportFileLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportFileLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportFileLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPayoutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPayoutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPayoutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPayoutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPayoutRequest>() {
           @Override
           public void write(JsonWriter out, PostPayoutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPayoutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPayoutRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPayoutRequest
   * @throws IOException if the JSON string is invalid with respect to PostPayoutRequest
   */
  public static PostPayoutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPayoutRequest.class);
  }

  /**
   * Convert an instance of PostPayoutRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

