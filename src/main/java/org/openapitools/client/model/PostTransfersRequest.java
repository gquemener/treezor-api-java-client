/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostTransfersRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostTransfersRequest {
  public static final String SERIALIZED_NAME_TRANSFER_TAG = "transferTag";
  @SerializedName(SERIALIZED_NAME_TRANSFER_TAG)
  @javax.annotation.Nullable
  private String transferTag;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nonnull
  private Integer walletId;

  public static final String SERIALIZED_NAME_BENEFICIARY_WALLET_ID = "beneficiaryWalletId";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_WALLET_ID)
  @javax.annotation.Nonnull
  private Integer beneficiaryWalletId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private Float amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_TRANSFER_TYPE_ID = "transferTypeId";
  @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE_ID)
  @javax.annotation.Nullable
  private Integer transferTypeId;

  public PostTransfersRequest() {
  }

  public PostTransfersRequest transferTag(@javax.annotation.Nullable String transferTag) {
    this.transferTag = transferTag;
    return this;
  }

  /**
   * Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60; 
   * @return transferTag
   */
  @javax.annotation.Nullable
  public String getTransferTag() {
    return transferTag;
  }

  public void setTransferTag(@javax.annotation.Nullable String transferTag) {
    this.transferTag = transferTag;
  }


  public PostTransfersRequest walletId(@javax.annotation.Nonnull Integer walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * The debited Wallet unique identifier.
   * @return walletId
   */
  @javax.annotation.Nonnull
  public Integer getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nonnull Integer walletId) {
    this.walletId = walletId;
  }


  public PostTransfersRequest beneficiaryWalletId(@javax.annotation.Nonnull Integer beneficiaryWalletId) {
    this.beneficiaryWalletId = beneficiaryWalletId;
    return this;
  }

  /**
   * The credited Wallet unique identifier.
   * @return beneficiaryWalletId
   */
  @javax.annotation.Nonnull
  public Integer getBeneficiaryWalletId() {
    return beneficiaryWalletId;
  }

  public void setBeneficiaryWalletId(@javax.annotation.Nonnull Integer beneficiaryWalletId) {
    this.beneficiaryWalletId = beneficiaryWalletId;
  }


  public PostTransfersRequest amount(@javax.annotation.Nonnull Float amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the Transfer.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Float getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull Float amount) {
    this.amount = amount;
  }


  public PostTransfersRequest currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency of the Transfer. Debited wallet and credited wallet must share same currency.  Format: [ISO 4217](/guide/api-basics/data-format.html#currencies). 
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public PostTransfersRequest label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Custom data.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public PostTransfersRequest transferTypeId(@javax.annotation.Nullable Integer transferTypeId) {
    this.transferTypeId = transferTypeId;
    return this;
  }

  /**
   * The type of the Transfer: * &#x60;1&#x60; – Wallet to wallet  * &#x60;3&#x60; – Client fees * &#x60;4&#x60; – Credit note 
   * @return transferTypeId
   */
  @javax.annotation.Nullable
  public Integer getTransferTypeId() {
    return transferTypeId;
  }

  public void setTransferTypeId(@javax.annotation.Nullable Integer transferTypeId) {
    this.transferTypeId = transferTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostTransfersRequest postTransfersRequest = (PostTransfersRequest) o;
    return Objects.equals(this.transferTag, postTransfersRequest.transferTag) &&
        Objects.equals(this.walletId, postTransfersRequest.walletId) &&
        Objects.equals(this.beneficiaryWalletId, postTransfersRequest.beneficiaryWalletId) &&
        Objects.equals(this.amount, postTransfersRequest.amount) &&
        Objects.equals(this.currency, postTransfersRequest.currency) &&
        Objects.equals(this.label, postTransfersRequest.label) &&
        Objects.equals(this.transferTypeId, postTransfersRequest.transferTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transferTag, walletId, beneficiaryWalletId, amount, currency, label, transferTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostTransfersRequest {\n");
    sb.append("    transferTag: ").append(toIndentedString(transferTag)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    beneficiaryWalletId: ").append(toIndentedString(beneficiaryWalletId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    transferTypeId: ").append(toIndentedString(transferTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transferTag");
    openapiFields.add("walletId");
    openapiFields.add("beneficiaryWalletId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("label");
    openapiFields.add("transferTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("walletId");
    openapiRequiredFields.add("beneficiaryWalletId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostTransfersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostTransfersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostTransfersRequest is not found in the empty JSON string", PostTransfersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostTransfersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostTransfersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostTransfersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transferTag") != null && !jsonObj.get("transferTag").isJsonNull()) && !jsonObj.get("transferTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferTag").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostTransfersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostTransfersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostTransfersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostTransfersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostTransfersRequest>() {
           @Override
           public void write(JsonWriter out, PostTransfersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostTransfersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostTransfersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostTransfersRequest
   * @throws IOException if the JSON string is invalid with respect to PostTransfersRequest
   */
  public static PostTransfersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostTransfersRequest.class);
  }

  /**
   * Convert an instance of PostTransfersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

