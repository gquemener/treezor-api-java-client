/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MandateObjectMandatesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class MandateObjectMandatesInner {
  public static final String SERIALIZED_NAME_MANDATE_ID = "mandateId";
  @SerializedName(SERIALIZED_NAME_MANDATE_ID)
  @javax.annotation.Nullable
  private Integer mandateId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_LEGAL_INFORMATIONS = "legalInformations";
  @SerializedName(SERIALIZED_NAME_LEGAL_INFORMATIONS)
  @javax.annotation.Nullable
  private String legalInformations;

  public static final String SERIALIZED_NAME_UNIQUE_MANDATE_REFERENCE = "uniqueMandateReference";
  @SerializedName(SERIALIZED_NAME_UNIQUE_MANDATE_REFERENCE)
  @javax.annotation.Nullable
  private String uniqueMandateReference;

  /**
   * Gets or Sets mandateStatus
   */
  @JsonAdapter(MandateStatusEnum.Adapter.class)
  public enum MandateStatusEnum {
    PENDING("PENDING"),
    
    CANCELED("CANCELED"),
    
    VALIDATED("VALIDATED");

    private String value;

    MandateStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MandateStatusEnum fromValue(String value) {
      for (MandateStatusEnum b : MandateStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MandateStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MandateStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MandateStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MandateStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MandateStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANDATE_STATUS = "mandateStatus";
  @SerializedName(SERIALIZED_NAME_MANDATE_STATUS)
  @javax.annotation.Nullable
  private MandateStatusEnum mandateStatus;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private Integer userId;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtorName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  @javax.annotation.Nullable
  private String debtorName;

  public static final String SERIALIZED_NAME_DEBTOR_ADDRESS = "debtorAddress";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ADDRESS)
  @javax.annotation.Nullable
  private String debtorAddress;

  public static final String SERIALIZED_NAME_DEBTOR_CITY = "debtorCity";
  @SerializedName(SERIALIZED_NAME_DEBTOR_CITY)
  @javax.annotation.Nullable
  private String debtorCity;

  public static final String SERIALIZED_NAME_DEBTOR_ZIP_CODE = "debtorZipCode";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ZIP_CODE)
  @javax.annotation.Nullable
  private String debtorZipCode;

  public static final String SERIALIZED_NAME_DEBTOR_COUNTRY = "debtorCountry";
  @SerializedName(SERIALIZED_NAME_DEBTOR_COUNTRY)
  @javax.annotation.Nullable
  private String debtorCountry;

  public static final String SERIALIZED_NAME_DEBTOR_IBAN = "debtorIban";
  @SerializedName(SERIALIZED_NAME_DEBTOR_IBAN)
  @javax.annotation.Nullable
  private String debtorIban;

  public static final String SERIALIZED_NAME_DEBTOR_BIC = "debtorBic";
  @SerializedName(SERIALIZED_NAME_DEBTOR_BIC)
  @javax.annotation.Nullable
  private String debtorBic;

  /**
   * Defines whether or not the debtor will be debited multiple times. Can be one of the following: * &#x60;one-off&#x60; – For a one-time payment. * &#x60;recurrent&#x60; – For recurring payments. 
   */
  @JsonAdapter(SequenceTypeEnum.Adapter.class)
  public enum SequenceTypeEnum {
    ONE_OFF("one-off"),
    
    RECURRENT("recurrent");

    private String value;

    SequenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SequenceTypeEnum fromValue(String value) {
      for (SequenceTypeEnum b : SequenceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SequenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SequenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SequenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SequenceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SequenceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEQUENCE_TYPE = "sequenceType";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_TYPE)
  @javax.annotation.Nullable
  private SequenceTypeEnum sequenceType;

  public static final String SERIALIZED_NAME_CREDITOR_NAME = "creditorName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME)
  @javax.annotation.Nullable
  private String creditorName;

  public static final String SERIALIZED_NAME_SEPA_CREDITOR_IDENTIFIER = "sepaCreditorIdentifier";
  @SerializedName(SERIALIZED_NAME_SEPA_CREDITOR_IDENTIFIER)
  @javax.annotation.Nullable
  private String sepaCreditorIdentifier;

  public static final String SERIALIZED_NAME_CREDITOR_ADDRESS = "creditorAddress";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ADDRESS)
  @javax.annotation.Nullable
  private String creditorAddress;

  public static final String SERIALIZED_NAME_CREDITOR_CITY = "creditorCity";
  @SerializedName(SERIALIZED_NAME_CREDITOR_CITY)
  @javax.annotation.Nullable
  private String creditorCity;

  public static final String SERIALIZED_NAME_CREDITOR_ZIP_CODE = "creditorZipCode";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ZIP_CODE)
  @javax.annotation.Nullable
  private String creditorZipCode;

  public static final String SERIALIZED_NAME_CREDITOR_COUNTRY = "creditorCountry";
  @SerializedName(SERIALIZED_NAME_CREDITOR_COUNTRY)
  @javax.annotation.Nullable
  private String creditorCountry;

  public static final String SERIALIZED_NAME_SIGNATURE_DATE = "signatureDate";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_DATE)
  @javax.annotation.Nullable
  private LocalDate signatureDate;

  public static final String SERIALIZED_NAME_DEBTOR_SIGNATURE_IP = "debtorSignatureIp";
  @SerializedName(SERIALIZED_NAME_DEBTOR_SIGNATURE_IP)
  @javax.annotation.Nullable
  private String debtorSignatureIp;

  public static final String SERIALIZED_NAME_SIGNED = "signed";
  @SerializedName(SERIALIZED_NAME_SIGNED)
  @javax.annotation.Nullable
  private Integer signed;

  public static final String SERIALIZED_NAME_DEBTOR_IDENTIFICATION_CODE = "debtorIdentificationCode";
  @SerializedName(SERIALIZED_NAME_DEBTOR_IDENTIFICATION_CODE)
  @javax.annotation.Nullable
  private String debtorIdentificationCode;

  public static final String SERIALIZED_NAME_DEBTOR_REFERENCE_PARTY_NAME = "debtorReferencePartyName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_REFERENCE_PARTY_NAME)
  @javax.annotation.Nullable
  private String debtorReferencePartyName;

  public static final String SERIALIZED_NAME_DEBTOR_REFERENCE_IDENTIFICATION_CODE = "debtorReferenceIdentificationCode";
  @SerializedName(SERIALIZED_NAME_DEBTOR_REFERENCE_IDENTIFICATION_CODE)
  @javax.annotation.Nullable
  private String debtorReferenceIdentificationCode;

  public static final String SERIALIZED_NAME_CREDITOR_REFERENCE_PARTY_NAME = "creditorReferencePartyName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_REFERENCE_PARTY_NAME)
  @javax.annotation.Nullable
  private String creditorReferencePartyName;

  public static final String SERIALIZED_NAME_CREDITOR_REFERENCE_IDENTIFICATION_CODE = "creditorReferenceIdentificationCode";
  @SerializedName(SERIALIZED_NAME_CREDITOR_REFERENCE_IDENTIFICATION_CODE)
  @javax.annotation.Nullable
  private String creditorReferenceIdentificationCode;

  public static final String SERIALIZED_NAME_CONTRACT_IDENTIFICATION_NUMBER = "contractIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_CONTRACT_IDENTIFICATION_NUMBER)
  @javax.annotation.Nullable
  private String contractIdentificationNumber;

  public static final String SERIALIZED_NAME_CONTRACT_DESCRIPTION = "contractDescription";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DESCRIPTION)
  @javax.annotation.Nullable
  private String contractDescription;

  public static final String SERIALIZED_NAME_IS_PAPER = "isPaper";
  @SerializedName(SERIALIZED_NAME_IS_PAPER)
  @javax.annotation.Nullable
  private Boolean isPaper;

  /**
   * Gets or Sets sddType
   */
  @JsonAdapter(SddTypeEnum.Adapter.class)
  public enum SddTypeEnum {
    CORE("core"),
    
    B2B("b2b");

    private String value;

    SddTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SddTypeEnum fromValue(String value) {
      for (SddTypeEnum b : SddTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SddTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SddTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SddTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SddTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SddTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SDD_TYPE = "sddType";
  @SerializedName(SERIALIZED_NAME_SDD_TYPE)
  @javax.annotation.Nullable
  private SddTypeEnum sddType;

  public static final String SERIALIZED_NAME_REVOCATION_SIGNATURE_DATE = "revocationSignatureDate";
  @SerializedName(SERIALIZED_NAME_REVOCATION_SIGNATURE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime revocationSignatureDate;

  public static final String SERIALIZED_NAME_CREATED_IP = "createdIp";
  @SerializedName(SERIALIZED_NAME_CREATED_IP)
  @javax.annotation.Nullable
  private String createdIp;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDate;

  public MandateObjectMandatesInner() {
  }

  public MandateObjectMandatesInner mandateId(@javax.annotation.Nullable Integer mandateId) {
    this.mandateId = mandateId;
    return this;
  }

  /**
   * The unique identifier of the Mandate.
   * @return mandateId
   */
  @javax.annotation.Nullable
  public Integer getMandateId() {
    return mandateId;
  }

  public void setMandateId(@javax.annotation.Nullable Integer mandateId) {
    this.mandateId = mandateId;
  }


  public MandateObjectMandatesInner title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public MandateObjectMandatesInner legalInformations(@javax.annotation.Nullable String legalInformations) {
    this.legalInformations = legalInformations;
    return this;
  }

  /**
   * Get legalInformations
   * @return legalInformations
   */
  @javax.annotation.Nullable
  public String getLegalInformations() {
    return legalInformations;
  }

  public void setLegalInformations(@javax.annotation.Nullable String legalInformations) {
    this.legalInformations = legalInformations;
  }


  public MandateObjectMandatesInner uniqueMandateReference(@javax.annotation.Nullable String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
    return this;
  }

  /**
   * Get uniqueMandateReference
   * @return uniqueMandateReference
   */
  @javax.annotation.Nullable
  public String getUniqueMandateReference() {
    return uniqueMandateReference;
  }

  public void setUniqueMandateReference(@javax.annotation.Nullable String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
  }


  public MandateObjectMandatesInner mandateStatus(@javax.annotation.Nullable MandateStatusEnum mandateStatus) {
    this.mandateStatus = mandateStatus;
    return this;
  }

  /**
   * Get mandateStatus
   * @return mandateStatus
   */
  @javax.annotation.Nullable
  public MandateStatusEnum getMandateStatus() {
    return mandateStatus;
  }

  public void setMandateStatus(@javax.annotation.Nullable MandateStatusEnum mandateStatus) {
    this.mandateStatus = mandateStatus;
  }


  public MandateObjectMandatesInner userId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the User.
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
  }


  public MandateObjectMandatesInner debtorName(@javax.annotation.Nullable String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * Get debtorName
   * @return debtorName
   */
  @javax.annotation.Nullable
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(@javax.annotation.Nullable String debtorName) {
    this.debtorName = debtorName;
  }


  public MandateObjectMandatesInner debtorAddress(@javax.annotation.Nullable String debtorAddress) {
    this.debtorAddress = debtorAddress;
    return this;
  }

  /**
   * Get debtorAddress
   * @return debtorAddress
   */
  @javax.annotation.Nullable
  public String getDebtorAddress() {
    return debtorAddress;
  }

  public void setDebtorAddress(@javax.annotation.Nullable String debtorAddress) {
    this.debtorAddress = debtorAddress;
  }


  public MandateObjectMandatesInner debtorCity(@javax.annotation.Nullable String debtorCity) {
    this.debtorCity = debtorCity;
    return this;
  }

  /**
   * Get debtorCity
   * @return debtorCity
   */
  @javax.annotation.Nullable
  public String getDebtorCity() {
    return debtorCity;
  }

  public void setDebtorCity(@javax.annotation.Nullable String debtorCity) {
    this.debtorCity = debtorCity;
  }


  public MandateObjectMandatesInner debtorZipCode(@javax.annotation.Nullable String debtorZipCode) {
    this.debtorZipCode = debtorZipCode;
    return this;
  }

  /**
   * Get debtorZipCode
   * @return debtorZipCode
   */
  @javax.annotation.Nullable
  public String getDebtorZipCode() {
    return debtorZipCode;
  }

  public void setDebtorZipCode(@javax.annotation.Nullable String debtorZipCode) {
    this.debtorZipCode = debtorZipCode;
  }


  public MandateObjectMandatesInner debtorCountry(@javax.annotation.Nullable String debtorCountry) {
    this.debtorCountry = debtorCountry;
    return this;
  }

  /**
   * Get debtorCountry
   * @return debtorCountry
   */
  @javax.annotation.Nullable
  public String getDebtorCountry() {
    return debtorCountry;
  }

  public void setDebtorCountry(@javax.annotation.Nullable String debtorCountry) {
    this.debtorCountry = debtorCountry;
  }


  public MandateObjectMandatesInner debtorIban(@javax.annotation.Nullable String debtorIban) {
    this.debtorIban = debtorIban;
    return this;
  }

  /**
   * Get debtorIban
   * @return debtorIban
   */
  @javax.annotation.Nullable
  public String getDebtorIban() {
    return debtorIban;
  }

  public void setDebtorIban(@javax.annotation.Nullable String debtorIban) {
    this.debtorIban = debtorIban;
  }


  public MandateObjectMandatesInner debtorBic(@javax.annotation.Nullable String debtorBic) {
    this.debtorBic = debtorBic;
    return this;
  }

  /**
   * Get debtorBic
   * @return debtorBic
   */
  @javax.annotation.Nullable
  public String getDebtorBic() {
    return debtorBic;
  }

  public void setDebtorBic(@javax.annotation.Nullable String debtorBic) {
    this.debtorBic = debtorBic;
  }


  public MandateObjectMandatesInner sequenceType(@javax.annotation.Nullable SequenceTypeEnum sequenceType) {
    this.sequenceType = sequenceType;
    return this;
  }

  /**
   * Defines whether or not the debtor will be debited multiple times. Can be one of the following: * &#x60;one-off&#x60; – For a one-time payment. * &#x60;recurrent&#x60; – For recurring payments. 
   * @return sequenceType
   */
  @javax.annotation.Nullable
  public SequenceTypeEnum getSequenceType() {
    return sequenceType;
  }

  public void setSequenceType(@javax.annotation.Nullable SequenceTypeEnum sequenceType) {
    this.sequenceType = sequenceType;
  }


  public MandateObjectMandatesInner creditorName(@javax.annotation.Nullable String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * Get creditorName
   * @return creditorName
   */
  @javax.annotation.Nullable
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(@javax.annotation.Nullable String creditorName) {
    this.creditorName = creditorName;
  }


  public MandateObjectMandatesInner sepaCreditorIdentifier(@javax.annotation.Nullable String sepaCreditorIdentifier) {
    this.sepaCreditorIdentifier = sepaCreditorIdentifier;
    return this;
  }

  /**
   * Get sepaCreditorIdentifier
   * @return sepaCreditorIdentifier
   */
  @javax.annotation.Nullable
  public String getSepaCreditorIdentifier() {
    return sepaCreditorIdentifier;
  }

  public void setSepaCreditorIdentifier(@javax.annotation.Nullable String sepaCreditorIdentifier) {
    this.sepaCreditorIdentifier = sepaCreditorIdentifier;
  }


  public MandateObjectMandatesInner creditorAddress(@javax.annotation.Nullable String creditorAddress) {
    this.creditorAddress = creditorAddress;
    return this;
  }

  /**
   * Get creditorAddress
   * @return creditorAddress
   */
  @javax.annotation.Nullable
  public String getCreditorAddress() {
    return creditorAddress;
  }

  public void setCreditorAddress(@javax.annotation.Nullable String creditorAddress) {
    this.creditorAddress = creditorAddress;
  }


  public MandateObjectMandatesInner creditorCity(@javax.annotation.Nullable String creditorCity) {
    this.creditorCity = creditorCity;
    return this;
  }

  /**
   * Get creditorCity
   * @return creditorCity
   */
  @javax.annotation.Nullable
  public String getCreditorCity() {
    return creditorCity;
  }

  public void setCreditorCity(@javax.annotation.Nullable String creditorCity) {
    this.creditorCity = creditorCity;
  }


  public MandateObjectMandatesInner creditorZipCode(@javax.annotation.Nullable String creditorZipCode) {
    this.creditorZipCode = creditorZipCode;
    return this;
  }

  /**
   * Get creditorZipCode
   * @return creditorZipCode
   */
  @javax.annotation.Nullable
  public String getCreditorZipCode() {
    return creditorZipCode;
  }

  public void setCreditorZipCode(@javax.annotation.Nullable String creditorZipCode) {
    this.creditorZipCode = creditorZipCode;
  }


  public MandateObjectMandatesInner creditorCountry(@javax.annotation.Nullable String creditorCountry) {
    this.creditorCountry = creditorCountry;
    return this;
  }

  /**
   * Get creditorCountry
   * @return creditorCountry
   */
  @javax.annotation.Nullable
  public String getCreditorCountry() {
    return creditorCountry;
  }

  public void setCreditorCountry(@javax.annotation.Nullable String creditorCountry) {
    this.creditorCountry = creditorCountry;
  }


  public MandateObjectMandatesInner signatureDate(@javax.annotation.Nullable LocalDate signatureDate) {
    this.signatureDate = signatureDate;
    return this;
  }

  /**
   * The date on which the Mandate was signed.
   * @return signatureDate
   */
  @javax.annotation.Nullable
  public LocalDate getSignatureDate() {
    return signatureDate;
  }

  public void setSignatureDate(@javax.annotation.Nullable LocalDate signatureDate) {
    this.signatureDate = signatureDate;
  }


  public MandateObjectMandatesInner debtorSignatureIp(@javax.annotation.Nullable String debtorSignatureIp) {
    this.debtorSignatureIp = debtorSignatureIp;
    return this;
  }

  /**
   * Get debtorSignatureIp
   * @return debtorSignatureIp
   */
  @javax.annotation.Nullable
  public String getDebtorSignatureIp() {
    return debtorSignatureIp;
  }

  public void setDebtorSignatureIp(@javax.annotation.Nullable String debtorSignatureIp) {
    this.debtorSignatureIp = debtorSignatureIp;
  }


  public MandateObjectMandatesInner signed(@javax.annotation.Nullable Integer signed) {
    this.signed = signed;
    return this;
  }

  /**
   * Get signed
   * @return signed
   */
  @javax.annotation.Nullable
  public Integer getSigned() {
    return signed;
  }

  public void setSigned(@javax.annotation.Nullable Integer signed) {
    this.signed = signed;
  }


  public MandateObjectMandatesInner debtorIdentificationCode(@javax.annotation.Nullable String debtorIdentificationCode) {
    this.debtorIdentificationCode = debtorIdentificationCode;
    return this;
  }

  /**
   * Get debtorIdentificationCode
   * @return debtorIdentificationCode
   */
  @javax.annotation.Nullable
  public String getDebtorIdentificationCode() {
    return debtorIdentificationCode;
  }

  public void setDebtorIdentificationCode(@javax.annotation.Nullable String debtorIdentificationCode) {
    this.debtorIdentificationCode = debtorIdentificationCode;
  }


  public MandateObjectMandatesInner debtorReferencePartyName(@javax.annotation.Nullable String debtorReferencePartyName) {
    this.debtorReferencePartyName = debtorReferencePartyName;
    return this;
  }

  /**
   * Get debtorReferencePartyName
   * @return debtorReferencePartyName
   */
  @javax.annotation.Nullable
  public String getDebtorReferencePartyName() {
    return debtorReferencePartyName;
  }

  public void setDebtorReferencePartyName(@javax.annotation.Nullable String debtorReferencePartyName) {
    this.debtorReferencePartyName = debtorReferencePartyName;
  }


  public MandateObjectMandatesInner debtorReferenceIdentificationCode(@javax.annotation.Nullable String debtorReferenceIdentificationCode) {
    this.debtorReferenceIdentificationCode = debtorReferenceIdentificationCode;
    return this;
  }

  /**
   * Get debtorReferenceIdentificationCode
   * @return debtorReferenceIdentificationCode
   */
  @javax.annotation.Nullable
  public String getDebtorReferenceIdentificationCode() {
    return debtorReferenceIdentificationCode;
  }

  public void setDebtorReferenceIdentificationCode(@javax.annotation.Nullable String debtorReferenceIdentificationCode) {
    this.debtorReferenceIdentificationCode = debtorReferenceIdentificationCode;
  }


  public MandateObjectMandatesInner creditorReferencePartyName(@javax.annotation.Nullable String creditorReferencePartyName) {
    this.creditorReferencePartyName = creditorReferencePartyName;
    return this;
  }

  /**
   * Get creditorReferencePartyName
   * @return creditorReferencePartyName
   */
  @javax.annotation.Nullable
  public String getCreditorReferencePartyName() {
    return creditorReferencePartyName;
  }

  public void setCreditorReferencePartyName(@javax.annotation.Nullable String creditorReferencePartyName) {
    this.creditorReferencePartyName = creditorReferencePartyName;
  }


  public MandateObjectMandatesInner creditorReferenceIdentificationCode(@javax.annotation.Nullable String creditorReferenceIdentificationCode) {
    this.creditorReferenceIdentificationCode = creditorReferenceIdentificationCode;
    return this;
  }

  /**
   * Get creditorReferenceIdentificationCode
   * @return creditorReferenceIdentificationCode
   */
  @javax.annotation.Nullable
  public String getCreditorReferenceIdentificationCode() {
    return creditorReferenceIdentificationCode;
  }

  public void setCreditorReferenceIdentificationCode(@javax.annotation.Nullable String creditorReferenceIdentificationCode) {
    this.creditorReferenceIdentificationCode = creditorReferenceIdentificationCode;
  }


  public MandateObjectMandatesInner contractIdentificationNumber(@javax.annotation.Nullable String contractIdentificationNumber) {
    this.contractIdentificationNumber = contractIdentificationNumber;
    return this;
  }

  /**
   * Get contractIdentificationNumber
   * @return contractIdentificationNumber
   */
  @javax.annotation.Nullable
  public String getContractIdentificationNumber() {
    return contractIdentificationNumber;
  }

  public void setContractIdentificationNumber(@javax.annotation.Nullable String contractIdentificationNumber) {
    this.contractIdentificationNumber = contractIdentificationNumber;
  }


  public MandateObjectMandatesInner contractDescription(@javax.annotation.Nullable String contractDescription) {
    this.contractDescription = contractDescription;
    return this;
  }

  /**
   * Get contractDescription
   * @return contractDescription
   */
  @javax.annotation.Nullable
  public String getContractDescription() {
    return contractDescription;
  }

  public void setContractDescription(@javax.annotation.Nullable String contractDescription) {
    this.contractDescription = contractDescription;
  }


  public MandateObjectMandatesInner isPaper(@javax.annotation.Nullable Boolean isPaper) {
    this.isPaper = isPaper;
    return this;
  }

  /**
   * Get isPaper
   * @return isPaper
   */
  @javax.annotation.Nullable
  public Boolean getIsPaper() {
    return isPaper;
  }

  public void setIsPaper(@javax.annotation.Nullable Boolean isPaper) {
    this.isPaper = isPaper;
  }


  public MandateObjectMandatesInner sddType(@javax.annotation.Nullable SddTypeEnum sddType) {
    this.sddType = sddType;
    return this;
  }

  /**
   * Get sddType
   * @return sddType
   */
  @javax.annotation.Nullable
  public SddTypeEnum getSddType() {
    return sddType;
  }

  public void setSddType(@javax.annotation.Nullable SddTypeEnum sddType) {
    this.sddType = sddType;
  }


  public MandateObjectMandatesInner revocationSignatureDate(@javax.annotation.Nullable OffsetDateTime revocationSignatureDate) {
    this.revocationSignatureDate = revocationSignatureDate;
    return this;
  }

  /**
   * Date YYYY-MM-DD HH:MM:SS
   * @return revocationSignatureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevocationSignatureDate() {
    return revocationSignatureDate;
  }

  public void setRevocationSignatureDate(@javax.annotation.Nullable OffsetDateTime revocationSignatureDate) {
    this.revocationSignatureDate = revocationSignatureDate;
  }


  public MandateObjectMandatesInner createdIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
    return this;
  }

  /**
   * Get createdIp
   * @return createdIp
   */
  @javax.annotation.Nullable
  public String getCreatedIp() {
    return createdIp;
  }

  public void setCreatedIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
  }


  public MandateObjectMandatesInner createdDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date YYYY-MM-DD HH:MM:SS
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public MandateObjectMandatesInner modifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Date YYYY-MM-DD HH:MM:SS
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MandateObjectMandatesInner mandateObjectMandatesInner = (MandateObjectMandatesInner) o;
    return Objects.equals(this.mandateId, mandateObjectMandatesInner.mandateId) &&
        Objects.equals(this.title, mandateObjectMandatesInner.title) &&
        Objects.equals(this.legalInformations, mandateObjectMandatesInner.legalInformations) &&
        Objects.equals(this.uniqueMandateReference, mandateObjectMandatesInner.uniqueMandateReference) &&
        Objects.equals(this.mandateStatus, mandateObjectMandatesInner.mandateStatus) &&
        Objects.equals(this.userId, mandateObjectMandatesInner.userId) &&
        Objects.equals(this.debtorName, mandateObjectMandatesInner.debtorName) &&
        Objects.equals(this.debtorAddress, mandateObjectMandatesInner.debtorAddress) &&
        Objects.equals(this.debtorCity, mandateObjectMandatesInner.debtorCity) &&
        Objects.equals(this.debtorZipCode, mandateObjectMandatesInner.debtorZipCode) &&
        Objects.equals(this.debtorCountry, mandateObjectMandatesInner.debtorCountry) &&
        Objects.equals(this.debtorIban, mandateObjectMandatesInner.debtorIban) &&
        Objects.equals(this.debtorBic, mandateObjectMandatesInner.debtorBic) &&
        Objects.equals(this.sequenceType, mandateObjectMandatesInner.sequenceType) &&
        Objects.equals(this.creditorName, mandateObjectMandatesInner.creditorName) &&
        Objects.equals(this.sepaCreditorIdentifier, mandateObjectMandatesInner.sepaCreditorIdentifier) &&
        Objects.equals(this.creditorAddress, mandateObjectMandatesInner.creditorAddress) &&
        Objects.equals(this.creditorCity, mandateObjectMandatesInner.creditorCity) &&
        Objects.equals(this.creditorZipCode, mandateObjectMandatesInner.creditorZipCode) &&
        Objects.equals(this.creditorCountry, mandateObjectMandatesInner.creditorCountry) &&
        Objects.equals(this.signatureDate, mandateObjectMandatesInner.signatureDate) &&
        Objects.equals(this.debtorSignatureIp, mandateObjectMandatesInner.debtorSignatureIp) &&
        Objects.equals(this.signed, mandateObjectMandatesInner.signed) &&
        Objects.equals(this.debtorIdentificationCode, mandateObjectMandatesInner.debtorIdentificationCode) &&
        Objects.equals(this.debtorReferencePartyName, mandateObjectMandatesInner.debtorReferencePartyName) &&
        Objects.equals(this.debtorReferenceIdentificationCode, mandateObjectMandatesInner.debtorReferenceIdentificationCode) &&
        Objects.equals(this.creditorReferencePartyName, mandateObjectMandatesInner.creditorReferencePartyName) &&
        Objects.equals(this.creditorReferenceIdentificationCode, mandateObjectMandatesInner.creditorReferenceIdentificationCode) &&
        Objects.equals(this.contractIdentificationNumber, mandateObjectMandatesInner.contractIdentificationNumber) &&
        Objects.equals(this.contractDescription, mandateObjectMandatesInner.contractDescription) &&
        Objects.equals(this.isPaper, mandateObjectMandatesInner.isPaper) &&
        Objects.equals(this.sddType, mandateObjectMandatesInner.sddType) &&
        Objects.equals(this.revocationSignatureDate, mandateObjectMandatesInner.revocationSignatureDate) &&
        Objects.equals(this.createdIp, mandateObjectMandatesInner.createdIp) &&
        Objects.equals(this.createdDate, mandateObjectMandatesInner.createdDate) &&
        Objects.equals(this.modifiedDate, mandateObjectMandatesInner.modifiedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mandateId, title, legalInformations, uniqueMandateReference, mandateStatus, userId, debtorName, debtorAddress, debtorCity, debtorZipCode, debtorCountry, debtorIban, debtorBic, sequenceType, creditorName, sepaCreditorIdentifier, creditorAddress, creditorCity, creditorZipCode, creditorCountry, signatureDate, debtorSignatureIp, signed, debtorIdentificationCode, debtorReferencePartyName, debtorReferenceIdentificationCode, creditorReferencePartyName, creditorReferenceIdentificationCode, contractIdentificationNumber, contractDescription, isPaper, sddType, revocationSignatureDate, createdIp, createdDate, modifiedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MandateObjectMandatesInner {\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    legalInformations: ").append(toIndentedString(legalInformations)).append("\n");
    sb.append("    uniqueMandateReference: ").append(toIndentedString(uniqueMandateReference)).append("\n");
    sb.append("    mandateStatus: ").append(toIndentedString(mandateStatus)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    debtorAddress: ").append(toIndentedString(debtorAddress)).append("\n");
    sb.append("    debtorCity: ").append(toIndentedString(debtorCity)).append("\n");
    sb.append("    debtorZipCode: ").append(toIndentedString(debtorZipCode)).append("\n");
    sb.append("    debtorCountry: ").append(toIndentedString(debtorCountry)).append("\n");
    sb.append("    debtorIban: ").append(toIndentedString(debtorIban)).append("\n");
    sb.append("    debtorBic: ").append(toIndentedString(debtorBic)).append("\n");
    sb.append("    sequenceType: ").append(toIndentedString(sequenceType)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    sepaCreditorIdentifier: ").append(toIndentedString(sepaCreditorIdentifier)).append("\n");
    sb.append("    creditorAddress: ").append(toIndentedString(creditorAddress)).append("\n");
    sb.append("    creditorCity: ").append(toIndentedString(creditorCity)).append("\n");
    sb.append("    creditorZipCode: ").append(toIndentedString(creditorZipCode)).append("\n");
    sb.append("    creditorCountry: ").append(toIndentedString(creditorCountry)).append("\n");
    sb.append("    signatureDate: ").append(toIndentedString(signatureDate)).append("\n");
    sb.append("    debtorSignatureIp: ").append(toIndentedString(debtorSignatureIp)).append("\n");
    sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
    sb.append("    debtorIdentificationCode: ").append(toIndentedString(debtorIdentificationCode)).append("\n");
    sb.append("    debtorReferencePartyName: ").append(toIndentedString(debtorReferencePartyName)).append("\n");
    sb.append("    debtorReferenceIdentificationCode: ").append(toIndentedString(debtorReferenceIdentificationCode)).append("\n");
    sb.append("    creditorReferencePartyName: ").append(toIndentedString(creditorReferencePartyName)).append("\n");
    sb.append("    creditorReferenceIdentificationCode: ").append(toIndentedString(creditorReferenceIdentificationCode)).append("\n");
    sb.append("    contractIdentificationNumber: ").append(toIndentedString(contractIdentificationNumber)).append("\n");
    sb.append("    contractDescription: ").append(toIndentedString(contractDescription)).append("\n");
    sb.append("    isPaper: ").append(toIndentedString(isPaper)).append("\n");
    sb.append("    sddType: ").append(toIndentedString(sddType)).append("\n");
    sb.append("    revocationSignatureDate: ").append(toIndentedString(revocationSignatureDate)).append("\n");
    sb.append("    createdIp: ").append(toIndentedString(createdIp)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mandateId");
    openapiFields.add("title");
    openapiFields.add("legalInformations");
    openapiFields.add("uniqueMandateReference");
    openapiFields.add("mandateStatus");
    openapiFields.add("userId");
    openapiFields.add("debtorName");
    openapiFields.add("debtorAddress");
    openapiFields.add("debtorCity");
    openapiFields.add("debtorZipCode");
    openapiFields.add("debtorCountry");
    openapiFields.add("debtorIban");
    openapiFields.add("debtorBic");
    openapiFields.add("sequenceType");
    openapiFields.add("creditorName");
    openapiFields.add("sepaCreditorIdentifier");
    openapiFields.add("creditorAddress");
    openapiFields.add("creditorCity");
    openapiFields.add("creditorZipCode");
    openapiFields.add("creditorCountry");
    openapiFields.add("signatureDate");
    openapiFields.add("debtorSignatureIp");
    openapiFields.add("signed");
    openapiFields.add("debtorIdentificationCode");
    openapiFields.add("debtorReferencePartyName");
    openapiFields.add("debtorReferenceIdentificationCode");
    openapiFields.add("creditorReferencePartyName");
    openapiFields.add("creditorReferenceIdentificationCode");
    openapiFields.add("contractIdentificationNumber");
    openapiFields.add("contractDescription");
    openapiFields.add("isPaper");
    openapiFields.add("sddType");
    openapiFields.add("revocationSignatureDate");
    openapiFields.add("createdIp");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MandateObjectMandatesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MandateObjectMandatesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MandateObjectMandatesInner is not found in the empty JSON string", MandateObjectMandatesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MandateObjectMandatesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MandateObjectMandatesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("legalInformations") != null && !jsonObj.get("legalInformations").isJsonNull()) && !jsonObj.get("legalInformations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalInformations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalInformations").toString()));
      }
      if ((jsonObj.get("uniqueMandateReference") != null && !jsonObj.get("uniqueMandateReference").isJsonNull()) && !jsonObj.get("uniqueMandateReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueMandateReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueMandateReference").toString()));
      }
      if ((jsonObj.get("mandateStatus") != null && !jsonObj.get("mandateStatus").isJsonNull()) && !jsonObj.get("mandateStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateStatus").toString()));
      }
      // validate the optional field `mandateStatus`
      if (jsonObj.get("mandateStatus") != null && !jsonObj.get("mandateStatus").isJsonNull()) {
        MandateStatusEnum.validateJsonElement(jsonObj.get("mandateStatus"));
      }
      if ((jsonObj.get("debtorName") != null && !jsonObj.get("debtorName").isJsonNull()) && !jsonObj.get("debtorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorName").toString()));
      }
      if ((jsonObj.get("debtorAddress") != null && !jsonObj.get("debtorAddress").isJsonNull()) && !jsonObj.get("debtorAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorAddress").toString()));
      }
      if ((jsonObj.get("debtorCity") != null && !jsonObj.get("debtorCity").isJsonNull()) && !jsonObj.get("debtorCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorCity").toString()));
      }
      if ((jsonObj.get("debtorZipCode") != null && !jsonObj.get("debtorZipCode").isJsonNull()) && !jsonObj.get("debtorZipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorZipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorZipCode").toString()));
      }
      if ((jsonObj.get("debtorCountry") != null && !jsonObj.get("debtorCountry").isJsonNull()) && !jsonObj.get("debtorCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorCountry").toString()));
      }
      if ((jsonObj.get("debtorIban") != null && !jsonObj.get("debtorIban").isJsonNull()) && !jsonObj.get("debtorIban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorIban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorIban").toString()));
      }
      if ((jsonObj.get("debtorBic") != null && !jsonObj.get("debtorBic").isJsonNull()) && !jsonObj.get("debtorBic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorBic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorBic").toString()));
      }
      if ((jsonObj.get("sequenceType") != null && !jsonObj.get("sequenceType").isJsonNull()) && !jsonObj.get("sequenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequenceType").toString()));
      }
      // validate the optional field `sequenceType`
      if (jsonObj.get("sequenceType") != null && !jsonObj.get("sequenceType").isJsonNull()) {
        SequenceTypeEnum.validateJsonElement(jsonObj.get("sequenceType"));
      }
      if ((jsonObj.get("creditorName") != null && !jsonObj.get("creditorName").isJsonNull()) && !jsonObj.get("creditorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorName").toString()));
      }
      if ((jsonObj.get("sepaCreditorIdentifier") != null && !jsonObj.get("sepaCreditorIdentifier").isJsonNull()) && !jsonObj.get("sepaCreditorIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sepaCreditorIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sepaCreditorIdentifier").toString()));
      }
      if ((jsonObj.get("creditorAddress") != null && !jsonObj.get("creditorAddress").isJsonNull()) && !jsonObj.get("creditorAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorAddress").toString()));
      }
      if ((jsonObj.get("creditorCity") != null && !jsonObj.get("creditorCity").isJsonNull()) && !jsonObj.get("creditorCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorCity").toString()));
      }
      if ((jsonObj.get("creditorZipCode") != null && !jsonObj.get("creditorZipCode").isJsonNull()) && !jsonObj.get("creditorZipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorZipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorZipCode").toString()));
      }
      if ((jsonObj.get("creditorCountry") != null && !jsonObj.get("creditorCountry").isJsonNull()) && !jsonObj.get("creditorCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorCountry").toString()));
      }
      if ((jsonObj.get("debtorSignatureIp") != null && !jsonObj.get("debtorSignatureIp").isJsonNull()) && !jsonObj.get("debtorSignatureIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorSignatureIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorSignatureIp").toString()));
      }
      if ((jsonObj.get("debtorIdentificationCode") != null && !jsonObj.get("debtorIdentificationCode").isJsonNull()) && !jsonObj.get("debtorIdentificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorIdentificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorIdentificationCode").toString()));
      }
      if ((jsonObj.get("debtorReferencePartyName") != null && !jsonObj.get("debtorReferencePartyName").isJsonNull()) && !jsonObj.get("debtorReferencePartyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorReferencePartyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorReferencePartyName").toString()));
      }
      if ((jsonObj.get("debtorReferenceIdentificationCode") != null && !jsonObj.get("debtorReferenceIdentificationCode").isJsonNull()) && !jsonObj.get("debtorReferenceIdentificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorReferenceIdentificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorReferenceIdentificationCode").toString()));
      }
      if ((jsonObj.get("creditorReferencePartyName") != null && !jsonObj.get("creditorReferencePartyName").isJsonNull()) && !jsonObj.get("creditorReferencePartyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorReferencePartyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorReferencePartyName").toString()));
      }
      if ((jsonObj.get("creditorReferenceIdentificationCode") != null && !jsonObj.get("creditorReferenceIdentificationCode").isJsonNull()) && !jsonObj.get("creditorReferenceIdentificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorReferenceIdentificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorReferenceIdentificationCode").toString()));
      }
      if ((jsonObj.get("contractIdentificationNumber") != null && !jsonObj.get("contractIdentificationNumber").isJsonNull()) && !jsonObj.get("contractIdentificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractIdentificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractIdentificationNumber").toString()));
      }
      if ((jsonObj.get("contractDescription") != null && !jsonObj.get("contractDescription").isJsonNull()) && !jsonObj.get("contractDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractDescription").toString()));
      }
      if ((jsonObj.get("sddType") != null && !jsonObj.get("sddType").isJsonNull()) && !jsonObj.get("sddType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sddType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sddType").toString()));
      }
      // validate the optional field `sddType`
      if (jsonObj.get("sddType") != null && !jsonObj.get("sddType").isJsonNull()) {
        SddTypeEnum.validateJsonElement(jsonObj.get("sddType"));
      }
      if ((jsonObj.get("createdIp") != null && !jsonObj.get("createdIp").isJsonNull()) && !jsonObj.get("createdIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MandateObjectMandatesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MandateObjectMandatesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MandateObjectMandatesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MandateObjectMandatesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MandateObjectMandatesInner>() {
           @Override
           public void write(JsonWriter out, MandateObjectMandatesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MandateObjectMandatesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MandateObjectMandatesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MandateObjectMandatesInner
   * @throws IOException if the JSON string is invalid with respect to MandateObjectMandatesInner
   */
  public static MandateObjectMandatesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MandateObjectMandatesInner.class);
  }

  /**
   * Convert an instance of MandateObjectMandatesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

