/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CardPaymentAuthorisationResponseCode;
import org.openapitools.client.model.CardPaymentLocalAmount;
import org.openapitools.client.model.CardPaymentMcc;
import org.openapitools.client.model.CardPaymentMid;
import org.openapitools.client.model.PaymentLifeCycle;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class CardPayment {
  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  @javax.annotation.Nullable
  private CardPaymentMcc mcc;

  public static final String SERIALIZED_NAME_MID = "mid";
  @SerializedName(SERIALIZED_NAME_MID)
  @javax.annotation.Nullable
  private CardPaymentMid mid;

  public static final String SERIALIZED_NAME_LOCAL_AMOUNT = "localAmount";
  @SerializedName(SERIALIZED_NAME_LOCAL_AMOUNT)
  @javax.annotation.Nullable
  private CardPaymentLocalAmount localAmount;

  public static final String SERIALIZED_NAME_AUTHORISATION_RESPONSE_CODE = "authorisationResponseCode";
  @SerializedName(SERIALIZED_NAME_AUTHORISATION_RESPONSE_CODE)
  @javax.annotation.Nullable
  private CardPaymentAuthorisationResponseCode authorisationResponseCode;

  public static final String SERIALIZED_NAME_PAYMENT_LIFE_CYCLE = "paymentLifeCycle";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LIFE_CYCLE)
  @javax.annotation.Nullable
  private List<PaymentLifeCycle> paymentLifeCycle = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_COUNTRY = "paymentCountry";
  @SerializedName(SERIALIZED_NAME_PAYMENT_COUNTRY)
  @javax.annotation.Nullable
  private String paymentCountry;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  @javax.annotation.Nullable
  private String cardId;

  public static final String SERIALIZED_NAME_MASKED_PAN = "maskedPan";
  @SerializedName(SERIALIZED_NAME_MASKED_PAN)
  @javax.annotation.Nullable
  private String maskedPan;

  public static final String SERIALIZED_NAME_IS3_D_S = "is3DS";
  @SerializedName(SERIALIZED_NAME_IS3_D_S)
  @javax.annotation.Nullable
  private String is3DS;

  public static final String SERIALIZED_NAME_3DS_EXEMPTION_TYPE = "3dsExemptionType";
  @SerializedName(SERIALIZED_NAME_3DS_EXEMPTION_TYPE)
  @javax.annotation.Nullable
  private String _3dsExemptionType;

  public static final String SERIALIZED_NAME_OPTIMIZED_MERCHANT_NAME = "optimizedMerchantName";
  @SerializedName(SERIALIZED_NAME_OPTIMIZED_MERCHANT_NAME)
  @javax.annotation.Nullable
  private String optimizedMerchantName;

  public static final String SERIALIZED_NAME_MERCHANT_LOGO = "merchantLogo";
  @SerializedName(SERIALIZED_NAME_MERCHANT_LOGO)
  @javax.annotation.Nullable
  private String merchantLogo;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY = "merchantCategory";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY)
  @javax.annotation.Nullable
  private String merchantCategory;

  public static final String SERIALIZED_NAME_TRANSACTION_SUBTYPE = "transactionSubtype";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SUBTYPE)
  @javax.annotation.Nullable
  private String transactionSubtype;

  public static final String SERIALIZED_NAME_AUTHORIZATION_NOTE = "authorizationNote";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_NOTE)
  @javax.annotation.Nullable
  private String authorizationNote;

  public CardPayment() {
  }

  public CardPayment mcc(@javax.annotation.Nullable CardPaymentMcc mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * Get mcc
   * @return mcc
   */
  @javax.annotation.Nullable
  public CardPaymentMcc getMcc() {
    return mcc;
  }

  public void setMcc(@javax.annotation.Nullable CardPaymentMcc mcc) {
    this.mcc = mcc;
  }


  public CardPayment mid(@javax.annotation.Nullable CardPaymentMid mid) {
    this.mid = mid;
    return this;
  }

  /**
   * Get mid
   * @return mid
   */
  @javax.annotation.Nullable
  public CardPaymentMid getMid() {
    return mid;
  }

  public void setMid(@javax.annotation.Nullable CardPaymentMid mid) {
    this.mid = mid;
  }


  public CardPayment localAmount(@javax.annotation.Nullable CardPaymentLocalAmount localAmount) {
    this.localAmount = localAmount;
    return this;
  }

  /**
   * Get localAmount
   * @return localAmount
   */
  @javax.annotation.Nullable
  public CardPaymentLocalAmount getLocalAmount() {
    return localAmount;
  }

  public void setLocalAmount(@javax.annotation.Nullable CardPaymentLocalAmount localAmount) {
    this.localAmount = localAmount;
  }


  public CardPayment authorisationResponseCode(@javax.annotation.Nullable CardPaymentAuthorisationResponseCode authorisationResponseCode) {
    this.authorisationResponseCode = authorisationResponseCode;
    return this;
  }

  /**
   * Get authorisationResponseCode
   * @return authorisationResponseCode
   */
  @javax.annotation.Nullable
  public CardPaymentAuthorisationResponseCode getAuthorisationResponseCode() {
    return authorisationResponseCode;
  }

  public void setAuthorisationResponseCode(@javax.annotation.Nullable CardPaymentAuthorisationResponseCode authorisationResponseCode) {
    this.authorisationResponseCode = authorisationResponseCode;
  }


  public CardPayment paymentLifeCycle(@javax.annotation.Nullable List<PaymentLifeCycle> paymentLifeCycle) {
    this.paymentLifeCycle = paymentLifeCycle;
    return this;
  }

  public CardPayment addPaymentLifeCycleItem(PaymentLifeCycle paymentLifeCycleItem) {
    if (this.paymentLifeCycle == null) {
      this.paymentLifeCycle = new ArrayList<>();
    }
    this.paymentLifeCycle.add(paymentLifeCycleItem);
    return this;
  }

  /**
   * Get paymentLifeCycle
   * @return paymentLifeCycle
   */
  @javax.annotation.Nullable
  public List<PaymentLifeCycle> getPaymentLifeCycle() {
    return paymentLifeCycle;
  }

  public void setPaymentLifeCycle(@javax.annotation.Nullable List<PaymentLifeCycle> paymentLifeCycle) {
    this.paymentLifeCycle = paymentLifeCycle;
  }


  public CardPayment paymentCountry(@javax.annotation.Nullable String paymentCountry) {
    this.paymentCountry = paymentCountry;
    return this;
  }

  /**
   * Get paymentCountry
   * @return paymentCountry
   */
  @javax.annotation.Nullable
  public String getPaymentCountry() {
    return paymentCountry;
  }

  public void setPaymentCountry(@javax.annotation.Nullable String paymentCountry) {
    this.paymentCountry = paymentCountry;
  }


  public CardPayment cardId(@javax.annotation.Nullable String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * Get cardId
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(@javax.annotation.Nullable String cardId) {
    this.cardId = cardId;
  }


  public CardPayment maskedPan(@javax.annotation.Nullable String maskedPan) {
    this.maskedPan = maskedPan;
    return this;
  }

  /**
   * Get maskedPan
   * @return maskedPan
   */
  @javax.annotation.Nullable
  public String getMaskedPan() {
    return maskedPan;
  }

  public void setMaskedPan(@javax.annotation.Nullable String maskedPan) {
    this.maskedPan = maskedPan;
  }


  public CardPayment is3DS(@javax.annotation.Nullable String is3DS) {
    this.is3DS = is3DS;
    return this;
  }

  /**
   * Get is3DS
   * @return is3DS
   */
  @javax.annotation.Nullable
  public String getIs3DS() {
    return is3DS;
  }

  public void setIs3DS(@javax.annotation.Nullable String is3DS) {
    this.is3DS = is3DS;
  }


  public CardPayment _3dsExemptionType(@javax.annotation.Nullable String _3dsExemptionType) {
    this._3dsExemptionType = _3dsExemptionType;
    return this;
  }

  /**
   * Indicates why the transaction was exempted for 3DS authentication. See [3DS Exemption Type](/guide/cards/transactions.html#_3ds-exemption-type-3dsexemptiontype) for the value list. 
   * @return _3dsExemptionType
   */
  @javax.annotation.Nullable
  public String get3dsExemptionType() {
    return _3dsExemptionType;
  }

  public void set3dsExemptionType(@javax.annotation.Nullable String _3dsExemptionType) {
    this._3dsExemptionType = _3dsExemptionType;
  }


  public CardPayment optimizedMerchantName(@javax.annotation.Nullable String optimizedMerchantName) {
    this.optimizedMerchantName = optimizedMerchantName;
    return this;
  }

  /**
   * Get optimizedMerchantName
   * @return optimizedMerchantName
   */
  @javax.annotation.Nullable
  public String getOptimizedMerchantName() {
    return optimizedMerchantName;
  }

  public void setOptimizedMerchantName(@javax.annotation.Nullable String optimizedMerchantName) {
    this.optimizedMerchantName = optimizedMerchantName;
  }


  public CardPayment merchantLogo(@javax.annotation.Nullable String merchantLogo) {
    this.merchantLogo = merchantLogo;
    return this;
  }

  /**
   * Get merchantLogo
   * @return merchantLogo
   */
  @javax.annotation.Nullable
  public String getMerchantLogo() {
    return merchantLogo;
  }

  public void setMerchantLogo(@javax.annotation.Nullable String merchantLogo) {
    this.merchantLogo = merchantLogo;
  }


  public CardPayment merchantCategory(@javax.annotation.Nullable String merchantCategory) {
    this.merchantCategory = merchantCategory;
    return this;
  }

  /**
   * Get merchantCategory
   * @return merchantCategory
   */
  @javax.annotation.Nullable
  public String getMerchantCategory() {
    return merchantCategory;
  }

  public void setMerchantCategory(@javax.annotation.Nullable String merchantCategory) {
    this.merchantCategory = merchantCategory;
  }


  public CardPayment transactionSubtype(@javax.annotation.Nullable String transactionSubtype) {
    this.transactionSubtype = transactionSubtype;
    return this;
  }

  /**
   * Additional information regarding the type of card transaction. Values can be:   * &#x60;OFT&#x60; – Offline transaction   * &#x60;PRE&#x60; – Preauthorization   * &#x60;SEP&#x60; – Second presentment 
   * @return transactionSubtype
   */
  @javax.annotation.Nullable
  public String getTransactionSubtype() {
    return transactionSubtype;
  }

  public void setTransactionSubtype(@javax.annotation.Nullable String transactionSubtype) {
    this.transactionSubtype = transactionSubtype;
  }


  public CardPayment authorizationNote(@javax.annotation.Nullable String authorizationNote) {
    this.authorizationNote = authorizationNote;
    return this;
  }

  /**
   * Get authorizationNote
   * @return authorizationNote
   */
  @javax.annotation.Nullable
  public String getAuthorizationNote() {
    return authorizationNote;
  }

  public void setAuthorizationNote(@javax.annotation.Nullable String authorizationNote) {
    this.authorizationNote = authorizationNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardPayment cardPayment = (CardPayment) o;
    return Objects.equals(this.mcc, cardPayment.mcc) &&
        Objects.equals(this.mid, cardPayment.mid) &&
        Objects.equals(this.localAmount, cardPayment.localAmount) &&
        Objects.equals(this.authorisationResponseCode, cardPayment.authorisationResponseCode) &&
        Objects.equals(this.paymentLifeCycle, cardPayment.paymentLifeCycle) &&
        Objects.equals(this.paymentCountry, cardPayment.paymentCountry) &&
        Objects.equals(this.cardId, cardPayment.cardId) &&
        Objects.equals(this.maskedPan, cardPayment.maskedPan) &&
        Objects.equals(this.is3DS, cardPayment.is3DS) &&
        Objects.equals(this._3dsExemptionType, cardPayment._3dsExemptionType) &&
        Objects.equals(this.optimizedMerchantName, cardPayment.optimizedMerchantName) &&
        Objects.equals(this.merchantLogo, cardPayment.merchantLogo) &&
        Objects.equals(this.merchantCategory, cardPayment.merchantCategory) &&
        Objects.equals(this.transactionSubtype, cardPayment.transactionSubtype) &&
        Objects.equals(this.authorizationNote, cardPayment.authorizationNote);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(mcc, mid, localAmount, authorisationResponseCode, paymentLifeCycle, paymentCountry, cardId, maskedPan, is3DS, _3dsExemptionType, optimizedMerchantName, merchantLogo, merchantCategory, transactionSubtype, authorizationNote);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardPayment {\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    localAmount: ").append(toIndentedString(localAmount)).append("\n");
    sb.append("    authorisationResponseCode: ").append(toIndentedString(authorisationResponseCode)).append("\n");
    sb.append("    paymentLifeCycle: ").append(toIndentedString(paymentLifeCycle)).append("\n");
    sb.append("    paymentCountry: ").append(toIndentedString(paymentCountry)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    maskedPan: ").append(toIndentedString(maskedPan)).append("\n");
    sb.append("    is3DS: ").append(toIndentedString(is3DS)).append("\n");
    sb.append("    _3dsExemptionType: ").append(toIndentedString(_3dsExemptionType)).append("\n");
    sb.append("    optimizedMerchantName: ").append(toIndentedString(optimizedMerchantName)).append("\n");
    sb.append("    merchantLogo: ").append(toIndentedString(merchantLogo)).append("\n");
    sb.append("    merchantCategory: ").append(toIndentedString(merchantCategory)).append("\n");
    sb.append("    transactionSubtype: ").append(toIndentedString(transactionSubtype)).append("\n");
    sb.append("    authorizationNote: ").append(toIndentedString(authorizationNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mcc");
    openapiFields.add("mid");
    openapiFields.add("localAmount");
    openapiFields.add("authorisationResponseCode");
    openapiFields.add("paymentLifeCycle");
    openapiFields.add("paymentCountry");
    openapiFields.add("cardId");
    openapiFields.add("maskedPan");
    openapiFields.add("is3DS");
    openapiFields.add("3dsExemptionType");
    openapiFields.add("optimizedMerchantName");
    openapiFields.add("merchantLogo");
    openapiFields.add("merchantCategory");
    openapiFields.add("transactionSubtype");
    openapiFields.add("authorizationNote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardPayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardPayment is not found in the empty JSON string", CardPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mcc`
      if (jsonObj.get("mcc") != null && !jsonObj.get("mcc").isJsonNull()) {
        CardPaymentMcc.validateJsonElement(jsonObj.get("mcc"));
      }
      // validate the optional field `mid`
      if (jsonObj.get("mid") != null && !jsonObj.get("mid").isJsonNull()) {
        CardPaymentMid.validateJsonElement(jsonObj.get("mid"));
      }
      // validate the optional field `localAmount`
      if (jsonObj.get("localAmount") != null && !jsonObj.get("localAmount").isJsonNull()) {
        CardPaymentLocalAmount.validateJsonElement(jsonObj.get("localAmount"));
      }
      // validate the optional field `authorisationResponseCode`
      if (jsonObj.get("authorisationResponseCode") != null && !jsonObj.get("authorisationResponseCode").isJsonNull()) {
        CardPaymentAuthorisationResponseCode.validateJsonElement(jsonObj.get("authorisationResponseCode"));
      }
      if (jsonObj.get("paymentLifeCycle") != null && !jsonObj.get("paymentLifeCycle").isJsonNull()) {
        JsonArray jsonArraypaymentLifeCycle = jsonObj.getAsJsonArray("paymentLifeCycle");
        if (jsonArraypaymentLifeCycle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentLifeCycle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentLifeCycle` to be an array in the JSON string but got `%s`", jsonObj.get("paymentLifeCycle").toString()));
          }

          // validate the optional field `paymentLifeCycle` (array)
          for (int i = 0; i < jsonArraypaymentLifeCycle.size(); i++) {
            PaymentLifeCycle.validateJsonElement(jsonArraypaymentLifeCycle.get(i));
          };
        }
      }
      if ((jsonObj.get("paymentCountry") != null && !jsonObj.get("paymentCountry").isJsonNull()) && !jsonObj.get("paymentCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCountry").toString()));
      }
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("maskedPan") != null && !jsonObj.get("maskedPan").isJsonNull()) && !jsonObj.get("maskedPan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedPan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedPan").toString()));
      }
      if ((jsonObj.get("is3DS") != null && !jsonObj.get("is3DS").isJsonNull()) && !jsonObj.get("is3DS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is3DS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is3DS").toString()));
      }
      if ((jsonObj.get("3dsExemptionType") != null && !jsonObj.get("3dsExemptionType").isJsonNull()) && !jsonObj.get("3dsExemptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `3dsExemptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("3dsExemptionType").toString()));
      }
      if ((jsonObj.get("optimizedMerchantName") != null && !jsonObj.get("optimizedMerchantName").isJsonNull()) && !jsonObj.get("optimizedMerchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizedMerchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizedMerchantName").toString()));
      }
      if ((jsonObj.get("merchantLogo") != null && !jsonObj.get("merchantLogo").isJsonNull()) && !jsonObj.get("merchantLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantLogo").toString()));
      }
      if ((jsonObj.get("merchantCategory") != null && !jsonObj.get("merchantCategory").isJsonNull()) && !jsonObj.get("merchantCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategory").toString()));
      }
      if ((jsonObj.get("transactionSubtype") != null && !jsonObj.get("transactionSubtype").isJsonNull()) && !jsonObj.get("transactionSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionSubtype").toString()));
      }
      if ((jsonObj.get("authorizationNote") != null && !jsonObj.get("authorizationNote").isJsonNull()) && !jsonObj.get("authorizationNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationNote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<CardPayment>() {
           @Override
           public void write(JsonWriter out, CardPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardPayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardPayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardPayment
   * @throws IOException if the JSON string is invalid with respect to CardPayment
   */
  public static CardPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardPayment.class);
  }

  /**
   * Convert an instance of CardPayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

