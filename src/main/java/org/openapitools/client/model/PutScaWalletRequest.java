/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutScaWalletRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PutScaWalletRequest {
  /**
   * The reason for locking the Wallet.
   */
  @JsonAdapter(LockReasonEnum.Adapter.class)
  public enum LockReasonEnum {
    ISSUER("ISSUER"),
    
    LOST_DEVICE("LOST_DEVICE"),
    
    STOLEN_DEVICE("STOLEN_DEVICE"),
    
    FRAUDULENT_USE_SUSPECTED_BY_ISSUER("FRAUDULENT_USE_SUSPECTED_BY_ISSUER"),
    
    FRAUDULENT_USE_SUSPECTED_BY_CLIENT("FRAUDULENT_USE_SUSPECTED_BY_CLIENT"),
    
    TERMINATE_SERVICE("TERMINATE_SERVICE"),
    
    INCIDENT("INCIDENT");

    private String value;

    LockReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LockReasonEnum fromValue(String value) {
      for (LockReasonEnum b : LockReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LockReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LockReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LockReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LockReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LockReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCK_REASON = "lockReason";
  @SerializedName(SERIALIZED_NAME_LOCK_REASON)
  @javax.annotation.Nonnull
  private LockReasonEnum lockReason;

  public static final String SERIALIZED_NAME_LOCK_MESSAGE = "lockMessage";
  @SerializedName(SERIALIZED_NAME_LOCK_MESSAGE)
  @javax.annotation.Nullable
  private String lockMessage;

  public PutScaWalletRequest() {
  }

  public PutScaWalletRequest lockReason(@javax.annotation.Nonnull LockReasonEnum lockReason) {
    this.lockReason = lockReason;
    return this;
  }

  /**
   * The reason for locking the Wallet.
   * @return lockReason
   */
  @javax.annotation.Nonnull
  public LockReasonEnum getLockReason() {
    return lockReason;
  }

  public void setLockReason(@javax.annotation.Nonnull LockReasonEnum lockReason) {
    this.lockReason = lockReason;
  }


  public PutScaWalletRequest lockMessage(@javax.annotation.Nullable String lockMessage) {
    this.lockMessage = lockMessage;
    return this;
  }

  /**
   * Get lockMessage
   * @return lockMessage
   */
  @javax.annotation.Nullable
  public String getLockMessage() {
    return lockMessage;
  }

  public void setLockMessage(@javax.annotation.Nullable String lockMessage) {
    this.lockMessage = lockMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutScaWalletRequest putScaWalletRequest = (PutScaWalletRequest) o;
    return Objects.equals(this.lockReason, putScaWalletRequest.lockReason) &&
        Objects.equals(this.lockMessage, putScaWalletRequest.lockMessage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lockReason, lockMessage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutScaWalletRequest {\n");
    sb.append("    lockReason: ").append(toIndentedString(lockReason)).append("\n");
    sb.append("    lockMessage: ").append(toIndentedString(lockMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lockReason");
    openapiFields.add("lockMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lockReason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutScaWalletRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutScaWalletRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutScaWalletRequest is not found in the empty JSON string", PutScaWalletRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutScaWalletRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutScaWalletRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutScaWalletRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lockReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockReason").toString()));
      }
      // validate the required field `lockReason`
      LockReasonEnum.validateJsonElement(jsonObj.get("lockReason"));
      if ((jsonObj.get("lockMessage") != null && !jsonObj.get("lockMessage").isJsonNull()) && !jsonObj.get("lockMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutScaWalletRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutScaWalletRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutScaWalletRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutScaWalletRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutScaWalletRequest>() {
           @Override
           public void write(JsonWriter out, PutScaWalletRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutScaWalletRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutScaWalletRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutScaWalletRequest
   * @throws IOException if the JSON string is invalid with respect to PutScaWalletRequest
   */
  public static PutScaWalletRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutScaWalletRequest.class);
  }

  /**
   * Convert an instance of PutScaWalletRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

