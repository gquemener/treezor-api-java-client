/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostMandatesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostMandatesRequest {
  /**
   * The type of Mandate, which can be: * &#x60;core&#x60; – To debit individuals (physical persons). * &#x60;b2b&#x60; – To debit legal entities. 
   */
  @JsonAdapter(SddTypeEnum.Adapter.class)
  public enum SddTypeEnum {
    CORE("core"),
    
    B2B("b2b");

    private String value;

    SddTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SddTypeEnum fromValue(String value) {
      for (SddTypeEnum b : SddTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SddTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SddTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SddTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SddTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SddTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SDD_TYPE = "sddType";
  @SerializedName(SERIALIZED_NAME_SDD_TYPE)
  @javax.annotation.Nonnull
  private SddTypeEnum sddType;

  public static final String SERIALIZED_NAME_IS_PAPER = "isPaper";
  @SerializedName(SERIALIZED_NAME_IS_PAPER)
  @javax.annotation.Nonnull
  private Boolean isPaper;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private Integer userId;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtorName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  @javax.annotation.Nonnull
  private String debtorName;

  public static final String SERIALIZED_NAME_DEBTOR_ADDRESS = "debtorAddress";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ADDRESS)
  @javax.annotation.Nonnull
  private String debtorAddress;

  public static final String SERIALIZED_NAME_DEBTOR_CITY = "debtorCity";
  @SerializedName(SERIALIZED_NAME_DEBTOR_CITY)
  @javax.annotation.Nonnull
  private String debtorCity;

  public static final String SERIALIZED_NAME_DEBTOR_ZIPCODE = "debtorZipcode";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ZIPCODE)
  @javax.annotation.Nonnull
  private String debtorZipcode;

  public static final String SERIALIZED_NAME_DEBTOR_COUNTRY = "debtorCountry";
  @SerializedName(SERIALIZED_NAME_DEBTOR_COUNTRY)
  @javax.annotation.Nonnull
  private String debtorCountry;

  public static final String SERIALIZED_NAME_DEBTOR_IBAN = "debtorIban";
  @SerializedName(SERIALIZED_NAME_DEBTOR_IBAN)
  @javax.annotation.Nonnull
  private String debtorIban;

  public static final String SERIALIZED_NAME_DEBTOR_BIC = "debtorBic";
  @SerializedName(SERIALIZED_NAME_DEBTOR_BIC)
  @javax.annotation.Nullable
  private String debtorBic;

  /**
   * Defines whether or not the debtor will be debited multiple times. Can be one of the following: * &#x60;one-off&#x60; – For a one-time payment. * &#x60;recurrent&#x60; – For recurring payments. 
   */
  @JsonAdapter(SequenceTypeEnum.Adapter.class)
  public enum SequenceTypeEnum {
    ONE_OFF("one-off"),
    
    RECURRENT("recurrent");

    private String value;

    SequenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SequenceTypeEnum fromValue(String value) {
      for (SequenceTypeEnum b : SequenceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SequenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SequenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SequenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SequenceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SequenceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEQUENCE_TYPE = "sequenceType";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_TYPE)
  @javax.annotation.Nonnull
  private SequenceTypeEnum sequenceType;

  public static final String SERIALIZED_NAME_CREATED_IP = "createdIp";
  @SerializedName(SERIALIZED_NAME_CREATED_IP)
  @javax.annotation.Nullable
  private String createdIp;

  public static final String SERIALIZED_NAME_SIGNATURE_DATE = "signatureDate";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_DATE)
  @javax.annotation.Nonnull
  private LocalDate signatureDate;

  public PostMandatesRequest() {
  }

  public PostMandatesRequest sddType(@javax.annotation.Nonnull SddTypeEnum sddType) {
    this.sddType = sddType;
    return this;
  }

  /**
   * The type of Mandate, which can be: * &#x60;core&#x60; – To debit individuals (physical persons). * &#x60;b2b&#x60; – To debit legal entities. 
   * @return sddType
   */
  @javax.annotation.Nonnull
  public SddTypeEnum getSddType() {
    return sddType;
  }

  public void setSddType(@javax.annotation.Nonnull SddTypeEnum sddType) {
    this.sddType = sddType;
  }


  public PostMandatesRequest isPaper(@javax.annotation.Nonnull Boolean isPaper) {
    this.isPaper = isPaper;
    return this;
  }

  /**
   * Indicates whether the Mandate is a paper-based document, or electronically signed. As of today, should only be set to &#x60;true&#x60;. 
   * @return isPaper
   */
  @javax.annotation.Nonnull
  public Boolean getIsPaper() {
    return isPaper;
  }

  public void setIsPaper(@javax.annotation.Nonnull Boolean isPaper) {
    this.isPaper = isPaper;
  }


  public PostMandatesRequest userId(@javax.annotation.Nonnull Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the end user requesting the SEPA Direct Debit (i.e., the creditor initiating the Mandate request).
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull Integer userId) {
    this.userId = userId;
  }


  public PostMandatesRequest debtorName(@javax.annotation.Nonnull String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * The full name of the debited entity or individual. Format: alphanumeric with at least 3 alphabetic characters. 
   * @return debtorName
   */
  @javax.annotation.Nonnull
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(@javax.annotation.Nonnull String debtorName) {
    this.debtorName = debtorName;
  }


  public PostMandatesRequest debtorAddress(@javax.annotation.Nonnull String debtorAddress) {
    this.debtorAddress = debtorAddress;
    return this;
  }

  /**
   * The address of the debited end user.
   * @return debtorAddress
   */
  @javax.annotation.Nonnull
  public String getDebtorAddress() {
    return debtorAddress;
  }

  public void setDebtorAddress(@javax.annotation.Nonnull String debtorAddress) {
    this.debtorAddress = debtorAddress;
  }


  public PostMandatesRequest debtorCity(@javax.annotation.Nonnull String debtorCity) {
    this.debtorCity = debtorCity;
    return this;
  }

  /**
   * City in which the debited end user is domiciled.
   * @return debtorCity
   */
  @javax.annotation.Nonnull
  public String getDebtorCity() {
    return debtorCity;
  }

  public void setDebtorCity(@javax.annotation.Nonnull String debtorCity) {
    this.debtorCity = debtorCity;
  }


  public PostMandatesRequest debtorZipcode(@javax.annotation.Nonnull String debtorZipcode) {
    this.debtorZipcode = debtorZipcode;
    return this;
  }

  /**
   * Postcode of the city in which the debited end user is domiciled.
   * @return debtorZipcode
   */
  @javax.annotation.Nonnull
  public String getDebtorZipcode() {
    return debtorZipcode;
  }

  public void setDebtorZipcode(@javax.annotation.Nonnull String debtorZipcode) {
    this.debtorZipcode = debtorZipcode;
  }


  public PostMandatesRequest debtorCountry(@javax.annotation.Nonnull String debtorCountry) {
    this.debtorCountry = debtorCountry;
    return this;
  }

  /**
   * Country in which the debited end user is domiciled.
   * @return debtorCountry
   */
  @javax.annotation.Nonnull
  public String getDebtorCountry() {
    return debtorCountry;
  }

  public void setDebtorCountry(@javax.annotation.Nonnull String debtorCountry) {
    this.debtorCountry = debtorCountry;
  }


  public PostMandatesRequest debtorIban(@javax.annotation.Nonnull String debtorIban) {
    this.debtorIban = debtorIban;
    return this;
  }

  /**
   * IBAN of the debited user.
   * @return debtorIban
   */
  @javax.annotation.Nonnull
  public String getDebtorIban() {
    return debtorIban;
  }

  public void setDebtorIban(@javax.annotation.Nonnull String debtorIban) {
    this.debtorIban = debtorIban;
  }


  public PostMandatesRequest debtorBic(@javax.annotation.Nullable String debtorBic) {
    this.debtorBic = debtorBic;
    return this;
  }

  /**
   * The BIC (or SWIFT) of the debited user
   * @return debtorBic
   */
  @javax.annotation.Nullable
  public String getDebtorBic() {
    return debtorBic;
  }

  public void setDebtorBic(@javax.annotation.Nullable String debtorBic) {
    this.debtorBic = debtorBic;
  }


  public PostMandatesRequest sequenceType(@javax.annotation.Nonnull SequenceTypeEnum sequenceType) {
    this.sequenceType = sequenceType;
    return this;
  }

  /**
   * Defines whether or not the debtor will be debited multiple times. Can be one of the following: * &#x60;one-off&#x60; – For a one-time payment. * &#x60;recurrent&#x60; – For recurring payments. 
   * @return sequenceType
   */
  @javax.annotation.Nonnull
  public SequenceTypeEnum getSequenceType() {
    return sequenceType;
  }

  public void setSequenceType(@javax.annotation.Nonnull SequenceTypeEnum sequenceType) {
    this.sequenceType = sequenceType;
  }


  public PostMandatesRequest createdIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
    return this;
  }

  /**
   * IP address of the end user requesting the SDD.
   * @return createdIp
   */
  @javax.annotation.Nullable
  public String getCreatedIp() {
    return createdIp;
  }

  public void setCreatedIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
  }


  public PostMandatesRequest signatureDate(@javax.annotation.Nonnull LocalDate signatureDate) {
    this.signatureDate = signatureDate;
    return this;
  }

  /**
   * Date on which the Mandate has been signed by the end user.  
   * @return signatureDate
   */
  @javax.annotation.Nonnull
  public LocalDate getSignatureDate() {
    return signatureDate;
  }

  public void setSignatureDate(@javax.annotation.Nonnull LocalDate signatureDate) {
    this.signatureDate = signatureDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMandatesRequest postMandatesRequest = (PostMandatesRequest) o;
    return Objects.equals(this.sddType, postMandatesRequest.sddType) &&
        Objects.equals(this.isPaper, postMandatesRequest.isPaper) &&
        Objects.equals(this.userId, postMandatesRequest.userId) &&
        Objects.equals(this.debtorName, postMandatesRequest.debtorName) &&
        Objects.equals(this.debtorAddress, postMandatesRequest.debtorAddress) &&
        Objects.equals(this.debtorCity, postMandatesRequest.debtorCity) &&
        Objects.equals(this.debtorZipcode, postMandatesRequest.debtorZipcode) &&
        Objects.equals(this.debtorCountry, postMandatesRequest.debtorCountry) &&
        Objects.equals(this.debtorIban, postMandatesRequest.debtorIban) &&
        Objects.equals(this.debtorBic, postMandatesRequest.debtorBic) &&
        Objects.equals(this.sequenceType, postMandatesRequest.sequenceType) &&
        Objects.equals(this.createdIp, postMandatesRequest.createdIp) &&
        Objects.equals(this.signatureDate, postMandatesRequest.signatureDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sddType, isPaper, userId, debtorName, debtorAddress, debtorCity, debtorZipcode, debtorCountry, debtorIban, debtorBic, sequenceType, createdIp, signatureDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMandatesRequest {\n");
    sb.append("    sddType: ").append(toIndentedString(sddType)).append("\n");
    sb.append("    isPaper: ").append(toIndentedString(isPaper)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    debtorAddress: ").append(toIndentedString(debtorAddress)).append("\n");
    sb.append("    debtorCity: ").append(toIndentedString(debtorCity)).append("\n");
    sb.append("    debtorZipcode: ").append(toIndentedString(debtorZipcode)).append("\n");
    sb.append("    debtorCountry: ").append(toIndentedString(debtorCountry)).append("\n");
    sb.append("    debtorIban: ").append(toIndentedString(debtorIban)).append("\n");
    sb.append("    debtorBic: ").append(toIndentedString(debtorBic)).append("\n");
    sb.append("    sequenceType: ").append(toIndentedString(sequenceType)).append("\n");
    sb.append("    createdIp: ").append(toIndentedString(createdIp)).append("\n");
    sb.append("    signatureDate: ").append(toIndentedString(signatureDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sddType");
    openapiFields.add("isPaper");
    openapiFields.add("userId");
    openapiFields.add("debtorName");
    openapiFields.add("debtorAddress");
    openapiFields.add("debtorCity");
    openapiFields.add("debtorZipcode");
    openapiFields.add("debtorCountry");
    openapiFields.add("debtorIban");
    openapiFields.add("debtorBic");
    openapiFields.add("sequenceType");
    openapiFields.add("createdIp");
    openapiFields.add("signatureDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sddType");
    openapiRequiredFields.add("isPaper");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("debtorName");
    openapiRequiredFields.add("debtorAddress");
    openapiRequiredFields.add("debtorCity");
    openapiRequiredFields.add("debtorZipcode");
    openapiRequiredFields.add("debtorCountry");
    openapiRequiredFields.add("debtorIban");
    openapiRequiredFields.add("sequenceType");
    openapiRequiredFields.add("signatureDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostMandatesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostMandatesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostMandatesRequest is not found in the empty JSON string", PostMandatesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostMandatesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostMandatesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostMandatesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sddType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sddType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sddType").toString()));
      }
      // validate the required field `sddType`
      SddTypeEnum.validateJsonElement(jsonObj.get("sddType"));
      if (!jsonObj.get("debtorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorName").toString()));
      }
      if (!jsonObj.get("debtorAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorAddress").toString()));
      }
      if (!jsonObj.get("debtorCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorCity").toString()));
      }
      if (!jsonObj.get("debtorZipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorZipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorZipcode").toString()));
      }
      if (!jsonObj.get("debtorCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorCountry").toString()));
      }
      if (!jsonObj.get("debtorIban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorIban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorIban").toString()));
      }
      if ((jsonObj.get("debtorBic") != null && !jsonObj.get("debtorBic").isJsonNull()) && !jsonObj.get("debtorBic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorBic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorBic").toString()));
      }
      if (!jsonObj.get("sequenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequenceType").toString()));
      }
      // validate the required field `sequenceType`
      SequenceTypeEnum.validateJsonElement(jsonObj.get("sequenceType"));
      if ((jsonObj.get("createdIp") != null && !jsonObj.get("createdIp").isJsonNull()) && !jsonObj.get("createdIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostMandatesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostMandatesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostMandatesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostMandatesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostMandatesRequest>() {
           @Override
           public void write(JsonWriter out, PostMandatesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostMandatesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostMandatesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostMandatesRequest
   * @throws IOException if the JSON string is invalid with respect to PostMandatesRequest
   */
  public static PostMandatesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostMandatesRequest.class);
  }

  /**
   * Convert an instance of PostMandatesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

