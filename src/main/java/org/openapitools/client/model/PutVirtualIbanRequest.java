/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutVirtualIbanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PutVirtualIbanRequest {
  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  @javax.annotation.Nullable
  private String validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  @javax.annotation.Nullable
  private String validTo;

  public static final String SERIALIZED_NAME_MAX_USAGE = "maxUsage";
  @SerializedName(SERIALIZED_NAME_MAX_USAGE)
  @javax.annotation.Nullable
  private Integer maxUsage;

  public static final String SERIALIZED_NAME_MAX_AMOUNT = "maxAmount";
  @SerializedName(SERIALIZED_NAME_MAX_AMOUNT)
  @javax.annotation.Nullable
  private Float maxAmount;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  @javax.annotation.Nullable
  private String reference;

  public PutVirtualIbanRequest() {
  }

  public PutVirtualIbanRequest validFrom(@javax.annotation.Nullable String validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * The date from which the Virtual IBAN validity starts. Defaults to today&#39;s date and must be set in the future.&lt;br&gt; Format: YYYY-MM-DD 
   * @return validFrom
   */
  @javax.annotation.Nullable
  public String getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(@javax.annotation.Nullable String validFrom) {
    this.validFrom = validFrom;
  }


  public PutVirtualIbanRequest validTo(@javax.annotation.Nullable String validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * The date from which the Virtual IBAN validity ends. Must be set after the &#x60;validFrom&#x60; date.&lt;br&gt; Format: YYYY-MM-DD 
   * @return validTo
   */
  @javax.annotation.Nullable
  public String getValidTo() {
    return validTo;
  }

  public void setValidTo(@javax.annotation.Nullable String validTo) {
    this.validTo = validTo;
  }


  public PutVirtualIbanRequest maxUsage(@javax.annotation.Nullable Integer maxUsage) {
    this.maxUsage = maxUsage;
    return this;
  }

  /**
   * The maximum number of transactions allowed (&#x60;0&#x60; &#x3D; unlimited).  
   * @return maxUsage
   */
  @javax.annotation.Nullable
  public Integer getMaxUsage() {
    return maxUsage;
  }

  public void setMaxUsage(@javax.annotation.Nullable Integer maxUsage) {
    this.maxUsage = maxUsage;
  }


  public PutVirtualIbanRequest maxAmount(@javax.annotation.Nullable Float maxAmount) {
    this.maxAmount = maxAmount;
    return this;
  }

  /**
   * The maximum cumulated amount of all transactions (&#x60;\&quot;0.00\&quot;&#x60; &#x3D; unlimited). 
   * @return maxAmount
   */
  @javax.annotation.Nullable
  public Float getMaxAmount() {
    return maxAmount;
  }

  public void setMaxAmount(@javax.annotation.Nullable Float maxAmount) {
    this.maxAmount = maxAmount;
  }


  public PutVirtualIbanRequest reference(@javax.annotation.Nullable String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Custom field for your internal reference of the Virtual IBAN.  Max. length: 255 characters. 
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(@javax.annotation.Nullable String reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutVirtualIbanRequest putVirtualIbanRequest = (PutVirtualIbanRequest) o;
    return Objects.equals(this.validFrom, putVirtualIbanRequest.validFrom) &&
        Objects.equals(this.validTo, putVirtualIbanRequest.validTo) &&
        Objects.equals(this.maxUsage, putVirtualIbanRequest.maxUsage) &&
        Objects.equals(this.maxAmount, putVirtualIbanRequest.maxAmount) &&
        Objects.equals(this.reference, putVirtualIbanRequest.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validFrom, validTo, maxUsage, maxAmount, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutVirtualIbanRequest {\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    maxUsage: ").append(toIndentedString(maxUsage)).append("\n");
    sb.append("    maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("maxUsage");
    openapiFields.add("maxAmount");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutVirtualIbanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutVirtualIbanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutVirtualIbanRequest is not found in the empty JSON string", PutVirtualIbanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutVirtualIbanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutVirtualIbanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("validFrom") != null && !jsonObj.get("validFrom").isJsonNull()) && !jsonObj.get("validFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validFrom").toString()));
      }
      if ((jsonObj.get("validTo") != null && !jsonObj.get("validTo").isJsonNull()) && !jsonObj.get("validTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validTo").toString()));
      }
      if ((jsonObj.get("maxAmount") != null && !jsonObj.get("maxAmount").isJsonNull()) && !jsonObj.get("maxAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAmount").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutVirtualIbanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutVirtualIbanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutVirtualIbanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutVirtualIbanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutVirtualIbanRequest>() {
           @Override
           public void write(JsonWriter out, PutVirtualIbanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutVirtualIbanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutVirtualIbanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutVirtualIbanRequest
   * @throws IOException if the JSON string is invalid with respect to PutVirtualIbanRequest
   */
  public static PutVirtualIbanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutVirtualIbanRequest.class);
  }

  /**
   * Convert an instance of PutVirtualIbanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

