/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardtransactionInner1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class CardtransactionInner1 {
  public static final String SERIALIZED_NAME_CARDTRANSACTION_ID = "cardtransactionId";
  @SerializedName(SERIALIZED_NAME_CARDTRANSACTION_ID)
  @javax.annotation.Nullable
  private Integer cardtransactionId;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  @javax.annotation.Nullable
  private Integer cardId;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nullable
  private Integer walletId;

  public static final String SERIALIZED_NAME_ACQUIRER_ID = "acquirerId";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ID)
  @javax.annotation.Nullable
  private Integer acquirerId;

  public static final String SERIALIZED_NAME_WALLET_CURRENCY = "walletCurrency";
  @SerializedName(SERIALIZED_NAME_WALLET_CURRENCY)
  @javax.annotation.Nullable
  private String walletCurrency;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  @javax.annotation.Nullable
  private String merchantId;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  @javax.annotation.Nullable
  private String merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_ADDRESS = "merchantAddress";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ADDRESS)
  @javax.annotation.Nullable
  private String merchantAddress;

  public static final String SERIALIZED_NAME_MERCHANT_CITY = "merchantCity";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CITY)
  @javax.annotation.Nullable
  private String merchantCity;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY = "merchantCountry";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY)
  @javax.annotation.Nullable
  private String merchantCountry;

  public static final String SERIALIZED_NAME_MCC_CODE = "mccCode";
  @SerializedName(SERIALIZED_NAME_MCC_CODE)
  @javax.annotation.Nullable
  private String mccCode;

  public static final String SERIALIZED_NAME_PAYMENT_LOCAL_TIME = "paymentLocalTime";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LOCAL_TIME)
  @javax.annotation.Nullable
  private String paymentLocalTime;

  public static final String SERIALIZED_NAME_PUBLIC_TOKEN = "publicToken";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TOKEN)
  @javax.annotation.Nullable
  private String publicToken;

  public static final String SERIALIZED_NAME_PAYMENT_AMOUNT = "paymentAmount";
  @SerializedName(SERIALIZED_NAME_PAYMENT_AMOUNT)
  @javax.annotation.Nullable
  private String paymentAmount;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "paymentCurrency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  @javax.annotation.Nullable
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  @javax.annotation.Nullable
  private String fees;

  public static final String SERIALIZED_NAME_PAYMENT_COUNTRY = "paymentCountry";
  @SerializedName(SERIALIZED_NAME_PAYMENT_COUNTRY)
  @javax.annotation.Nullable
  private String paymentCountry;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  @javax.annotation.Nullable
  private String paymentId;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  @javax.annotation.Nullable
  private String paymentStatus;

  public static final String SERIALIZED_NAME_PAYMENT_LOCAL_AMOUNT = "paymentLocalAmount";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LOCAL_AMOUNT)
  @javax.annotation.Nullable
  private String paymentLocalAmount;

  public static final String SERIALIZED_NAME_PAYMENT_LOCAL_DATE = "paymentLocalDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LOCAL_DATE)
  @javax.annotation.Nullable
  private String paymentLocalDate;

  public static final String SERIALIZED_NAME_IS3_D_S = "is3DS";
  @SerializedName(SERIALIZED_NAME_IS3_D_S)
  @javax.annotation.Nullable
  private Boolean is3DS;

  public static final String SERIALIZED_NAME_POS_CARDHOLDER_PRESENCE = "posCardholderPresence";
  @SerializedName(SERIALIZED_NAME_POS_CARDHOLDER_PRESENCE)
  @javax.annotation.Nullable
  private String posCardholderPresence;

  public static final String SERIALIZED_NAME_POS_POSTCODE = "posPostcode";
  @SerializedName(SERIALIZED_NAME_POS_POSTCODE)
  @javax.annotation.Nullable
  private String posPostcode;

  public static final String SERIALIZED_NAME_POS_COUNTRY = "posCountry";
  @SerializedName(SERIALIZED_NAME_POS_COUNTRY)
  @javax.annotation.Nullable
  private String posCountry;

  public static final String SERIALIZED_NAME_POS_TERMINAL_ID = "posTerminalId";
  @SerializedName(SERIALIZED_NAME_POS_TERMINAL_ID)
  @javax.annotation.Nullable
  private String posTerminalId;

  public static final String SERIALIZED_NAME_POS_CARD_PRESENCE = "posCardPresence";
  @SerializedName(SERIALIZED_NAME_POS_CARD_PRESENCE)
  @javax.annotation.Nullable
  private String posCardPresence;

  public static final String SERIALIZED_NAME_PAN_ENTRY_METHOD = "panEntryMethod";
  @SerializedName(SERIALIZED_NAME_PAN_ENTRY_METHOD)
  @javax.annotation.Nullable
  private String panEntryMethod;

  public static final String SERIALIZED_NAME_AUTHORIZATION_NOTE = "authorizationNote";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_NOTE)
  @javax.annotation.Nullable
  private String authorizationNote;

  public static final String SERIALIZED_NAME_AUTHORIZATION_RESPONSE_CODE = "authorizationResponseCode";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_RESPONSE_CODE)
  @javax.annotation.Nullable
  private String authorizationResponseCode;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ISSUER_ID = "authorizationIssuerId";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ISSUER_ID)
  @javax.annotation.Nullable
  private String authorizationIssuerId;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ISSUER_TIME = "authorizationIssuerTime";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ISSUER_TIME)
  @javax.annotation.Nullable
  private String authorizationIssuerTime;

  public static final String SERIALIZED_NAME_AUTHORIZATION_MTI = "authorizationMti";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_MTI)
  @javax.annotation.Nullable
  private String authorizationMti;

  public static final String SERIALIZED_NAME_AUTHORIZED_BALANCE = "authorizedBalance";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_BALANCE)
  @javax.annotation.Nullable
  private String authorizedBalance;

  public static final String SERIALIZED_NAME_LIMIT_ATM_YEAR = "limitAtmYear";
  @SerializedName(SERIALIZED_NAME_LIMIT_ATM_YEAR)
  @javax.annotation.Nullable
  private String limitAtmYear;

  public static final String SERIALIZED_NAME_LIMIT_ATM_MONTH = "limitAtmMonth";
  @SerializedName(SERIALIZED_NAME_LIMIT_ATM_MONTH)
  @javax.annotation.Nullable
  private String limitAtmMonth;

  public static final String SERIALIZED_NAME_LIMIT_ATM_WEEK = "limitAtmWeek";
  @SerializedName(SERIALIZED_NAME_LIMIT_ATM_WEEK)
  @javax.annotation.Nullable
  private String limitAtmWeek;

  public static final String SERIALIZED_NAME_LIMIT_ATM_DAY = "limitAtmDay";
  @SerializedName(SERIALIZED_NAME_LIMIT_ATM_DAY)
  @javax.annotation.Nullable
  private String limitAtmDay;

  public static final String SERIALIZED_NAME_LIMIT_ATM_ALL = "limitAtmAll";
  @SerializedName(SERIALIZED_NAME_LIMIT_ATM_ALL)
  @javax.annotation.Nullable
  private String limitAtmAll;

  public static final String SERIALIZED_NAME_LIMIT_PAYMENT_YEAR = "limitPaymentYear";
  @SerializedName(SERIALIZED_NAME_LIMIT_PAYMENT_YEAR)
  @javax.annotation.Nullable
  private String limitPaymentYear;

  public static final String SERIALIZED_NAME_LIMIT_PAYMENT_MONTH = "limitPaymentMonth";
  @SerializedName(SERIALIZED_NAME_LIMIT_PAYMENT_MONTH)
  @javax.annotation.Nullable
  private String limitPaymentMonth;

  public static final String SERIALIZED_NAME_LIMIT_PAYMENT_WEEK = "limitPaymentWeek";
  @SerializedName(SERIALIZED_NAME_LIMIT_PAYMENT_WEEK)
  @javax.annotation.Nullable
  private String limitPaymentWeek;

  public static final String SERIALIZED_NAME_LIMIT_PAYMENT_DAY = "limitPaymentDay";
  @SerializedName(SERIALIZED_NAME_LIMIT_PAYMENT_DAY)
  @javax.annotation.Nullable
  private String limitPaymentDay;

  public static final String SERIALIZED_NAME_LIMIT_PAYMENT_ALL = "limitPaymentAll";
  @SerializedName(SERIALIZED_NAME_LIMIT_PAYMENT_ALL)
  @javax.annotation.Nullable
  private String limitPaymentAll;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_ATM_YEAR = "totalLimitAtmYear";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_ATM_YEAR)
  @javax.annotation.Nullable
  private String totalLimitAtmYear;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_ATM_MONTH = "totalLimitAtmMonth";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_ATM_MONTH)
  @javax.annotation.Nullable
  private String totalLimitAtmMonth;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_ATM_WEEK = "totalLimitAtmWeek";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_ATM_WEEK)
  @javax.annotation.Nullable
  private String totalLimitAtmWeek;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_ATM_DAY = "totalLimitAtmDay";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_ATM_DAY)
  @javax.annotation.Nullable
  private String totalLimitAtmDay;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_ATM_ALL = "totalLimitAtmAll";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_ATM_ALL)
  @javax.annotation.Nullable
  private String totalLimitAtmAll;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_YEAR = "totalLimitPaymentYear";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_YEAR)
  @javax.annotation.Nullable
  private String totalLimitPaymentYear;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_MONTH = "totalLimitPaymentMonth";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_MONTH)
  @javax.annotation.Nullable
  private String totalLimitPaymentMonth;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_WEEK = "totalLimitPaymentWeek";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_WEEK)
  @javax.annotation.Nullable
  private String totalLimitPaymentWeek;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_DAY = "totalLimitPaymentDay";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_DAY)
  @javax.annotation.Nullable
  private String totalLimitPaymentDay;

  public static final String SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_ALL = "totalLimitPaymentAll";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIMIT_PAYMENT_ALL)
  @javax.annotation.Nullable
  private String totalLimitPaymentAll;

  public static final String SERIALIZED_NAME_CARD_DIGITALIZATION_EXTERNAL_ID = "cardDigitalizationExternalId";
  @SerializedName(SERIALIZED_NAME_CARD_DIGITALIZATION_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String cardDigitalizationExternalId;

  public static final String SERIALIZED_NAME_TOTAL_ROWS = "totalRows";
  @SerializedName(SERIALIZED_NAME_TOTAL_ROWS)
  @javax.annotation.Nullable
  private Integer totalRows;

  public static final String SERIALIZED_NAME_OPTIMIZED_MERCHANT_NAME = "optimizedMerchantName";
  @SerializedName(SERIALIZED_NAME_OPTIMIZED_MERCHANT_NAME)
  @javax.annotation.Nullable
  private String optimizedMerchantName;

  public static final String SERIALIZED_NAME_MERCHANT_LOGO = "merchantLogo";
  @SerializedName(SERIALIZED_NAME_MERCHANT_LOGO)
  @javax.annotation.Nullable
  private String merchantLogo;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY = "merchantCategory";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY)
  @javax.annotation.Nullable
  private String merchantCategory;

  /**
   * Additional information regarding the type of card transaction. Values can be:   * &#x60;OFT&#x60; – Offline transaction   * &#x60;PRE&#x60; – Preauthorization   * &#x60;SEP&#x60; – Second presentment 
   */
  @JsonAdapter(TransactionSubtypeEnum.Adapter.class)
  public enum TransactionSubtypeEnum {
    OFT("OFT"),
    
    PRE("PRE"),
    
    SEP("SEP");

    private String value;

    TransactionSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionSubtypeEnum fromValue(String value) {
      for (TransactionSubtypeEnum b : TransactionSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionSubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionSubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_SUBTYPE = "transactionSubtype";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SUBTYPE)
  @javax.annotation.Nullable
  private TransactionSubtypeEnum transactionSubtype;

  public static final String SERIALIZED_NAME_3DS_EXEMPTION_TYPE = "3dsExemptionType";
  @SerializedName(SERIALIZED_NAME_3DS_EXEMPTION_TYPE)
  @javax.annotation.Nullable
  private String _3dsExemptionType;

  public static final String SERIALIZED_NAME_RECEIVER_DATA = "receiverData";
  @SerializedName(SERIALIZED_NAME_RECEIVER_DATA)
  @javax.annotation.Nullable
  private String receiverData;

  public static final String SERIALIZED_NAME_SENDER_DATA = "senderData";
  @SerializedName(SERIALIZED_NAME_SENDER_DATA)
  @javax.annotation.Nullable
  private String senderData;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE_IDENTIFIER = "transactionTypeIdentifier";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE_IDENTIFIER)
  @javax.annotation.Nullable
  private String transactionTypeIdentifier;

  public static final String SERIALIZED_NAME_LOCAL_MERCHANT_ID = "localMerchantId";
  @SerializedName(SERIALIZED_NAME_LOCAL_MERCHANT_ID)
  @javax.annotation.Nullable
  private String localMerchantId;

  public CardtransactionInner1() {
  }

  public CardtransactionInner1 cardtransactionId(@javax.annotation.Nullable Integer cardtransactionId) {
    this.cardtransactionId = cardtransactionId;
    return this;
  }

  /**
   * Get cardtransactionId
   * @return cardtransactionId
   */
  @javax.annotation.Nullable
  public Integer getCardtransactionId() {
    return cardtransactionId;
  }

  public void setCardtransactionId(@javax.annotation.Nullable Integer cardtransactionId) {
    this.cardtransactionId = cardtransactionId;
  }


  public CardtransactionInner1 cardId(@javax.annotation.Nullable Integer cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * Get cardId
   * @return cardId
   */
  @javax.annotation.Nullable
  public Integer getCardId() {
    return cardId;
  }

  public void setCardId(@javax.annotation.Nullable Integer cardId) {
    this.cardId = cardId;
  }


  public CardtransactionInner1 walletId(@javax.annotation.Nullable Integer walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Get walletId
   * @return walletId
   */
  @javax.annotation.Nullable
  public Integer getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nullable Integer walletId) {
    this.walletId = walletId;
  }


  public CardtransactionInner1 acquirerId(@javax.annotation.Nullable Integer acquirerId) {
    this.acquirerId = acquirerId;
    return this;
  }

  /**
   * Get acquirerId
   * @return acquirerId
   */
  @javax.annotation.Nullable
  public Integer getAcquirerId() {
    return acquirerId;
  }

  public void setAcquirerId(@javax.annotation.Nullable Integer acquirerId) {
    this.acquirerId = acquirerId;
  }


  public CardtransactionInner1 walletCurrency(@javax.annotation.Nullable String walletCurrency) {
    this.walletCurrency = walletCurrency;
    return this;
  }

  /**
   * Get walletCurrency
   * @return walletCurrency
   */
  @javax.annotation.Nullable
  public String getWalletCurrency() {
    return walletCurrency;
  }

  public void setWalletCurrency(@javax.annotation.Nullable String walletCurrency) {
    this.walletCurrency = walletCurrency;
  }


  public CardtransactionInner1 merchantId(@javax.annotation.Nullable String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Get merchantId
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(@javax.annotation.Nullable String merchantId) {
    this.merchantId = merchantId;
  }


  public CardtransactionInner1 merchantName(@javax.annotation.Nullable String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * Get merchantName
   * @return merchantName
   */
  @javax.annotation.Nullable
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(@javax.annotation.Nullable String merchantName) {
    this.merchantName = merchantName;
  }


  public CardtransactionInner1 merchantAddress(@javax.annotation.Nullable String merchantAddress) {
    this.merchantAddress = merchantAddress;
    return this;
  }

  /**
   * Get merchantAddress
   * @return merchantAddress
   */
  @javax.annotation.Nullable
  public String getMerchantAddress() {
    return merchantAddress;
  }

  public void setMerchantAddress(@javax.annotation.Nullable String merchantAddress) {
    this.merchantAddress = merchantAddress;
  }


  public CardtransactionInner1 merchantCity(@javax.annotation.Nullable String merchantCity) {
    this.merchantCity = merchantCity;
    return this;
  }

  /**
   * Get merchantCity
   * @return merchantCity
   */
  @javax.annotation.Nullable
  public String getMerchantCity() {
    return merchantCity;
  }

  public void setMerchantCity(@javax.annotation.Nullable String merchantCity) {
    this.merchantCity = merchantCity;
  }


  public CardtransactionInner1 merchantCountry(@javax.annotation.Nullable String merchantCountry) {
    this.merchantCountry = merchantCountry;
    return this;
  }

  /**
   * Get merchantCountry
   * @return merchantCountry
   */
  @javax.annotation.Nullable
  public String getMerchantCountry() {
    return merchantCountry;
  }

  public void setMerchantCountry(@javax.annotation.Nullable String merchantCountry) {
    this.merchantCountry = merchantCountry;
  }


  public CardtransactionInner1 mccCode(@javax.annotation.Nullable String mccCode) {
    this.mccCode = mccCode;
    return this;
  }

  /**
   * Get mccCode
   * @return mccCode
   */
  @javax.annotation.Nullable
  public String getMccCode() {
    return mccCode;
  }

  public void setMccCode(@javax.annotation.Nullable String mccCode) {
    this.mccCode = mccCode;
  }


  public CardtransactionInner1 paymentLocalTime(@javax.annotation.Nullable String paymentLocalTime) {
    this.paymentLocalTime = paymentLocalTime;
    return this;
  }

  /**
   * Get paymentLocalTime
   * @return paymentLocalTime
   */
  @javax.annotation.Nullable
  public String getPaymentLocalTime() {
    return paymentLocalTime;
  }

  public void setPaymentLocalTime(@javax.annotation.Nullable String paymentLocalTime) {
    this.paymentLocalTime = paymentLocalTime;
  }


  public CardtransactionInner1 publicToken(@javax.annotation.Nullable String publicToken) {
    this.publicToken = publicToken;
    return this;
  }

  /**
   * Get publicToken
   * @return publicToken
   */
  @javax.annotation.Nullable
  public String getPublicToken() {
    return publicToken;
  }

  public void setPublicToken(@javax.annotation.Nullable String publicToken) {
    this.publicToken = publicToken;
  }


  public CardtransactionInner1 paymentAmount(@javax.annotation.Nullable String paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

  /**
   * Get paymentAmount
   * @return paymentAmount
   */
  @javax.annotation.Nullable
  public String getPaymentAmount() {
    return paymentAmount;
  }

  public void setPaymentAmount(@javax.annotation.Nullable String paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public CardtransactionInner1 paymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * The currency of the payment. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies). 
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  public String getPaymentCurrency() {
    return paymentCurrency;
  }

  public void setPaymentCurrency(@javax.annotation.Nullable String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public CardtransactionInner1 fees(@javax.annotation.Nullable String fees) {
    this.fees = fees;
    return this;
  }

  /**
   * Get fees
   * @return fees
   */
  @javax.annotation.Nullable
  public String getFees() {
    return fees;
  }

  public void setFees(@javax.annotation.Nullable String fees) {
    this.fees = fees;
  }


  public CardtransactionInner1 paymentCountry(@javax.annotation.Nullable String paymentCountry) {
    this.paymentCountry = paymentCountry;
    return this;
  }

  /**
   * Get paymentCountry
   * @return paymentCountry
   */
  @javax.annotation.Nullable
  public String getPaymentCountry() {
    return paymentCountry;
  }

  public void setPaymentCountry(@javax.annotation.Nullable String paymentCountry) {
    this.paymentCountry = paymentCountry;
  }


  public CardtransactionInner1 paymentId(@javax.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * Get paymentId
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(@javax.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
  }


  public CardtransactionInner1 paymentStatus(@javax.annotation.Nullable String paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * Payment status.  | Status | Description | Note | | ------ | -------     | --- | | A | Accepted | | | C | Cleared | Offline transactions are processed asynchronously. It may take up to several days.| | I | Declined | | | S | Settled | | | V | Reversed | | | M | MoneySend | | 
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public String getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(@javax.annotation.Nullable String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public CardtransactionInner1 paymentLocalAmount(@javax.annotation.Nullable String paymentLocalAmount) {
    this.paymentLocalAmount = paymentLocalAmount;
    return this;
  }

  /**
   * Get paymentLocalAmount
   * @return paymentLocalAmount
   */
  @javax.annotation.Nullable
  public String getPaymentLocalAmount() {
    return paymentLocalAmount;
  }

  public void setPaymentLocalAmount(@javax.annotation.Nullable String paymentLocalAmount) {
    this.paymentLocalAmount = paymentLocalAmount;
  }


  public CardtransactionInner1 paymentLocalDate(@javax.annotation.Nullable String paymentLocalDate) {
    this.paymentLocalDate = paymentLocalDate;
    return this;
  }

  /**
   * Get paymentLocalDate
   * @return paymentLocalDate
   */
  @javax.annotation.Nullable
  public String getPaymentLocalDate() {
    return paymentLocalDate;
  }

  public void setPaymentLocalDate(@javax.annotation.Nullable String paymentLocalDate) {
    this.paymentLocalDate = paymentLocalDate;
  }


  public CardtransactionInner1 is3DS(@javax.annotation.Nullable Boolean is3DS) {
    this.is3DS = is3DS;
    return this;
  }

  /**
   * Get is3DS
   * @return is3DS
   */
  @javax.annotation.Nullable
  public Boolean getIs3DS() {
    return is3DS;
  }

  public void setIs3DS(@javax.annotation.Nullable Boolean is3DS) {
    this.is3DS = is3DS;
  }


  public CardtransactionInner1 posCardholderPresence(@javax.annotation.Nullable String posCardholderPresence) {
    this.posCardholderPresence = posCardholderPresence;
    return this;
  }

  /**
   * Get posCardholderPresence
   * @return posCardholderPresence
   */
  @javax.annotation.Nullable
  public String getPosCardholderPresence() {
    return posCardholderPresence;
  }

  public void setPosCardholderPresence(@javax.annotation.Nullable String posCardholderPresence) {
    this.posCardholderPresence = posCardholderPresence;
  }


  public CardtransactionInner1 posPostcode(@javax.annotation.Nullable String posPostcode) {
    this.posPostcode = posPostcode;
    return this;
  }

  /**
   * Get posPostcode
   * @return posPostcode
   */
  @javax.annotation.Nullable
  public String getPosPostcode() {
    return posPostcode;
  }

  public void setPosPostcode(@javax.annotation.Nullable String posPostcode) {
    this.posPostcode = posPostcode;
  }


  public CardtransactionInner1 posCountry(@javax.annotation.Nullable String posCountry) {
    this.posCountry = posCountry;
    return this;
  }

  /**
   * Get posCountry
   * @return posCountry
   */
  @javax.annotation.Nullable
  public String getPosCountry() {
    return posCountry;
  }

  public void setPosCountry(@javax.annotation.Nullable String posCountry) {
    this.posCountry = posCountry;
  }


  public CardtransactionInner1 posTerminalId(@javax.annotation.Nullable String posTerminalId) {
    this.posTerminalId = posTerminalId;
    return this;
  }

  /**
   * Get posTerminalId
   * @return posTerminalId
   */
  @javax.annotation.Nullable
  public String getPosTerminalId() {
    return posTerminalId;
  }

  public void setPosTerminalId(@javax.annotation.Nullable String posTerminalId) {
    this.posTerminalId = posTerminalId;
  }


  public CardtransactionInner1 posCardPresence(@javax.annotation.Nullable String posCardPresence) {
    this.posCardPresence = posCardPresence;
    return this;
  }

  /**
   * Get posCardPresence
   * @return posCardPresence
   */
  @javax.annotation.Nullable
  public String getPosCardPresence() {
    return posCardPresence;
  }

  public void setPosCardPresence(@javax.annotation.Nullable String posCardPresence) {
    this.posCardPresence = posCardPresence;
  }


  public CardtransactionInner1 panEntryMethod(@javax.annotation.Nullable String panEntryMethod) {
    this.panEntryMethod = panEntryMethod;
    return this;
  }

  /**
   * Get panEntryMethod
   * @return panEntryMethod
   */
  @javax.annotation.Nullable
  public String getPanEntryMethod() {
    return panEntryMethod;
  }

  public void setPanEntryMethod(@javax.annotation.Nullable String panEntryMethod) {
    this.panEntryMethod = panEntryMethod;
  }


  public CardtransactionInner1 authorizationNote(@javax.annotation.Nullable String authorizationNote) {
    this.authorizationNote = authorizationNote;
    return this;
  }

  /**
   * Get authorizationNote
   * @return authorizationNote
   */
  @javax.annotation.Nullable
  public String getAuthorizationNote() {
    return authorizationNote;
  }

  public void setAuthorizationNote(@javax.annotation.Nullable String authorizationNote) {
    this.authorizationNote = authorizationNote;
  }


  public CardtransactionInner1 authorizationResponseCode(@javax.annotation.Nullable String authorizationResponseCode) {
    this.authorizationResponseCode = authorizationResponseCode;
    return this;
  }

  /**
   * Authorization response code.  | Code | Description | | ---- | ----------- | | 00 | All Good | | 01 | Refer to card issuer Refer | | 03 | Invalid merchant Decline | | 05 | Do not honour Decline | | 10 | Partial Approval Approve | | 13 | Invalid amount Decline | | 14 | Invalid card number (no such number) Decline | | 17 | Customer Cancellation Decline | | 33 | Expired card (Capture) Decline &amp; Pickup | | 41 | Lost card (Capture) Decline &amp; Pickup | | 43 | Stolen card (Capture) Decline &amp; Pickup | | 51 | Insufficient funds Decline | | 54 | Expired card Decline | | 55 | Incorrect PIN Decline | | 57 | Transaction not permitted to cardholder Decline | | 58 | Transaction not permitted to terminal Decline | | 61 | Exceeds withdrawal amount limit Decline | | 62 | Restricted card Decline | | 63 | Security Violation Decline | | 65 | Exceeds withdrawal frequency limit Decline | | 68 | Response received too late Decline | | 70 | Cardholder to contact issuer Decline | | 75 | Allowable number of PIN tries exceeded Decline | | 82 | Timeout at IEM Decline | | 85 | PIN Unblock request Approve | | 91 | Issuer or switch is inoperative Decline | | N7 | Decline for CVV2 failure Decline | 
   * @return authorizationResponseCode
   */
  @javax.annotation.Nullable
  public String getAuthorizationResponseCode() {
    return authorizationResponseCode;
  }

  public void setAuthorizationResponseCode(@javax.annotation.Nullable String authorizationResponseCode) {
    this.authorizationResponseCode = authorizationResponseCode;
  }


  public CardtransactionInner1 authorizationIssuerId(@javax.annotation.Nullable String authorizationIssuerId) {
    this.authorizationIssuerId = authorizationIssuerId;
    return this;
  }

  /**
   * Get authorizationIssuerId
   * @return authorizationIssuerId
   */
  @javax.annotation.Nullable
  public String getAuthorizationIssuerId() {
    return authorizationIssuerId;
  }

  public void setAuthorizationIssuerId(@javax.annotation.Nullable String authorizationIssuerId) {
    this.authorizationIssuerId = authorizationIssuerId;
  }


  public CardtransactionInner1 authorizationIssuerTime(@javax.annotation.Nullable String authorizationIssuerTime) {
    this.authorizationIssuerTime = authorizationIssuerTime;
    return this;
  }

  /**
   * Get authorizationIssuerTime
   * @return authorizationIssuerTime
   */
  @javax.annotation.Nullable
  public String getAuthorizationIssuerTime() {
    return authorizationIssuerTime;
  }

  public void setAuthorizationIssuerTime(@javax.annotation.Nullable String authorizationIssuerTime) {
    this.authorizationIssuerTime = authorizationIssuerTime;
  }


  public CardtransactionInner1 authorizationMti(@javax.annotation.Nullable String authorizationMti) {
    this.authorizationMti = authorizationMti;
    return this;
  }

  /**
   * Authorization Message Type Identifier. Please rely on the &#x60;paymentStatus&#x60; value. 
   * @return authorizationMti
   */
  @javax.annotation.Nullable
  public String getAuthorizationMti() {
    return authorizationMti;
  }

  public void setAuthorizationMti(@javax.annotation.Nullable String authorizationMti) {
    this.authorizationMti = authorizationMti;
  }


  public CardtransactionInner1 authorizedBalance(@javax.annotation.Nullable String authorizedBalance) {
    this.authorizedBalance = authorizedBalance;
    return this;
  }

  /**
   * Get authorizedBalance
   * @return authorizedBalance
   */
  @javax.annotation.Nullable
  public String getAuthorizedBalance() {
    return authorizedBalance;
  }

  public void setAuthorizedBalance(@javax.annotation.Nullable String authorizedBalance) {
    this.authorizedBalance = authorizedBalance;
  }


  public CardtransactionInner1 limitAtmYear(@javax.annotation.Nullable String limitAtmYear) {
    this.limitAtmYear = limitAtmYear;
    return this;
  }

  /**
   * Get limitAtmYear
   * @return limitAtmYear
   */
  @javax.annotation.Nullable
  public String getLimitAtmYear() {
    return limitAtmYear;
  }

  public void setLimitAtmYear(@javax.annotation.Nullable String limitAtmYear) {
    this.limitAtmYear = limitAtmYear;
  }


  public CardtransactionInner1 limitAtmMonth(@javax.annotation.Nullable String limitAtmMonth) {
    this.limitAtmMonth = limitAtmMonth;
    return this;
  }

  /**
   * Get limitAtmMonth
   * @return limitAtmMonth
   */
  @javax.annotation.Nullable
  public String getLimitAtmMonth() {
    return limitAtmMonth;
  }

  public void setLimitAtmMonth(@javax.annotation.Nullable String limitAtmMonth) {
    this.limitAtmMonth = limitAtmMonth;
  }


  public CardtransactionInner1 limitAtmWeek(@javax.annotation.Nullable String limitAtmWeek) {
    this.limitAtmWeek = limitAtmWeek;
    return this;
  }

  /**
   * Get limitAtmWeek
   * @return limitAtmWeek
   */
  @javax.annotation.Nullable
  public String getLimitAtmWeek() {
    return limitAtmWeek;
  }

  public void setLimitAtmWeek(@javax.annotation.Nullable String limitAtmWeek) {
    this.limitAtmWeek = limitAtmWeek;
  }


  public CardtransactionInner1 limitAtmDay(@javax.annotation.Nullable String limitAtmDay) {
    this.limitAtmDay = limitAtmDay;
    return this;
  }

  /**
   * Get limitAtmDay
   * @return limitAtmDay
   */
  @javax.annotation.Nullable
  public String getLimitAtmDay() {
    return limitAtmDay;
  }

  public void setLimitAtmDay(@javax.annotation.Nullable String limitAtmDay) {
    this.limitAtmDay = limitAtmDay;
  }


  public CardtransactionInner1 limitAtmAll(@javax.annotation.Nullable String limitAtmAll) {
    this.limitAtmAll = limitAtmAll;
    return this;
  }

  /**
   * Get limitAtmAll
   * @return limitAtmAll
   */
  @javax.annotation.Nullable
  public String getLimitAtmAll() {
    return limitAtmAll;
  }

  public void setLimitAtmAll(@javax.annotation.Nullable String limitAtmAll) {
    this.limitAtmAll = limitAtmAll;
  }


  public CardtransactionInner1 limitPaymentYear(@javax.annotation.Nullable String limitPaymentYear) {
    this.limitPaymentYear = limitPaymentYear;
    return this;
  }

  /**
   * Get limitPaymentYear
   * @return limitPaymentYear
   */
  @javax.annotation.Nullable
  public String getLimitPaymentYear() {
    return limitPaymentYear;
  }

  public void setLimitPaymentYear(@javax.annotation.Nullable String limitPaymentYear) {
    this.limitPaymentYear = limitPaymentYear;
  }


  public CardtransactionInner1 limitPaymentMonth(@javax.annotation.Nullable String limitPaymentMonth) {
    this.limitPaymentMonth = limitPaymentMonth;
    return this;
  }

  /**
   * Get limitPaymentMonth
   * @return limitPaymentMonth
   */
  @javax.annotation.Nullable
  public String getLimitPaymentMonth() {
    return limitPaymentMonth;
  }

  public void setLimitPaymentMonth(@javax.annotation.Nullable String limitPaymentMonth) {
    this.limitPaymentMonth = limitPaymentMonth;
  }


  public CardtransactionInner1 limitPaymentWeek(@javax.annotation.Nullable String limitPaymentWeek) {
    this.limitPaymentWeek = limitPaymentWeek;
    return this;
  }

  /**
   * Get limitPaymentWeek
   * @return limitPaymentWeek
   */
  @javax.annotation.Nullable
  public String getLimitPaymentWeek() {
    return limitPaymentWeek;
  }

  public void setLimitPaymentWeek(@javax.annotation.Nullable String limitPaymentWeek) {
    this.limitPaymentWeek = limitPaymentWeek;
  }


  public CardtransactionInner1 limitPaymentDay(@javax.annotation.Nullable String limitPaymentDay) {
    this.limitPaymentDay = limitPaymentDay;
    return this;
  }

  /**
   * Get limitPaymentDay
   * @return limitPaymentDay
   */
  @javax.annotation.Nullable
  public String getLimitPaymentDay() {
    return limitPaymentDay;
  }

  public void setLimitPaymentDay(@javax.annotation.Nullable String limitPaymentDay) {
    this.limitPaymentDay = limitPaymentDay;
  }


  public CardtransactionInner1 limitPaymentAll(@javax.annotation.Nullable String limitPaymentAll) {
    this.limitPaymentAll = limitPaymentAll;
    return this;
  }

  /**
   * Get limitPaymentAll
   * @return limitPaymentAll
   */
  @javax.annotation.Nullable
  public String getLimitPaymentAll() {
    return limitPaymentAll;
  }

  public void setLimitPaymentAll(@javax.annotation.Nullable String limitPaymentAll) {
    this.limitPaymentAll = limitPaymentAll;
  }


  public CardtransactionInner1 totalLimitAtmYear(@javax.annotation.Nullable String totalLimitAtmYear) {
    this.totalLimitAtmYear = totalLimitAtmYear;
    return this;
  }

  /**
   * Get totalLimitAtmYear
   * @return totalLimitAtmYear
   */
  @javax.annotation.Nullable
  public String getTotalLimitAtmYear() {
    return totalLimitAtmYear;
  }

  public void setTotalLimitAtmYear(@javax.annotation.Nullable String totalLimitAtmYear) {
    this.totalLimitAtmYear = totalLimitAtmYear;
  }


  public CardtransactionInner1 totalLimitAtmMonth(@javax.annotation.Nullable String totalLimitAtmMonth) {
    this.totalLimitAtmMonth = totalLimitAtmMonth;
    return this;
  }

  /**
   * Get totalLimitAtmMonth
   * @return totalLimitAtmMonth
   */
  @javax.annotation.Nullable
  public String getTotalLimitAtmMonth() {
    return totalLimitAtmMonth;
  }

  public void setTotalLimitAtmMonth(@javax.annotation.Nullable String totalLimitAtmMonth) {
    this.totalLimitAtmMonth = totalLimitAtmMonth;
  }


  public CardtransactionInner1 totalLimitAtmWeek(@javax.annotation.Nullable String totalLimitAtmWeek) {
    this.totalLimitAtmWeek = totalLimitAtmWeek;
    return this;
  }

  /**
   * Get totalLimitAtmWeek
   * @return totalLimitAtmWeek
   */
  @javax.annotation.Nullable
  public String getTotalLimitAtmWeek() {
    return totalLimitAtmWeek;
  }

  public void setTotalLimitAtmWeek(@javax.annotation.Nullable String totalLimitAtmWeek) {
    this.totalLimitAtmWeek = totalLimitAtmWeek;
  }


  public CardtransactionInner1 totalLimitAtmDay(@javax.annotation.Nullable String totalLimitAtmDay) {
    this.totalLimitAtmDay = totalLimitAtmDay;
    return this;
  }

  /**
   * Get totalLimitAtmDay
   * @return totalLimitAtmDay
   */
  @javax.annotation.Nullable
  public String getTotalLimitAtmDay() {
    return totalLimitAtmDay;
  }

  public void setTotalLimitAtmDay(@javax.annotation.Nullable String totalLimitAtmDay) {
    this.totalLimitAtmDay = totalLimitAtmDay;
  }


  public CardtransactionInner1 totalLimitAtmAll(@javax.annotation.Nullable String totalLimitAtmAll) {
    this.totalLimitAtmAll = totalLimitAtmAll;
    return this;
  }

  /**
   * Get totalLimitAtmAll
   * @return totalLimitAtmAll
   */
  @javax.annotation.Nullable
  public String getTotalLimitAtmAll() {
    return totalLimitAtmAll;
  }

  public void setTotalLimitAtmAll(@javax.annotation.Nullable String totalLimitAtmAll) {
    this.totalLimitAtmAll = totalLimitAtmAll;
  }


  public CardtransactionInner1 totalLimitPaymentYear(@javax.annotation.Nullable String totalLimitPaymentYear) {
    this.totalLimitPaymentYear = totalLimitPaymentYear;
    return this;
  }

  /**
   * Get totalLimitPaymentYear
   * @return totalLimitPaymentYear
   */
  @javax.annotation.Nullable
  public String getTotalLimitPaymentYear() {
    return totalLimitPaymentYear;
  }

  public void setTotalLimitPaymentYear(@javax.annotation.Nullable String totalLimitPaymentYear) {
    this.totalLimitPaymentYear = totalLimitPaymentYear;
  }


  public CardtransactionInner1 totalLimitPaymentMonth(@javax.annotation.Nullable String totalLimitPaymentMonth) {
    this.totalLimitPaymentMonth = totalLimitPaymentMonth;
    return this;
  }

  /**
   * Get totalLimitPaymentMonth
   * @return totalLimitPaymentMonth
   */
  @javax.annotation.Nullable
  public String getTotalLimitPaymentMonth() {
    return totalLimitPaymentMonth;
  }

  public void setTotalLimitPaymentMonth(@javax.annotation.Nullable String totalLimitPaymentMonth) {
    this.totalLimitPaymentMonth = totalLimitPaymentMonth;
  }


  public CardtransactionInner1 totalLimitPaymentWeek(@javax.annotation.Nullable String totalLimitPaymentWeek) {
    this.totalLimitPaymentWeek = totalLimitPaymentWeek;
    return this;
  }

  /**
   * Get totalLimitPaymentWeek
   * @return totalLimitPaymentWeek
   */
  @javax.annotation.Nullable
  public String getTotalLimitPaymentWeek() {
    return totalLimitPaymentWeek;
  }

  public void setTotalLimitPaymentWeek(@javax.annotation.Nullable String totalLimitPaymentWeek) {
    this.totalLimitPaymentWeek = totalLimitPaymentWeek;
  }


  public CardtransactionInner1 totalLimitPaymentDay(@javax.annotation.Nullable String totalLimitPaymentDay) {
    this.totalLimitPaymentDay = totalLimitPaymentDay;
    return this;
  }

  /**
   * Get totalLimitPaymentDay
   * @return totalLimitPaymentDay
   */
  @javax.annotation.Nullable
  public String getTotalLimitPaymentDay() {
    return totalLimitPaymentDay;
  }

  public void setTotalLimitPaymentDay(@javax.annotation.Nullable String totalLimitPaymentDay) {
    this.totalLimitPaymentDay = totalLimitPaymentDay;
  }


  public CardtransactionInner1 totalLimitPaymentAll(@javax.annotation.Nullable String totalLimitPaymentAll) {
    this.totalLimitPaymentAll = totalLimitPaymentAll;
    return this;
  }

  /**
   * Get totalLimitPaymentAll
   * @return totalLimitPaymentAll
   */
  @javax.annotation.Nullable
  public String getTotalLimitPaymentAll() {
    return totalLimitPaymentAll;
  }

  public void setTotalLimitPaymentAll(@javax.annotation.Nullable String totalLimitPaymentAll) {
    this.totalLimitPaymentAll = totalLimitPaymentAll;
  }


  public CardtransactionInner1 cardDigitalizationExternalId(@javax.annotation.Nullable String cardDigitalizationExternalId) {
    this.cardDigitalizationExternalId = cardDigitalizationExternalId;
    return this;
  }

  /**
   * Get cardDigitalizationExternalId
   * @return cardDigitalizationExternalId
   */
  @javax.annotation.Nullable
  public String getCardDigitalizationExternalId() {
    return cardDigitalizationExternalId;
  }

  public void setCardDigitalizationExternalId(@javax.annotation.Nullable String cardDigitalizationExternalId) {
    this.cardDigitalizationExternalId = cardDigitalizationExternalId;
  }


  public CardtransactionInner1 totalRows(@javax.annotation.Nullable Integer totalRows) {
    this.totalRows = totalRows;
    return this;
  }

  /**
   * Get totalRows
   * @return totalRows
   */
  @javax.annotation.Nullable
  public Integer getTotalRows() {
    return totalRows;
  }

  public void setTotalRows(@javax.annotation.Nullable Integer totalRows) {
    this.totalRows = totalRows;
  }


  public CardtransactionInner1 optimizedMerchantName(@javax.annotation.Nullable String optimizedMerchantName) {
    this.optimizedMerchantName = optimizedMerchantName;
    return this;
  }

  /**
   * Get optimizedMerchantName
   * @return optimizedMerchantName
   */
  @javax.annotation.Nullable
  public String getOptimizedMerchantName() {
    return optimizedMerchantName;
  }

  public void setOptimizedMerchantName(@javax.annotation.Nullable String optimizedMerchantName) {
    this.optimizedMerchantName = optimizedMerchantName;
  }


  public CardtransactionInner1 merchantLogo(@javax.annotation.Nullable String merchantLogo) {
    this.merchantLogo = merchantLogo;
    return this;
  }

  /**
   * Get merchantLogo
   * @return merchantLogo
   */
  @javax.annotation.Nullable
  public String getMerchantLogo() {
    return merchantLogo;
  }

  public void setMerchantLogo(@javax.annotation.Nullable String merchantLogo) {
    this.merchantLogo = merchantLogo;
  }


  public CardtransactionInner1 merchantCategory(@javax.annotation.Nullable String merchantCategory) {
    this.merchantCategory = merchantCategory;
    return this;
  }

  /**
   * Get merchantCategory
   * @return merchantCategory
   */
  @javax.annotation.Nullable
  public String getMerchantCategory() {
    return merchantCategory;
  }

  public void setMerchantCategory(@javax.annotation.Nullable String merchantCategory) {
    this.merchantCategory = merchantCategory;
  }


  public CardtransactionInner1 transactionSubtype(@javax.annotation.Nullable TransactionSubtypeEnum transactionSubtype) {
    this.transactionSubtype = transactionSubtype;
    return this;
  }

  /**
   * Additional information regarding the type of card transaction. Values can be:   * &#x60;OFT&#x60; – Offline transaction   * &#x60;PRE&#x60; – Preauthorization   * &#x60;SEP&#x60; – Second presentment 
   * @return transactionSubtype
   */
  @javax.annotation.Nullable
  public TransactionSubtypeEnum getTransactionSubtype() {
    return transactionSubtype;
  }

  public void setTransactionSubtype(@javax.annotation.Nullable TransactionSubtypeEnum transactionSubtype) {
    this.transactionSubtype = transactionSubtype;
  }


  public CardtransactionInner1 _3dsExemptionType(@javax.annotation.Nullable String _3dsExemptionType) {
    this._3dsExemptionType = _3dsExemptionType;
    return this;
  }

  /**
   * Indicates why the transaction was exempted for 3DS authentication. See [3DS Exemption Type](/guide/cards/transactions.html#_3ds-exemption-type-3dsexemptiontype) for the value list. 
   * @return _3dsExemptionType
   */
  @javax.annotation.Nullable
  public String get3dsExemptionType() {
    return _3dsExemptionType;
  }

  public void set3dsExemptionType(@javax.annotation.Nullable String _3dsExemptionType) {
    this._3dsExemptionType = _3dsExemptionType;
  }


  public CardtransactionInner1 receiverData(@javax.annotation.Nullable String receiverData) {
    this.receiverData = receiverData;
    return this;
  }

  /**
   * For MoneySend transactions, information regarding the receiver.
   * @return receiverData
   */
  @javax.annotation.Nullable
  public String getReceiverData() {
    return receiverData;
  }

  public void setReceiverData(@javax.annotation.Nullable String receiverData) {
    this.receiverData = receiverData;
  }


  public CardtransactionInner1 senderData(@javax.annotation.Nullable String senderData) {
    this.senderData = senderData;
    return this;
  }

  /**
   * For MoneySend transactions, information regarding the sender.
   * @return senderData
   */
  @javax.annotation.Nullable
  public String getSenderData() {
    return senderData;
  }

  public void setSenderData(@javax.annotation.Nullable String senderData) {
    this.senderData = senderData;
  }


  public CardtransactionInner1 transactionTypeIdentifier(@javax.annotation.Nullable String transactionTypeIdentifier) {
    this.transactionTypeIdentifier = transactionTypeIdentifier;
    return this;
  }

  /**
   * For MoneySend transactions, code indicating the type of transaction and the source of funds. Can be:   * &#x60;C07&#x60; – Person-to-Person Transfer   * &#x60;C52&#x60; – General Transfer to Own Account   * &#x60;C53&#x60; – Agent Cash Out   * &#x60;C54&#x60; – Payment of Own Credit Card Bill   * &#x60;C55&#x60; – Business Disbursement   * &#x60;C56&#x60; – Government/Non-profit Disbursement   * &#x60;C57&#x60; – Rapid Merchant Settlement   * &#x60;C59&#x60; – Cash-in at Point of Sale   * &#x60;C65&#x60; – General Business-to-Business Transfer 
   * @return transactionTypeIdentifier
   */
  @javax.annotation.Nullable
  public String getTransactionTypeIdentifier() {
    return transactionTypeIdentifier;
  }

  public void setTransactionTypeIdentifier(@javax.annotation.Nullable String transactionTypeIdentifier) {
    this.transactionTypeIdentifier = transactionTypeIdentifier;
  }


  public CardtransactionInner1 localMerchantId(@javax.annotation.Nullable String localMerchantId) {
    this.localMerchantId = localMerchantId;
    return this;
  }

  /**
   * Indicates the merchant&#39;s SIREN or SIRET if available.
   * @return localMerchantId
   */
  @javax.annotation.Nullable
  public String getLocalMerchantId() {
    return localMerchantId;
  }

  public void setLocalMerchantId(@javax.annotation.Nullable String localMerchantId) {
    this.localMerchantId = localMerchantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardtransactionInner1 cardtransactionInner1 = (CardtransactionInner1) o;
    return Objects.equals(this.cardtransactionId, cardtransactionInner1.cardtransactionId) &&
        Objects.equals(this.cardId, cardtransactionInner1.cardId) &&
        Objects.equals(this.walletId, cardtransactionInner1.walletId) &&
        Objects.equals(this.acquirerId, cardtransactionInner1.acquirerId) &&
        Objects.equals(this.walletCurrency, cardtransactionInner1.walletCurrency) &&
        Objects.equals(this.merchantId, cardtransactionInner1.merchantId) &&
        Objects.equals(this.merchantName, cardtransactionInner1.merchantName) &&
        Objects.equals(this.merchantAddress, cardtransactionInner1.merchantAddress) &&
        Objects.equals(this.merchantCity, cardtransactionInner1.merchantCity) &&
        Objects.equals(this.merchantCountry, cardtransactionInner1.merchantCountry) &&
        Objects.equals(this.mccCode, cardtransactionInner1.mccCode) &&
        Objects.equals(this.paymentLocalTime, cardtransactionInner1.paymentLocalTime) &&
        Objects.equals(this.publicToken, cardtransactionInner1.publicToken) &&
        Objects.equals(this.paymentAmount, cardtransactionInner1.paymentAmount) &&
        Objects.equals(this.paymentCurrency, cardtransactionInner1.paymentCurrency) &&
        Objects.equals(this.fees, cardtransactionInner1.fees) &&
        Objects.equals(this.paymentCountry, cardtransactionInner1.paymentCountry) &&
        Objects.equals(this.paymentId, cardtransactionInner1.paymentId) &&
        Objects.equals(this.paymentStatus, cardtransactionInner1.paymentStatus) &&
        Objects.equals(this.paymentLocalAmount, cardtransactionInner1.paymentLocalAmount) &&
        Objects.equals(this.paymentLocalDate, cardtransactionInner1.paymentLocalDate) &&
        Objects.equals(this.is3DS, cardtransactionInner1.is3DS) &&
        Objects.equals(this.posCardholderPresence, cardtransactionInner1.posCardholderPresence) &&
        Objects.equals(this.posPostcode, cardtransactionInner1.posPostcode) &&
        Objects.equals(this.posCountry, cardtransactionInner1.posCountry) &&
        Objects.equals(this.posTerminalId, cardtransactionInner1.posTerminalId) &&
        Objects.equals(this.posCardPresence, cardtransactionInner1.posCardPresence) &&
        Objects.equals(this.panEntryMethod, cardtransactionInner1.panEntryMethod) &&
        Objects.equals(this.authorizationNote, cardtransactionInner1.authorizationNote) &&
        Objects.equals(this.authorizationResponseCode, cardtransactionInner1.authorizationResponseCode) &&
        Objects.equals(this.authorizationIssuerId, cardtransactionInner1.authorizationIssuerId) &&
        Objects.equals(this.authorizationIssuerTime, cardtransactionInner1.authorizationIssuerTime) &&
        Objects.equals(this.authorizationMti, cardtransactionInner1.authorizationMti) &&
        Objects.equals(this.authorizedBalance, cardtransactionInner1.authorizedBalance) &&
        Objects.equals(this.limitAtmYear, cardtransactionInner1.limitAtmYear) &&
        Objects.equals(this.limitAtmMonth, cardtransactionInner1.limitAtmMonth) &&
        Objects.equals(this.limitAtmWeek, cardtransactionInner1.limitAtmWeek) &&
        Objects.equals(this.limitAtmDay, cardtransactionInner1.limitAtmDay) &&
        Objects.equals(this.limitAtmAll, cardtransactionInner1.limitAtmAll) &&
        Objects.equals(this.limitPaymentYear, cardtransactionInner1.limitPaymentYear) &&
        Objects.equals(this.limitPaymentMonth, cardtransactionInner1.limitPaymentMonth) &&
        Objects.equals(this.limitPaymentWeek, cardtransactionInner1.limitPaymentWeek) &&
        Objects.equals(this.limitPaymentDay, cardtransactionInner1.limitPaymentDay) &&
        Objects.equals(this.limitPaymentAll, cardtransactionInner1.limitPaymentAll) &&
        Objects.equals(this.totalLimitAtmYear, cardtransactionInner1.totalLimitAtmYear) &&
        Objects.equals(this.totalLimitAtmMonth, cardtransactionInner1.totalLimitAtmMonth) &&
        Objects.equals(this.totalLimitAtmWeek, cardtransactionInner1.totalLimitAtmWeek) &&
        Objects.equals(this.totalLimitAtmDay, cardtransactionInner1.totalLimitAtmDay) &&
        Objects.equals(this.totalLimitAtmAll, cardtransactionInner1.totalLimitAtmAll) &&
        Objects.equals(this.totalLimitPaymentYear, cardtransactionInner1.totalLimitPaymentYear) &&
        Objects.equals(this.totalLimitPaymentMonth, cardtransactionInner1.totalLimitPaymentMonth) &&
        Objects.equals(this.totalLimitPaymentWeek, cardtransactionInner1.totalLimitPaymentWeek) &&
        Objects.equals(this.totalLimitPaymentDay, cardtransactionInner1.totalLimitPaymentDay) &&
        Objects.equals(this.totalLimitPaymentAll, cardtransactionInner1.totalLimitPaymentAll) &&
        Objects.equals(this.cardDigitalizationExternalId, cardtransactionInner1.cardDigitalizationExternalId) &&
        Objects.equals(this.totalRows, cardtransactionInner1.totalRows) &&
        Objects.equals(this.optimizedMerchantName, cardtransactionInner1.optimizedMerchantName) &&
        Objects.equals(this.merchantLogo, cardtransactionInner1.merchantLogo) &&
        Objects.equals(this.merchantCategory, cardtransactionInner1.merchantCategory) &&
        Objects.equals(this.transactionSubtype, cardtransactionInner1.transactionSubtype) &&
        Objects.equals(this._3dsExemptionType, cardtransactionInner1._3dsExemptionType) &&
        Objects.equals(this.receiverData, cardtransactionInner1.receiverData) &&
        Objects.equals(this.senderData, cardtransactionInner1.senderData) &&
        Objects.equals(this.transactionTypeIdentifier, cardtransactionInner1.transactionTypeIdentifier) &&
        Objects.equals(this.localMerchantId, cardtransactionInner1.localMerchantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardtransactionId, cardId, walletId, acquirerId, walletCurrency, merchantId, merchantName, merchantAddress, merchantCity, merchantCountry, mccCode, paymentLocalTime, publicToken, paymentAmount, paymentCurrency, fees, paymentCountry, paymentId, paymentStatus, paymentLocalAmount, paymentLocalDate, is3DS, posCardholderPresence, posPostcode, posCountry, posTerminalId, posCardPresence, panEntryMethod, authorizationNote, authorizationResponseCode, authorizationIssuerId, authorizationIssuerTime, authorizationMti, authorizedBalance, limitAtmYear, limitAtmMonth, limitAtmWeek, limitAtmDay, limitAtmAll, limitPaymentYear, limitPaymentMonth, limitPaymentWeek, limitPaymentDay, limitPaymentAll, totalLimitAtmYear, totalLimitAtmMonth, totalLimitAtmWeek, totalLimitAtmDay, totalLimitAtmAll, totalLimitPaymentYear, totalLimitPaymentMonth, totalLimitPaymentWeek, totalLimitPaymentDay, totalLimitPaymentAll, cardDigitalizationExternalId, totalRows, optimizedMerchantName, merchantLogo, merchantCategory, transactionSubtype, _3dsExemptionType, receiverData, senderData, transactionTypeIdentifier, localMerchantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardtransactionInner1 {\n");
    sb.append("    cardtransactionId: ").append(toIndentedString(cardtransactionId)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    acquirerId: ").append(toIndentedString(acquirerId)).append("\n");
    sb.append("    walletCurrency: ").append(toIndentedString(walletCurrency)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantAddress: ").append(toIndentedString(merchantAddress)).append("\n");
    sb.append("    merchantCity: ").append(toIndentedString(merchantCity)).append("\n");
    sb.append("    merchantCountry: ").append(toIndentedString(merchantCountry)).append("\n");
    sb.append("    mccCode: ").append(toIndentedString(mccCode)).append("\n");
    sb.append("    paymentLocalTime: ").append(toIndentedString(paymentLocalTime)).append("\n");
    sb.append("    publicToken: ").append(toIndentedString(publicToken)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    paymentCountry: ").append(toIndentedString(paymentCountry)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    paymentLocalAmount: ").append(toIndentedString(paymentLocalAmount)).append("\n");
    sb.append("    paymentLocalDate: ").append(toIndentedString(paymentLocalDate)).append("\n");
    sb.append("    is3DS: ").append(toIndentedString(is3DS)).append("\n");
    sb.append("    posCardholderPresence: ").append(toIndentedString(posCardholderPresence)).append("\n");
    sb.append("    posPostcode: ").append(toIndentedString(posPostcode)).append("\n");
    sb.append("    posCountry: ").append(toIndentedString(posCountry)).append("\n");
    sb.append("    posTerminalId: ").append(toIndentedString(posTerminalId)).append("\n");
    sb.append("    posCardPresence: ").append(toIndentedString(posCardPresence)).append("\n");
    sb.append("    panEntryMethod: ").append(toIndentedString(panEntryMethod)).append("\n");
    sb.append("    authorizationNote: ").append(toIndentedString(authorizationNote)).append("\n");
    sb.append("    authorizationResponseCode: ").append(toIndentedString(authorizationResponseCode)).append("\n");
    sb.append("    authorizationIssuerId: ").append(toIndentedString(authorizationIssuerId)).append("\n");
    sb.append("    authorizationIssuerTime: ").append(toIndentedString(authorizationIssuerTime)).append("\n");
    sb.append("    authorizationMti: ").append(toIndentedString(authorizationMti)).append("\n");
    sb.append("    authorizedBalance: ").append(toIndentedString(authorizedBalance)).append("\n");
    sb.append("    limitAtmYear: ").append(toIndentedString(limitAtmYear)).append("\n");
    sb.append("    limitAtmMonth: ").append(toIndentedString(limitAtmMonth)).append("\n");
    sb.append("    limitAtmWeek: ").append(toIndentedString(limitAtmWeek)).append("\n");
    sb.append("    limitAtmDay: ").append(toIndentedString(limitAtmDay)).append("\n");
    sb.append("    limitAtmAll: ").append(toIndentedString(limitAtmAll)).append("\n");
    sb.append("    limitPaymentYear: ").append(toIndentedString(limitPaymentYear)).append("\n");
    sb.append("    limitPaymentMonth: ").append(toIndentedString(limitPaymentMonth)).append("\n");
    sb.append("    limitPaymentWeek: ").append(toIndentedString(limitPaymentWeek)).append("\n");
    sb.append("    limitPaymentDay: ").append(toIndentedString(limitPaymentDay)).append("\n");
    sb.append("    limitPaymentAll: ").append(toIndentedString(limitPaymentAll)).append("\n");
    sb.append("    totalLimitAtmYear: ").append(toIndentedString(totalLimitAtmYear)).append("\n");
    sb.append("    totalLimitAtmMonth: ").append(toIndentedString(totalLimitAtmMonth)).append("\n");
    sb.append("    totalLimitAtmWeek: ").append(toIndentedString(totalLimitAtmWeek)).append("\n");
    sb.append("    totalLimitAtmDay: ").append(toIndentedString(totalLimitAtmDay)).append("\n");
    sb.append("    totalLimitAtmAll: ").append(toIndentedString(totalLimitAtmAll)).append("\n");
    sb.append("    totalLimitPaymentYear: ").append(toIndentedString(totalLimitPaymentYear)).append("\n");
    sb.append("    totalLimitPaymentMonth: ").append(toIndentedString(totalLimitPaymentMonth)).append("\n");
    sb.append("    totalLimitPaymentWeek: ").append(toIndentedString(totalLimitPaymentWeek)).append("\n");
    sb.append("    totalLimitPaymentDay: ").append(toIndentedString(totalLimitPaymentDay)).append("\n");
    sb.append("    totalLimitPaymentAll: ").append(toIndentedString(totalLimitPaymentAll)).append("\n");
    sb.append("    cardDigitalizationExternalId: ").append(toIndentedString(cardDigitalizationExternalId)).append("\n");
    sb.append("    totalRows: ").append(toIndentedString(totalRows)).append("\n");
    sb.append("    optimizedMerchantName: ").append(toIndentedString(optimizedMerchantName)).append("\n");
    sb.append("    merchantLogo: ").append(toIndentedString(merchantLogo)).append("\n");
    sb.append("    merchantCategory: ").append(toIndentedString(merchantCategory)).append("\n");
    sb.append("    transactionSubtype: ").append(toIndentedString(transactionSubtype)).append("\n");
    sb.append("    _3dsExemptionType: ").append(toIndentedString(_3dsExemptionType)).append("\n");
    sb.append("    receiverData: ").append(toIndentedString(receiverData)).append("\n");
    sb.append("    senderData: ").append(toIndentedString(senderData)).append("\n");
    sb.append("    transactionTypeIdentifier: ").append(toIndentedString(transactionTypeIdentifier)).append("\n");
    sb.append("    localMerchantId: ").append(toIndentedString(localMerchantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardtransactionId");
    openapiFields.add("cardId");
    openapiFields.add("walletId");
    openapiFields.add("acquirerId");
    openapiFields.add("walletCurrency");
    openapiFields.add("merchantId");
    openapiFields.add("merchantName");
    openapiFields.add("merchantAddress");
    openapiFields.add("merchantCity");
    openapiFields.add("merchantCountry");
    openapiFields.add("mccCode");
    openapiFields.add("paymentLocalTime");
    openapiFields.add("publicToken");
    openapiFields.add("paymentAmount");
    openapiFields.add("paymentCurrency");
    openapiFields.add("fees");
    openapiFields.add("paymentCountry");
    openapiFields.add("paymentId");
    openapiFields.add("paymentStatus");
    openapiFields.add("paymentLocalAmount");
    openapiFields.add("paymentLocalDate");
    openapiFields.add("is3DS");
    openapiFields.add("posCardholderPresence");
    openapiFields.add("posPostcode");
    openapiFields.add("posCountry");
    openapiFields.add("posTerminalId");
    openapiFields.add("posCardPresence");
    openapiFields.add("panEntryMethod");
    openapiFields.add("authorizationNote");
    openapiFields.add("authorizationResponseCode");
    openapiFields.add("authorizationIssuerId");
    openapiFields.add("authorizationIssuerTime");
    openapiFields.add("authorizationMti");
    openapiFields.add("authorizedBalance");
    openapiFields.add("limitAtmYear");
    openapiFields.add("limitAtmMonth");
    openapiFields.add("limitAtmWeek");
    openapiFields.add("limitAtmDay");
    openapiFields.add("limitAtmAll");
    openapiFields.add("limitPaymentYear");
    openapiFields.add("limitPaymentMonth");
    openapiFields.add("limitPaymentWeek");
    openapiFields.add("limitPaymentDay");
    openapiFields.add("limitPaymentAll");
    openapiFields.add("totalLimitAtmYear");
    openapiFields.add("totalLimitAtmMonth");
    openapiFields.add("totalLimitAtmWeek");
    openapiFields.add("totalLimitAtmDay");
    openapiFields.add("totalLimitAtmAll");
    openapiFields.add("totalLimitPaymentYear");
    openapiFields.add("totalLimitPaymentMonth");
    openapiFields.add("totalLimitPaymentWeek");
    openapiFields.add("totalLimitPaymentDay");
    openapiFields.add("totalLimitPaymentAll");
    openapiFields.add("cardDigitalizationExternalId");
    openapiFields.add("totalRows");
    openapiFields.add("optimizedMerchantName");
    openapiFields.add("merchantLogo");
    openapiFields.add("merchantCategory");
    openapiFields.add("transactionSubtype");
    openapiFields.add("3dsExemptionType");
    openapiFields.add("receiverData");
    openapiFields.add("senderData");
    openapiFields.add("transactionTypeIdentifier");
    openapiFields.add("localMerchantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardtransactionInner1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardtransactionInner1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardtransactionInner1 is not found in the empty JSON string", CardtransactionInner1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardtransactionInner1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardtransactionInner1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("walletCurrency") != null && !jsonObj.get("walletCurrency").isJsonNull()) && !jsonObj.get("walletCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletCurrency").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if ((jsonObj.get("merchantAddress") != null && !jsonObj.get("merchantAddress").isJsonNull()) && !jsonObj.get("merchantAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAddress").toString()));
      }
      if ((jsonObj.get("merchantCity") != null && !jsonObj.get("merchantCity").isJsonNull()) && !jsonObj.get("merchantCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCity").toString()));
      }
      if ((jsonObj.get("merchantCountry") != null && !jsonObj.get("merchantCountry").isJsonNull()) && !jsonObj.get("merchantCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCountry").toString()));
      }
      if ((jsonObj.get("mccCode") != null && !jsonObj.get("mccCode").isJsonNull()) && !jsonObj.get("mccCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mccCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mccCode").toString()));
      }
      if ((jsonObj.get("paymentLocalTime") != null && !jsonObj.get("paymentLocalTime").isJsonNull()) && !jsonObj.get("paymentLocalTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentLocalTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentLocalTime").toString()));
      }
      if ((jsonObj.get("publicToken") != null && !jsonObj.get("publicToken").isJsonNull()) && !jsonObj.get("publicToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicToken").toString()));
      }
      if ((jsonObj.get("paymentAmount") != null && !jsonObj.get("paymentAmount").isJsonNull()) && !jsonObj.get("paymentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAmount").toString()));
      }
      if ((jsonObj.get("paymentCurrency") != null && !jsonObj.get("paymentCurrency").isJsonNull()) && !jsonObj.get("paymentCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCurrency").toString()));
      }
      if ((jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) && !jsonObj.get("fees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fees").toString()));
      }
      if ((jsonObj.get("paymentCountry") != null && !jsonObj.get("paymentCountry").isJsonNull()) && !jsonObj.get("paymentCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCountry").toString()));
      }
      if ((jsonObj.get("paymentId") != null && !jsonObj.get("paymentId").isJsonNull()) && !jsonObj.get("paymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentId").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("paymentLocalAmount") != null && !jsonObj.get("paymentLocalAmount").isJsonNull()) && !jsonObj.get("paymentLocalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentLocalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentLocalAmount").toString()));
      }
      if ((jsonObj.get("paymentLocalDate") != null && !jsonObj.get("paymentLocalDate").isJsonNull()) && !jsonObj.get("paymentLocalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentLocalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentLocalDate").toString()));
      }
      if ((jsonObj.get("posCardholderPresence") != null && !jsonObj.get("posCardholderPresence").isJsonNull()) && !jsonObj.get("posCardholderPresence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posCardholderPresence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posCardholderPresence").toString()));
      }
      if ((jsonObj.get("posPostcode") != null && !jsonObj.get("posPostcode").isJsonNull()) && !jsonObj.get("posPostcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posPostcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posPostcode").toString()));
      }
      if ((jsonObj.get("posCountry") != null && !jsonObj.get("posCountry").isJsonNull()) && !jsonObj.get("posCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posCountry").toString()));
      }
      if ((jsonObj.get("posTerminalId") != null && !jsonObj.get("posTerminalId").isJsonNull()) && !jsonObj.get("posTerminalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posTerminalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posTerminalId").toString()));
      }
      if ((jsonObj.get("posCardPresence") != null && !jsonObj.get("posCardPresence").isJsonNull()) && !jsonObj.get("posCardPresence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posCardPresence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posCardPresence").toString()));
      }
      if ((jsonObj.get("panEntryMethod") != null && !jsonObj.get("panEntryMethod").isJsonNull()) && !jsonObj.get("panEntryMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panEntryMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panEntryMethod").toString()));
      }
      if ((jsonObj.get("authorizationNote") != null && !jsonObj.get("authorizationNote").isJsonNull()) && !jsonObj.get("authorizationNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationNote").toString()));
      }
      if ((jsonObj.get("authorizationResponseCode") != null && !jsonObj.get("authorizationResponseCode").isJsonNull()) && !jsonObj.get("authorizationResponseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationResponseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationResponseCode").toString()));
      }
      if ((jsonObj.get("authorizationIssuerId") != null && !jsonObj.get("authorizationIssuerId").isJsonNull()) && !jsonObj.get("authorizationIssuerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationIssuerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationIssuerId").toString()));
      }
      if ((jsonObj.get("authorizationIssuerTime") != null && !jsonObj.get("authorizationIssuerTime").isJsonNull()) && !jsonObj.get("authorizationIssuerTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationIssuerTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationIssuerTime").toString()));
      }
      if ((jsonObj.get("authorizationMti") != null && !jsonObj.get("authorizationMti").isJsonNull()) && !jsonObj.get("authorizationMti").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationMti` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationMti").toString()));
      }
      if ((jsonObj.get("authorizedBalance") != null && !jsonObj.get("authorizedBalance").isJsonNull()) && !jsonObj.get("authorizedBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizedBalance").toString()));
      }
      if ((jsonObj.get("limitAtmYear") != null && !jsonObj.get("limitAtmYear").isJsonNull()) && !jsonObj.get("limitAtmYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitAtmYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitAtmYear").toString()));
      }
      if ((jsonObj.get("limitAtmMonth") != null && !jsonObj.get("limitAtmMonth").isJsonNull()) && !jsonObj.get("limitAtmMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitAtmMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitAtmMonth").toString()));
      }
      if ((jsonObj.get("limitAtmWeek") != null && !jsonObj.get("limitAtmWeek").isJsonNull()) && !jsonObj.get("limitAtmWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitAtmWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitAtmWeek").toString()));
      }
      if ((jsonObj.get("limitAtmDay") != null && !jsonObj.get("limitAtmDay").isJsonNull()) && !jsonObj.get("limitAtmDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitAtmDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitAtmDay").toString()));
      }
      if ((jsonObj.get("limitAtmAll") != null && !jsonObj.get("limitAtmAll").isJsonNull()) && !jsonObj.get("limitAtmAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitAtmAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitAtmAll").toString()));
      }
      if ((jsonObj.get("limitPaymentYear") != null && !jsonObj.get("limitPaymentYear").isJsonNull()) && !jsonObj.get("limitPaymentYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitPaymentYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitPaymentYear").toString()));
      }
      if ((jsonObj.get("limitPaymentMonth") != null && !jsonObj.get("limitPaymentMonth").isJsonNull()) && !jsonObj.get("limitPaymentMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitPaymentMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitPaymentMonth").toString()));
      }
      if ((jsonObj.get("limitPaymentWeek") != null && !jsonObj.get("limitPaymentWeek").isJsonNull()) && !jsonObj.get("limitPaymentWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitPaymentWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitPaymentWeek").toString()));
      }
      if ((jsonObj.get("limitPaymentDay") != null && !jsonObj.get("limitPaymentDay").isJsonNull()) && !jsonObj.get("limitPaymentDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitPaymentDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitPaymentDay").toString()));
      }
      if ((jsonObj.get("limitPaymentAll") != null && !jsonObj.get("limitPaymentAll").isJsonNull()) && !jsonObj.get("limitPaymentAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitPaymentAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitPaymentAll").toString()));
      }
      if ((jsonObj.get("totalLimitAtmYear") != null && !jsonObj.get("totalLimitAtmYear").isJsonNull()) && !jsonObj.get("totalLimitAtmYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitAtmYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitAtmYear").toString()));
      }
      if ((jsonObj.get("totalLimitAtmMonth") != null && !jsonObj.get("totalLimitAtmMonth").isJsonNull()) && !jsonObj.get("totalLimitAtmMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitAtmMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitAtmMonth").toString()));
      }
      if ((jsonObj.get("totalLimitAtmWeek") != null && !jsonObj.get("totalLimitAtmWeek").isJsonNull()) && !jsonObj.get("totalLimitAtmWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitAtmWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitAtmWeek").toString()));
      }
      if ((jsonObj.get("totalLimitAtmDay") != null && !jsonObj.get("totalLimitAtmDay").isJsonNull()) && !jsonObj.get("totalLimitAtmDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitAtmDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitAtmDay").toString()));
      }
      if ((jsonObj.get("totalLimitAtmAll") != null && !jsonObj.get("totalLimitAtmAll").isJsonNull()) && !jsonObj.get("totalLimitAtmAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitAtmAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitAtmAll").toString()));
      }
      if ((jsonObj.get("totalLimitPaymentYear") != null && !jsonObj.get("totalLimitPaymentYear").isJsonNull()) && !jsonObj.get("totalLimitPaymentYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitPaymentYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitPaymentYear").toString()));
      }
      if ((jsonObj.get("totalLimitPaymentMonth") != null && !jsonObj.get("totalLimitPaymentMonth").isJsonNull()) && !jsonObj.get("totalLimitPaymentMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitPaymentMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitPaymentMonth").toString()));
      }
      if ((jsonObj.get("totalLimitPaymentWeek") != null && !jsonObj.get("totalLimitPaymentWeek").isJsonNull()) && !jsonObj.get("totalLimitPaymentWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitPaymentWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitPaymentWeek").toString()));
      }
      if ((jsonObj.get("totalLimitPaymentDay") != null && !jsonObj.get("totalLimitPaymentDay").isJsonNull()) && !jsonObj.get("totalLimitPaymentDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitPaymentDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitPaymentDay").toString()));
      }
      if ((jsonObj.get("totalLimitPaymentAll") != null && !jsonObj.get("totalLimitPaymentAll").isJsonNull()) && !jsonObj.get("totalLimitPaymentAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalLimitPaymentAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalLimitPaymentAll").toString()));
      }
      if ((jsonObj.get("cardDigitalizationExternalId") != null && !jsonObj.get("cardDigitalizationExternalId").isJsonNull()) && !jsonObj.get("cardDigitalizationExternalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardDigitalizationExternalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardDigitalizationExternalId").toString()));
      }
      if ((jsonObj.get("optimizedMerchantName") != null && !jsonObj.get("optimizedMerchantName").isJsonNull()) && !jsonObj.get("optimizedMerchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizedMerchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizedMerchantName").toString()));
      }
      if ((jsonObj.get("merchantLogo") != null && !jsonObj.get("merchantLogo").isJsonNull()) && !jsonObj.get("merchantLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantLogo").toString()));
      }
      if ((jsonObj.get("merchantCategory") != null && !jsonObj.get("merchantCategory").isJsonNull()) && !jsonObj.get("merchantCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategory").toString()));
      }
      if ((jsonObj.get("transactionSubtype") != null && !jsonObj.get("transactionSubtype").isJsonNull()) && !jsonObj.get("transactionSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionSubtype").toString()));
      }
      // validate the optional field `transactionSubtype`
      if (jsonObj.get("transactionSubtype") != null && !jsonObj.get("transactionSubtype").isJsonNull()) {
        TransactionSubtypeEnum.validateJsonElement(jsonObj.get("transactionSubtype"));
      }
      if ((jsonObj.get("3dsExemptionType") != null && !jsonObj.get("3dsExemptionType").isJsonNull()) && !jsonObj.get("3dsExemptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `3dsExemptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("3dsExemptionType").toString()));
      }
      if ((jsonObj.get("receiverData") != null && !jsonObj.get("receiverData").isJsonNull()) && !jsonObj.get("receiverData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverData").toString()));
      }
      if ((jsonObj.get("senderData") != null && !jsonObj.get("senderData").isJsonNull()) && !jsonObj.get("senderData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderData").toString()));
      }
      if ((jsonObj.get("transactionTypeIdentifier") != null && !jsonObj.get("transactionTypeIdentifier").isJsonNull()) && !jsonObj.get("transactionTypeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTypeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTypeIdentifier").toString()));
      }
      if ((jsonObj.get("localMerchantId") != null && !jsonObj.get("localMerchantId").isJsonNull()) && !jsonObj.get("localMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localMerchantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardtransactionInner1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardtransactionInner1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardtransactionInner1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardtransactionInner1.class));

       return (TypeAdapter<T>) new TypeAdapter<CardtransactionInner1>() {
           @Override
           public void write(JsonWriter out, CardtransactionInner1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardtransactionInner1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardtransactionInner1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardtransactionInner1
   * @throws IOException if the JSON string is invalid with respect to CardtransactionInner1
   */
  public static CardtransactionInner1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardtransactionInner1.class);
  }

  /**
   * Convert an instance of CardtransactionInner1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

