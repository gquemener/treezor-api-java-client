/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PutUserRequest {
  public static final String SERIALIZED_NAME_USER_TAG = "userTag";
  @SerializedName(SERIALIZED_NAME_USER_TAG)
  @javax.annotation.Nullable
  private String userTag;

  public static final String SERIALIZED_NAME_SPECIFIED_U_S_PERSON = "specifiedUSPerson";
  @SerializedName(SERIALIZED_NAME_SPECIFIED_U_S_PERSON)
  @javax.annotation.Nullable
  private Integer specifiedUSPerson;

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_TYPE = "controllingPersonType";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_TYPE)
  @javax.annotation.Nullable
  private Integer controllingPersonType;

  public static final String SERIALIZED_NAME_EMPLOYEE_TYPE = "employeeType";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_TYPE)
  @javax.annotation.Nullable
  private Integer employeeType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  @javax.annotation.Nullable
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  @javax.annotation.Nullable
  private String lastname;

  public static final String SERIALIZED_NAME_MIDDLE_NAMES = "middleNames";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAMES)
  @javax.annotation.Nullable
  private String middleNames;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  @javax.annotation.Nullable
  private String birthday;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  @javax.annotation.Nullable
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  @javax.annotation.Nullable
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  @javax.annotation.Nullable
  private String address3;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  @javax.annotation.Nullable
  private String postcode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nullable
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  /**
   * The country in which the end user is using your services. Available values may vary depending on your configuration. Please contact Treezor to configure this feature.  This field is only required when you operate in multiple countries. Otherwise, it either defaults to your country or is set to &#x60;null&#x60;. 
   */
  @JsonAdapter(DistributionCountryEnum.Adapter.class)
  public enum DistributionCountryEnum {
    FR("FR"),
    
    ES("ES"),
    
    IT("IT"),
    
    DE("DE"),
    
    BE("BE"),
    
    NL("NL");

    private String value;

    DistributionCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DistributionCountryEnum fromValue(String value) {
      for (DistributionCountryEnum b : DistributionCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DistributionCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DistributionCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DistributionCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DistributionCountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DistributionCountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISTRIBUTION_COUNTRY = "distributionCountry";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_COUNTRY)
  @javax.annotation.Nullable
  private DistributionCountryEnum distributionCountry;

  public static final String SERIALIZED_NAME_SECONDARY_ADDRESS1 = "secondaryAddress1";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ADDRESS1)
  @javax.annotation.Nullable
  private String secondaryAddress1;

  public static final String SERIALIZED_NAME_SECONDARY_ADDRESS2 = "secondaryAddress2";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ADDRESS2)
  @javax.annotation.Nullable
  private String secondaryAddress2;

  public static final String SERIALIZED_NAME_SECONDARY_ADDRESS3 = "secondaryAddress3";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ADDRESS3)
  @javax.annotation.Nullable
  private String secondaryAddress3;

  public static final String SERIALIZED_NAME_SECONDARY_POSTCODE = "secondaryPostcode";
  @SerializedName(SERIALIZED_NAME_SECONDARY_POSTCODE)
  @javax.annotation.Nullable
  private String secondaryPostcode;

  public static final String SERIALIZED_NAME_SECONDARY_CITY = "secondaryCity";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CITY)
  @javax.annotation.Nullable
  private String secondaryCity;

  public static final String SERIALIZED_NAME_SECONDARY_STATE = "secondaryState";
  @SerializedName(SERIALIZED_NAME_SECONDARY_STATE)
  @javax.annotation.Nullable
  private String secondaryState;

  public static final String SERIALIZED_NAME_SECONDARY_COUNTRY = "secondaryCountry";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COUNTRY)
  @javax.annotation.Nullable
  private String secondaryCountry;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private String phone;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  @javax.annotation.Nullable
  private String mobile;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  @javax.annotation.Nullable
  private String nationality;

  public static final String SERIALIZED_NAME_NATIONALITY_OTHER = "nationalityOther";
  @SerializedName(SERIALIZED_NAME_NATIONALITY_OTHER)
  @javax.annotation.Nullable
  private String nationalityOther;

  public static final String SERIALIZED_NAME_PLACE_OF_BIRTH = "placeOfBirth";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BIRTH)
  @javax.annotation.Nullable
  private String placeOfBirth;

  public static final String SERIALIZED_NAME_BIRTH_COUNTRY = "birthCountry";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTRY)
  @javax.annotation.Nullable
  private String birthCountry;

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  @javax.annotation.Nullable
  private String occupation;

  /**
   * The User income range.
   */
  @JsonAdapter(IncomeRangeEnum.Adapter.class)
  public enum IncomeRangeEnum {
    _0_18("0-18"),
    
    _19_23("19-23"),
    
    _24_27("24-27"),
    
    _28_35("28-35"),
    
    _36_56("36-56"),
    
    _57_("57-*");

    private String value;

    IncomeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncomeRangeEnum fromValue(String value) {
      for (IncomeRangeEnum b : IncomeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncomeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncomeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncomeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncomeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncomeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCOME_RANGE = "incomeRange";
  @SerializedName(SERIALIZED_NAME_INCOME_RANGE)
  @javax.annotation.Nullable
  private IncomeRangeEnum incomeRange;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  @javax.annotation.Nullable
  private String legalName;

  public static final String SERIALIZED_NAME_LEGAL_REGISTRATION_NUMBER = "legalRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_LEGAL_REGISTRATION_NUMBER)
  @javax.annotation.Nullable
  private String legalRegistrationNumber;

  public static final String SERIALIZED_NAME_LEGAL_TVA_NUMBER = "legalTvaNumber";
  @SerializedName(SERIALIZED_NAME_LEGAL_TVA_NUMBER)
  @javax.annotation.Nullable
  private String legalTvaNumber;

  public static final String SERIALIZED_NAME_LEGAL_REGISTRATION_DATE = "legalRegistrationDate";
  @SerializedName(SERIALIZED_NAME_LEGAL_REGISTRATION_DATE)
  @javax.annotation.Nullable
  private LocalDate legalRegistrationDate;

  public static final String SERIALIZED_NAME_LEGAL_FORM = "legalForm";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM)
  @javax.annotation.Nullable
  private String legalForm;

  public static final String SERIALIZED_NAME_LEGAL_SHARE_CAPITAL = "legalShareCapital";
  @SerializedName(SERIALIZED_NAME_LEGAL_SHARE_CAPITAL)
  @javax.annotation.Nullable
  private Integer legalShareCapital;

  public static final String SERIALIZED_NAME_LEGAL_SECTOR = "legalSector";
  @SerializedName(SERIALIZED_NAME_LEGAL_SECTOR)
  @javax.annotation.Nullable
  private String legalSector;

  /**
   * The Business annual turnover (in k€).
   */
  @JsonAdapter(LegalAnnualTurnOverEnum.Adapter.class)
  public enum LegalAnnualTurnOverEnum {
    _0_39("0-39"),
    
    _40_99("40-99"),
    
    _100_249("100-249"),
    
    _250_999("250-999"),
    
    _1000_2999("1000-2999"),
    
    _3000_9999("3000-9999"),
    
    _10000_99999("10000-99999"),
    
    _100000_("100000-*");

    private String value;

    LegalAnnualTurnOverEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalAnnualTurnOverEnum fromValue(String value) {
      for (LegalAnnualTurnOverEnum b : LegalAnnualTurnOverEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalAnnualTurnOverEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalAnnualTurnOverEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalAnnualTurnOverEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalAnnualTurnOverEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalAnnualTurnOverEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ANNUAL_TURN_OVER = "legalAnnualTurnOver";
  @SerializedName(SERIALIZED_NAME_LEGAL_ANNUAL_TURN_OVER)
  @javax.annotation.Nullable
  private LegalAnnualTurnOverEnum legalAnnualTurnOver;

  /**
   * The Business net income range (in k€).
   */
  @JsonAdapter(LegalNetIncomeRangeEnum.Adapter.class)
  public enum LegalNetIncomeRangeEnum {
    _0_4("0-4"),
    
    _5_9("5-9"),
    
    _10_49("10-49"),
    
    _50_149("50-149"),
    
    _150_499("150-499"),
    
    _500_("500-*");

    private String value;

    LegalNetIncomeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalNetIncomeRangeEnum fromValue(String value) {
      for (LegalNetIncomeRangeEnum b : LegalNetIncomeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalNetIncomeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalNetIncomeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalNetIncomeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalNetIncomeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalNetIncomeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_NET_INCOME_RANGE = "legalNetIncomeRange";
  @SerializedName(SERIALIZED_NAME_LEGAL_NET_INCOME_RANGE)
  @javax.annotation.Nullable
  private LegalNetIncomeRangeEnum legalNetIncomeRange;

  /**
   * The Business number of employees.
   */
  @JsonAdapter(LegalNumberOfEmployeeRangeEnum.Adapter.class)
  public enum LegalNumberOfEmployeeRangeEnum {
    _0("0"),
    
    _1_9("1-9"),
    
    _10_99("10-99"),
    
    _100_249("100-249"),
    
    _250_("250-*");

    private String value;

    LegalNumberOfEmployeeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalNumberOfEmployeeRangeEnum fromValue(String value) {
      for (LegalNumberOfEmployeeRangeEnum b : LegalNumberOfEmployeeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalNumberOfEmployeeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalNumberOfEmployeeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalNumberOfEmployeeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalNumberOfEmployeeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalNumberOfEmployeeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_NUMBER_OF_EMPLOYEE_RANGE = "legalNumberOfEmployeeRange";
  @SerializedName(SERIALIZED_NAME_LEGAL_NUMBER_OF_EMPLOYEE_RANGE)
  @javax.annotation.Nullable
  private LegalNumberOfEmployeeRangeEnum legalNumberOfEmployeeRange;

  public static final String SERIALIZED_NAME_EFFECTIVE_BENEFICIARY = "effectiveBeneficiary";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_BENEFICIARY)
  @javax.annotation.Nullable
  private Integer effectiveBeneficiary;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "taxNumber";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  @javax.annotation.Nullable
  private String taxNumber;

  public static final String SERIALIZED_NAME_TAX_RESIDENCE = "taxResidence";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TAX_RESIDENCE)
  @javax.annotation.Nullable
  private String taxResidence;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  @javax.annotation.Nullable
  private String position;

  /**
   * Deprecated. You must use &#x60;personalAssetsRange&#x60; instead.
   */
  @JsonAdapter(PersonalAssetsEnum.Adapter.class)
  public enum PersonalAssetsEnum {
    _0_2("0-2"),
    
    _3_22("3-22"),
    
    _23_128("23-128"),
    
    _129_319("129-319"),
    
    _320_464("320-464"),
    
    _465_("465-");

    private String value;

    PersonalAssetsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersonalAssetsEnum fromValue(String value) {
      for (PersonalAssetsEnum b : PersonalAssetsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PersonalAssetsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersonalAssetsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersonalAssetsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PersonalAssetsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PersonalAssetsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSONAL_ASSETS = "personalAssets";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PERSONAL_ASSETS)
  @javax.annotation.Nullable
  private PersonalAssetsEnum personalAssets;

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes.   Whether the entity and its business units, subsidiaries, and joint ventures have a commercial activity outside of the European Union.  Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True. When set to this value, the next attributes become mandatory.   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   */
  @JsonAdapter(ActivityOutsideEuEnum.Adapter.class)
  public enum ActivityOutsideEuEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ActivityOutsideEuEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityOutsideEuEnum fromValue(Integer value) {
      for (ActivityOutsideEuEnum b : ActivityOutsideEuEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityOutsideEuEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityOutsideEuEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityOutsideEuEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ActivityOutsideEuEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ActivityOutsideEuEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_OUTSIDE_EU = "activityOutsideEu";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_OUTSIDE_EU)
  @javax.annotation.Nullable
  private ActivityOutsideEuEnum activityOutsideEu;

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Whether the entity, its subsidiaries, entities, employees, directors, beneficial owners, or joint ventures are subject to Economic Sanctions.  Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   */
  @JsonAdapter(EconomicSanctionsEnum.Adapter.class)
  public enum EconomicSanctionsEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    EconomicSanctionsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EconomicSanctionsEnum fromValue(Integer value) {
      for (EconomicSanctionsEnum b : EconomicSanctionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EconomicSanctionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EconomicSanctionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EconomicSanctionsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return EconomicSanctionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      EconomicSanctionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ECONOMIC_SANCTIONS = "economicSanctions";
  @SerializedName(SERIALIZED_NAME_ECONOMIC_SANCTIONS)
  @javax.annotation.Nullable
  private EconomicSanctionsEnum economicSanctions;

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Whether the entity, its subsidiaries, or joint ventures, located within or operating from any countries or territories are subject to Comprehensive Sanctions.   Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   */
  @JsonAdapter(ResidentCountriesSanctionsEnum.Adapter.class)
  public enum ResidentCountriesSanctionsEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ResidentCountriesSanctionsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResidentCountriesSanctionsEnum fromValue(Integer value) {
      for (ResidentCountriesSanctionsEnum b : ResidentCountriesSanctionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResidentCountriesSanctionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResidentCountriesSanctionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResidentCountriesSanctionsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ResidentCountriesSanctionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ResidentCountriesSanctionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESIDENT_COUNTRIES_SANCTIONS = "residentCountriesSanctions";
  @SerializedName(SERIALIZED_NAME_RESIDENT_COUNTRIES_SANCTIONS)
  @javax.annotation.Nullable
  private ResidentCountriesSanctionsEnum residentCountriesSanctions;

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Whether the entity, its subsidiaries, or joint ventures, are engaged in transactions, investments, business, or other dealings that directly or indirectly involve or benefit: * Any countries or territories subject to Comprehensive Sanctions (Cuba, Iran, North Korea, Syria, Crimea, Ukrainian Oblasts not controlled by the government, or Russia), or  * Any person or entity which is the target of any Sanctions (“Sanctioned Targets”).  Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   */
  @JsonAdapter(InvolvedSanctionsEnum.Adapter.class)
  public enum InvolvedSanctionsEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    InvolvedSanctionsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvolvedSanctionsEnum fromValue(Integer value) {
      for (InvolvedSanctionsEnum b : InvolvedSanctionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvolvedSanctionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvolvedSanctionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvolvedSanctionsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return InvolvedSanctionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      InvolvedSanctionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOLVED_SANCTIONS = "involvedSanctions";
  @SerializedName(SERIALIZED_NAME_INVOLVED_SANCTIONS)
  @javax.annotation.Nullable
  private InvolvedSanctionsEnum involvedSanctions;

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Defines the scope to which the &#x60;activityOutsideEu&#x60; field applies: * &#x60;0&#x60; – Not applicable * &#x60;1&#x60; – Only the legal entity * &#x60;2&#x60; – The legal entity and all its subsidiaries held at 100% * &#x60;3&#x60; – The legal entity and all its subsidiaries held at 50% or more * &#x60;4&#x60; – The legal entity and a list of subsidiaries  See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   */
  @JsonAdapter(EntitySanctionsQuestionnaireEnum.Adapter.class)
  public enum EntitySanctionsQuestionnaireEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    EntitySanctionsQuestionnaireEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntitySanctionsQuestionnaireEnum fromValue(Integer value) {
      for (EntitySanctionsQuestionnaireEnum b : EntitySanctionsQuestionnaireEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntitySanctionsQuestionnaireEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntitySanctionsQuestionnaireEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntitySanctionsQuestionnaireEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return EntitySanctionsQuestionnaireEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      EntitySanctionsQuestionnaireEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_SANCTIONS_QUESTIONNAIRE = "entitySanctionsQuestionnaire";
  @SerializedName(SERIALIZED_NAME_ENTITY_SANCTIONS_QUESTIONNAIRE)
  @javax.annotation.Nullable
  private EntitySanctionsQuestionnaireEnum entitySanctionsQuestionnaire;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  /**
   * Deprecated. Use &#x60;occupationCategory&#x60; instead.
   */
  @JsonAdapter(OccupationTypeEnum.Adapter.class)
  public enum OccupationTypeEnum {
    SELF_EMPLOYED("self_employed"),
    
    PUBLIC_SECTOR_EMPLOYEES("public_sector_employees"),
    
    PRIVATE_SECTOR_EMPLOYEES("private_sector_employees"),
    
    RETIRED_PEOPLE_AND_STUDENTS("retired_people_and_students"),
    
    WITHOUT_ANY_PROFESSIONAL_ACTIVITY("without_any_professional_activity");

    private String value;

    OccupationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccupationTypeEnum fromValue(String value) {
      for (OccupationTypeEnum b : OccupationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OccupationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccupationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccupationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OccupationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OccupationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCUPATION_TYPE = "occupationType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OCCUPATION_TYPE)
  @javax.annotation.Nullable
  private OccupationTypeEnum occupationType;

  /**
   * The source of funds for opening an account for a company or self-employed person.
   */
  @JsonAdapter(SourceOfFundsEnum.Adapter.class)
  public enum SourceOfFundsEnum {
    DONATION("donation"),
    
    INHERITANCE("inheritance"),
    
    LOAN("loan"),
    
    LOTTERY("lottery"),
    
    PENSION("pension"),
    
    PROCEEDS_FROM_INVESTMENT("proceeds_from_investment"),
    
    PROCEEDS_FROM_SALE("proceeds_from_sale"),
    
    SALARY("salary"),
    
    SAVINGS("savings");

    private String value;

    SourceOfFundsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceOfFundsEnum fromValue(String value) {
      for (SourceOfFundsEnum b : SourceOfFundsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceOfFundsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceOfFundsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceOfFundsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceOfFundsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceOfFundsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_OF_FUNDS = "sourceOfFunds";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_FUNDS)
  @javax.annotation.Nullable
  private SourceOfFundsEnum sourceOfFunds;

  /**
   * Qualify the type of data in the &#x60;legalSector&#x60; field: * If it is set to NACE the legalSector needs to be in a NACE format (4 digits).  * If it is set to NAF (or not set at all) the legalSector needs to be in a NAF format (4 digits followed by a capital letter). 
   */
  @JsonAdapter(LegalSectorTypeEnum.Adapter.class)
  public enum LegalSectorTypeEnum {
    NAF("NAF"),
    
    NACE("NACE");

    private String value;

    LegalSectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalSectorTypeEnum fromValue(String value) {
      for (LegalSectorTypeEnum b : LegalSectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalSectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalSectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalSectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalSectorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalSectorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_SECTOR_TYPE = "legalSectorType";
  @SerializedName(SERIALIZED_NAME_LEGAL_SECTOR_TYPE)
  @javax.annotation.Nullable
  private LegalSectorTypeEnum legalSectorType;

  /**
   * The user is a corporation and is quoted on an organized stock exchange. * &#x60;0&#x60; – No * &#x60;1&#x60; – Yes 
   */
  @JsonAdapter(IsOnStockExchangeEnum.Adapter.class)
  public enum IsOnStockExchangeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    IsOnStockExchangeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsOnStockExchangeEnum fromValue(Integer value) {
      for (IsOnStockExchangeEnum b : IsOnStockExchangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsOnStockExchangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsOnStockExchangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsOnStockExchangeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return IsOnStockExchangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      IsOnStockExchangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IS_ON_STOCK_EXCHANGE = "isOnStockExchange";
  @SerializedName(SERIALIZED_NAME_IS_ON_STOCK_EXCHANGE)
  @javax.annotation.Nullable
  private IsOnStockExchangeEnum isOnStockExchange;

  /**
   * Type of occupation of the user. See [Occupation Category](/guide/users/physical.html#occupation-category-occupationcategory) for the list of values. 
   */
  @JsonAdapter(OccupationCategoryEnum.Adapter.class)
  public enum OccupationCategoryEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15);

    private Integer value;

    OccupationCategoryEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccupationCategoryEnum fromValue(Integer value) {
      for (OccupationCategoryEnum b : OccupationCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OccupationCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccupationCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccupationCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return OccupationCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      OccupationCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCUPATION_CATEGORY = "occupationCategory";
  @SerializedName(SERIALIZED_NAME_OCCUPATION_CATEGORY)
  @javax.annotation.Nullable
  private OccupationCategoryEnum occupationCategory;

  /**
   * The personal assets range of the user. See [Personal Assets Range](/guide/users/physical.html#personal-assets-range-personalassetsrange) for the list of values. 
   */
  @JsonAdapter(PersonalAssetsRangeEnum.Adapter.class)
  public enum PersonalAssetsRangeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    PersonalAssetsRangeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersonalAssetsRangeEnum fromValue(Integer value) {
      for (PersonalAssetsRangeEnum b : PersonalAssetsRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PersonalAssetsRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersonalAssetsRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersonalAssetsRangeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PersonalAssetsRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PersonalAssetsRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSONAL_ASSETS_RANGE = "personalAssetsRange";
  @SerializedName(SERIALIZED_NAME_PERSONAL_ASSETS_RANGE)
  @javax.annotation.Nullable
  private PersonalAssetsRangeEnum personalAssetsRange;

  /**
   * Net monthly income of the user. See [Monthly Income Range](/guide/users/physical.html#monthly-income-range-monthlyincomerange) for the list of values. 
   */
  @JsonAdapter(MonthlyIncomeRangeEnum.Adapter.class)
  public enum MonthlyIncomeRangeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    MonthlyIncomeRangeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthlyIncomeRangeEnum fromValue(Integer value) {
      for (MonthlyIncomeRangeEnum b : MonthlyIncomeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MonthlyIncomeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthlyIncomeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthlyIncomeRangeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MonthlyIncomeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MonthlyIncomeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONTHLY_INCOME_RANGE = "monthlyIncomeRange";
  @SerializedName(SERIALIZED_NAME_MONTHLY_INCOME_RANGE)
  @javax.annotation.Nullable
  private MonthlyIncomeRangeEnum monthlyIncomeRange;

  public PutUserRequest() {
  }

  public PutUserRequest userTag(@javax.annotation.Nullable String userTag) {
    this.userTag = userTag;
    return this;
  }

  /**
   * Custom data.
   * @return userTag
   */
  @javax.annotation.Nullable
  public String getUserTag() {
    return userTag;
  }

  public void setUserTag(@javax.annotation.Nullable String userTag) {
    this.userTag = userTag;
  }


  public PutUserRequest specifiedUSPerson(@javax.annotation.Nullable Integer specifiedUSPerson) {
    this.specifiedUSPerson = specifiedUSPerson;
    return this;
  }

  /**
   * You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers). 
   * @return specifiedUSPerson
   */
  @javax.annotation.Nullable
  public Integer getSpecifiedUSPerson() {
    return specifiedUSPerson;
  }

  public void setSpecifiedUSPerson(@javax.annotation.Nullable Integer specifiedUSPerson) {
    this.specifiedUSPerson = specifiedUSPerson;
  }


  public PutUserRequest controllingPersonType(@javax.annotation.Nullable Integer controllingPersonType) {
    this.controllingPersonType = controllingPersonType;
    return this;
  }

  /**
   * Type of relationship, among the following: * &#x60;0&#x60; – None (default) * &#x60;1&#x60; – Shareholder * &#x60;2&#x60; – Other_relationship * &#x60;3&#x60; – Director 
   * @return controllingPersonType
   */
  @javax.annotation.Nullable
  public Integer getControllingPersonType() {
    return controllingPersonType;
  }

  public void setControllingPersonType(@javax.annotation.Nullable Integer controllingPersonType) {
    this.controllingPersonType = controllingPersonType;
  }


  public PutUserRequest employeeType(@javax.annotation.Nullable Integer employeeType) {
    this.employeeType = employeeType;
    return this;
  }

  /**
   * The tyoe of relationship among the following: * &#x60;0&#x60; – None (default) * &#x60;1&#x60; – Leader * &#x60;2&#x60; – Employee 
   * @return employeeType
   */
  @javax.annotation.Nullable
  public Integer getEmployeeType() {
    return employeeType;
  }

  public void setEmployeeType(@javax.annotation.Nullable Integer employeeType) {
    this.employeeType = employeeType;
  }


  public PutUserRequest title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the user, which can be one of the following: * &#x60;M&#x60; – Stands for mister (Mr.) * &#x60;MME&#x60; – Stands for misses (Mrs.) * &#x60;MLLE&#x60; – Stands for miss 
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public PutUserRequest firstname(@javax.annotation.Nullable String firstname) {
    this.firstname = firstname;
    return this;
  }

  /**
   * The first name of the User.
   * @return firstname
   */
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(@javax.annotation.Nullable String firstname) {
    this.firstname = firstname;
  }


  public PutUserRequest lastname(@javax.annotation.Nullable String lastname) {
    this.lastname = lastname;
    return this;
  }

  /**
   * The last name of the User.
   * @return lastname
   */
  @javax.annotation.Nullable
  public String getLastname() {
    return lastname;
  }

  public void setLastname(@javax.annotation.Nullable String lastname) {
    this.lastname = lastname;
  }


  public PutUserRequest middleNames(@javax.annotation.Nullable String middleNames) {
    this.middleNames = middleNames;
    return this;
  }

  /**
   * The middle names of the User, if any.
   * @return middleNames
   */
  @javax.annotation.Nullable
  public String getMiddleNames() {
    return middleNames;
  }

  public void setMiddleNames(@javax.annotation.Nullable String middleNames) {
    this.middleNames = middleNames;
  }


  public PutUserRequest birthday(@javax.annotation.Nullable String birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * The birth date of the User. Format: YYYY-MM-DD 
   * @return birthday
   */
  @javax.annotation.Nullable
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(@javax.annotation.Nullable String birthday) {
    this.birthday = birthday;
  }


  public PutUserRequest email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the User. Must be valid.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public PutUserRequest address1(@javax.annotation.Nullable String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * The User postal address (main).
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(@javax.annotation.Nullable String address1) {
    this.address1 = address1;
  }


  public PutUserRequest address2(@javax.annotation.Nullable String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * The User postal address (complement). Cannot contain carriage return.
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(@javax.annotation.Nullable String address2) {
    this.address2 = address2;
  }


  public PutUserRequest address3(@javax.annotation.Nullable String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * The User postal address (complement2). Cannot contain carriage return.
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(@javax.annotation.Nullable String address3) {
    this.address3 = address3;
  }


  public PutUserRequest postcode(@javax.annotation.Nullable String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * The User address postcode.
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(@javax.annotation.Nullable String postcode) {
    this.postcode = postcode;
  }


  public PutUserRequest city(@javax.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  /**
   * The User address city.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nullable String city) {
    this.city = city;
  }


  public PutUserRequest state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * The User address state.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public PutUserRequest country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the user&#39;s address.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public PutUserRequest distributionCountry(@javax.annotation.Nullable DistributionCountryEnum distributionCountry) {
    this.distributionCountry = distributionCountry;
    return this;
  }

  /**
   * The country in which the end user is using your services. Available values may vary depending on your configuration. Please contact Treezor to configure this feature.  This field is only required when you operate in multiple countries. Otherwise, it either defaults to your country or is set to &#x60;null&#x60;. 
   * @return distributionCountry
   */
  @javax.annotation.Nullable
  public DistributionCountryEnum getDistributionCountry() {
    return distributionCountry;
  }

  public void setDistributionCountry(@javax.annotation.Nullable DistributionCountryEnum distributionCountry) {
    this.distributionCountry = distributionCountry;
  }


  public PutUserRequest secondaryAddress1(@javax.annotation.Nullable String secondaryAddress1) {
    this.secondaryAddress1 = secondaryAddress1;
    return this;
  }

  /**
   * The User secondary postal address (main).
   * @return secondaryAddress1
   */
  @javax.annotation.Nullable
  public String getSecondaryAddress1() {
    return secondaryAddress1;
  }

  public void setSecondaryAddress1(@javax.annotation.Nullable String secondaryAddress1) {
    this.secondaryAddress1 = secondaryAddress1;
  }


  public PutUserRequest secondaryAddress2(@javax.annotation.Nullable String secondaryAddress2) {
    this.secondaryAddress2 = secondaryAddress2;
    return this;
  }

  /**
   * The User secondary postal address (complement)
   * @return secondaryAddress2
   */
  @javax.annotation.Nullable
  public String getSecondaryAddress2() {
    return secondaryAddress2;
  }

  public void setSecondaryAddress2(@javax.annotation.Nullable String secondaryAddress2) {
    this.secondaryAddress2 = secondaryAddress2;
  }


  public PutUserRequest secondaryAddress3(@javax.annotation.Nullable String secondaryAddress3) {
    this.secondaryAddress3 = secondaryAddress3;
    return this;
  }

  /**
   * The User secondary postal address (complement2)
   * @return secondaryAddress3
   */
  @javax.annotation.Nullable
  public String getSecondaryAddress3() {
    return secondaryAddress3;
  }

  public void setSecondaryAddress3(@javax.annotation.Nullable String secondaryAddress3) {
    this.secondaryAddress3 = secondaryAddress3;
  }


  public PutUserRequest secondaryPostcode(@javax.annotation.Nullable String secondaryPostcode) {
    this.secondaryPostcode = secondaryPostcode;
    return this;
  }

  /**
   * The User secondary address postcode.
   * @return secondaryPostcode
   */
  @javax.annotation.Nullable
  public String getSecondaryPostcode() {
    return secondaryPostcode;
  }

  public void setSecondaryPostcode(@javax.annotation.Nullable String secondaryPostcode) {
    this.secondaryPostcode = secondaryPostcode;
  }


  public PutUserRequest secondaryCity(@javax.annotation.Nullable String secondaryCity) {
    this.secondaryCity = secondaryCity;
    return this;
  }

  /**
   * The User secondary address city.
   * @return secondaryCity
   */
  @javax.annotation.Nullable
  public String getSecondaryCity() {
    return secondaryCity;
  }

  public void setSecondaryCity(@javax.annotation.Nullable String secondaryCity) {
    this.secondaryCity = secondaryCity;
  }


  public PutUserRequest secondaryState(@javax.annotation.Nullable String secondaryState) {
    this.secondaryState = secondaryState;
    return this;
  }

  /**
   * The User secondary address state.
   * @return secondaryState
   */
  @javax.annotation.Nullable
  public String getSecondaryState() {
    return secondaryState;
  }

  public void setSecondaryState(@javax.annotation.Nullable String secondaryState) {
    this.secondaryState = secondaryState;
  }


  public PutUserRequest secondaryCountry(@javax.annotation.Nullable String secondaryCountry) {
    this.secondaryCountry = secondaryCountry;
    return this;
  }

  /**
   * The User secondary address country. Format: ISO  3166-1 alpha-2 
   * @return secondaryCountry
   */
  @javax.annotation.Nullable
  public String getSecondaryCountry() {
    return secondaryCountry;
  }

  public void setSecondaryCountry(@javax.annotation.Nullable String secondaryCountry) {
    this.secondaryCountry = secondaryCountry;
  }


  public PutUserRequest phone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The User phone number in [international E.164 format](https://en.wikipedia.org/wiki/E.164). 
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
  }


  public PutUserRequest mobile(@javax.annotation.Nullable String mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * The User mobile phone number in [international E.164 format](https://en.wikipedia.org/wiki/E.164). 
   * @return mobile
   */
  @javax.annotation.Nullable
  public String getMobile() {
    return mobile;
  }

  public void setMobile(@javax.annotation.Nullable String mobile) {
    this.mobile = mobile;
  }


  public PutUserRequest nationality(@javax.annotation.Nullable String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * The User nationality. Format: ISO 3166-1 alpha-2 
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(@javax.annotation.Nullable String nationality) {
    this.nationality = nationality;
  }


  public PutUserRequest nationalityOther(@javax.annotation.Nullable String nationalityOther) {
    this.nationalityOther = nationalityOther;
    return this;
  }

  /**
   * The User other nationality. Format: ISO 3166-1 alpha-2 
   * @return nationalityOther
   */
  @javax.annotation.Nullable
  public String getNationalityOther() {
    return nationalityOther;
  }

  public void setNationalityOther(@javax.annotation.Nullable String nationalityOther) {
    this.nationalityOther = nationalityOther;
  }


  public PutUserRequest placeOfBirth(@javax.annotation.Nullable String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
    return this;
  }

  /**
   * The User place of birth.
   * @return placeOfBirth
   */
  @javax.annotation.Nullable
  public String getPlaceOfBirth() {
    return placeOfBirth;
  }

  public void setPlaceOfBirth(@javax.annotation.Nullable String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
  }


  public PutUserRequest birthCountry(@javax.annotation.Nullable String birthCountry) {
    this.birthCountry = birthCountry;
    return this;
  }

  /**
   * The User country of Birth. Format: ISO 3166-1 alpha-2 
   * @return birthCountry
   */
  @javax.annotation.Nullable
  public String getBirthCountry() {
    return birthCountry;
  }

  public void setBirthCountry(@javax.annotation.Nullable String birthCountry) {
    this.birthCountry = birthCountry;
  }


  @Deprecated
  public PutUserRequest occupation(@javax.annotation.Nullable String occupation) {
    this.occupation = occupation;
    return this;
  }

  /**
   * Deprecated. You must use the &#x60;occupationCategory&#x60; field instead.
   * @return occupation
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getOccupation() {
    return occupation;
  }

  @Deprecated
  public void setOccupation(@javax.annotation.Nullable String occupation) {
    this.occupation = occupation;
  }


  public PutUserRequest incomeRange(@javax.annotation.Nullable IncomeRangeEnum incomeRange) {
    this.incomeRange = incomeRange;
    return this;
  }

  /**
   * The User income range.
   * @return incomeRange
   */
  @javax.annotation.Nullable
  public IncomeRangeEnum getIncomeRange() {
    return incomeRange;
  }

  public void setIncomeRange(@javax.annotation.Nullable IncomeRangeEnum incomeRange) {
    this.incomeRange = incomeRange;
  }


  public PutUserRequest legalName(@javax.annotation.Nullable String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * The Business legal name.
   * @return legalName
   */
  @javax.annotation.Nullable
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(@javax.annotation.Nullable String legalName) {
    this.legalName = legalName;
  }


  public PutUserRequest legalRegistrationNumber(@javax.annotation.Nullable String legalRegistrationNumber) {
    this.legalRegistrationNumber = legalRegistrationNumber;
    return this;
  }

  /**
   * The Business registration number.
   * @return legalRegistrationNumber
   */
  @javax.annotation.Nullable
  public String getLegalRegistrationNumber() {
    return legalRegistrationNumber;
  }

  public void setLegalRegistrationNumber(@javax.annotation.Nullable String legalRegistrationNumber) {
    this.legalRegistrationNumber = legalRegistrationNumber;
  }


  public PutUserRequest legalTvaNumber(@javax.annotation.Nullable String legalTvaNumber) {
    this.legalTvaNumber = legalTvaNumber;
    return this;
  }

  /**
   * The Business VAT number.
   * @return legalTvaNumber
   */
  @javax.annotation.Nullable
  public String getLegalTvaNumber() {
    return legalTvaNumber;
  }

  public void setLegalTvaNumber(@javax.annotation.Nullable String legalTvaNumber) {
    this.legalTvaNumber = legalTvaNumber;
  }


  public PutUserRequest legalRegistrationDate(@javax.annotation.Nullable LocalDate legalRegistrationDate) {
    this.legalRegistrationDate = legalRegistrationDate;
    return this;
  }

  /**
   * The Business registration date.
   * @return legalRegistrationDate
   */
  @javax.annotation.Nullable
  public LocalDate getLegalRegistrationDate() {
    return legalRegistrationDate;
  }

  public void setLegalRegistrationDate(@javax.annotation.Nullable LocalDate legalRegistrationDate) {
    this.legalRegistrationDate = legalRegistrationDate;
  }


  public PutUserRequest legalForm(@javax.annotation.Nullable String legalForm) {
    this.legalForm = legalForm;
    return this;
  }

  /**
   * The legal form/category of the company.  &lt;br /&gt; You may check out [the authoritative list](https://www.insee.fr/fr/information/2028129) 
   * @return legalForm
   */
  @javax.annotation.Nullable
  public String getLegalForm() {
    return legalForm;
  }

  public void setLegalForm(@javax.annotation.Nullable String legalForm) {
    this.legalForm = legalForm;
  }


  public PutUserRequest legalShareCapital(@javax.annotation.Nullable Integer legalShareCapital) {
    this.legalShareCapital = legalShareCapital;
    return this;
  }

  /**
   * The Business share capital.
   * @return legalShareCapital
   */
  @javax.annotation.Nullable
  public Integer getLegalShareCapital() {
    return legalShareCapital;
  }

  public void setLegalShareCapital(@javax.annotation.Nullable Integer legalShareCapital) {
    this.legalShareCapital = legalShareCapital;
  }


  public PutUserRequest legalSector(@javax.annotation.Nullable String legalSector) {
    this.legalSector = legalSector;
    return this;
  }

  /**
   * The Business Sector of the company (NAF or NACE code in France). The expected format depends on &#x60;legalSectorType&#x60; &lt;br /&gt; You may check out [the authoritative list](https://www.insee.fr/fr/information/2120875) 
   * @return legalSector
   */
  @javax.annotation.Nullable
  public String getLegalSector() {
    return legalSector;
  }

  public void setLegalSector(@javax.annotation.Nullable String legalSector) {
    this.legalSector = legalSector;
  }


  public PutUserRequest legalAnnualTurnOver(@javax.annotation.Nullable LegalAnnualTurnOverEnum legalAnnualTurnOver) {
    this.legalAnnualTurnOver = legalAnnualTurnOver;
    return this;
  }

  /**
   * The Business annual turnover (in k€).
   * @return legalAnnualTurnOver
   */
  @javax.annotation.Nullable
  public LegalAnnualTurnOverEnum getLegalAnnualTurnOver() {
    return legalAnnualTurnOver;
  }

  public void setLegalAnnualTurnOver(@javax.annotation.Nullable LegalAnnualTurnOverEnum legalAnnualTurnOver) {
    this.legalAnnualTurnOver = legalAnnualTurnOver;
  }


  public PutUserRequest legalNetIncomeRange(@javax.annotation.Nullable LegalNetIncomeRangeEnum legalNetIncomeRange) {
    this.legalNetIncomeRange = legalNetIncomeRange;
    return this;
  }

  /**
   * The Business net income range (in k€).
   * @return legalNetIncomeRange
   */
  @javax.annotation.Nullable
  public LegalNetIncomeRangeEnum getLegalNetIncomeRange() {
    return legalNetIncomeRange;
  }

  public void setLegalNetIncomeRange(@javax.annotation.Nullable LegalNetIncomeRangeEnum legalNetIncomeRange) {
    this.legalNetIncomeRange = legalNetIncomeRange;
  }


  public PutUserRequest legalNumberOfEmployeeRange(@javax.annotation.Nullable LegalNumberOfEmployeeRangeEnum legalNumberOfEmployeeRange) {
    this.legalNumberOfEmployeeRange = legalNumberOfEmployeeRange;
    return this;
  }

  /**
   * The Business number of employees.
   * @return legalNumberOfEmployeeRange
   */
  @javax.annotation.Nullable
  public LegalNumberOfEmployeeRangeEnum getLegalNumberOfEmployeeRange() {
    return legalNumberOfEmployeeRange;
  }

  public void setLegalNumberOfEmployeeRange(@javax.annotation.Nullable LegalNumberOfEmployeeRangeEnum legalNumberOfEmployeeRange) {
    this.legalNumberOfEmployeeRange = legalNumberOfEmployeeRange;
  }


  public PutUserRequest effectiveBeneficiary(@javax.annotation.Nullable Integer effectiveBeneficiary) {
    this.effectiveBeneficiary = effectiveBeneficiary;
    return this;
  }

  /**
   * The effective beneficiary shares of the legal entity (e.g., for a beneficiary holding 70% of a company, value must be &#x60;70&#x60;). For shareholders only.
   * @return effectiveBeneficiary
   */
  @javax.annotation.Nullable
  public Integer getEffectiveBeneficiary() {
    return effectiveBeneficiary;
  }

  public void setEffectiveBeneficiary(@javax.annotation.Nullable Integer effectiveBeneficiary) {
    this.effectiveBeneficiary = effectiveBeneficiary;
  }


  public PutUserRequest language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * The User preferred language. Format: ISO 639-1 
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  @Deprecated
  public PutUserRequest taxNumber(@javax.annotation.Nullable String taxNumber) {
    this.taxNumber = taxNumber;
    return this;
  }

  /**
   * Deprecated. Your must use the &#x60;taxResidence&#x60; endpoint.
   * @return taxNumber
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTaxNumber() {
    return taxNumber;
  }

  @Deprecated
  public void setTaxNumber(@javax.annotation.Nullable String taxNumber) {
    this.taxNumber = taxNumber;
  }


  @Deprecated
  public PutUserRequest taxResidence(@javax.annotation.Nullable String taxResidence) {
    this.taxResidence = taxResidence;
    return this;
  }

  /**
   * Deprecated. Your must use the &#x60;taxResidence&#x60; endpoint.
   * @return taxResidence
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTaxResidence() {
    return taxResidence;
  }

  @Deprecated
  public void setTaxResidence(@javax.annotation.Nullable String taxResidence) {
    this.taxResidence = taxResidence;
  }


  public PutUserRequest position(@javax.annotation.Nullable String position) {
    this.position = position;
    return this;
  }

  /**
   * The geographic activity coverage (for NGOs only).
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(@javax.annotation.Nullable String position) {
    this.position = position;
  }


  @Deprecated
  public PutUserRequest personalAssets(@javax.annotation.Nullable PersonalAssetsEnum personalAssets) {
    this.personalAssets = personalAssets;
    return this;
  }

  /**
   * Deprecated. You must use &#x60;personalAssetsRange&#x60; instead.
   * @return personalAssets
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public PersonalAssetsEnum getPersonalAssets() {
    return personalAssets;
  }

  @Deprecated
  public void setPersonalAssets(@javax.annotation.Nullable PersonalAssetsEnum personalAssets) {
    this.personalAssets = personalAssets;
  }


  public PutUserRequest activityOutsideEu(@javax.annotation.Nullable ActivityOutsideEuEnum activityOutsideEu) {
    this.activityOutsideEu = activityOutsideEu;
    return this;
  }

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes.   Whether the entity and its business units, subsidiaries, and joint ventures have a commercial activity outside of the European Union.  Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True. When set to this value, the next attributes become mandatory.   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   * @return activityOutsideEu
   */
  @javax.annotation.Nullable
  public ActivityOutsideEuEnum getActivityOutsideEu() {
    return activityOutsideEu;
  }

  public void setActivityOutsideEu(@javax.annotation.Nullable ActivityOutsideEuEnum activityOutsideEu) {
    this.activityOutsideEu = activityOutsideEu;
  }


  public PutUserRequest economicSanctions(@javax.annotation.Nullable EconomicSanctionsEnum economicSanctions) {
    this.economicSanctions = economicSanctions;
    return this;
  }

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Whether the entity, its subsidiaries, entities, employees, directors, beneficial owners, or joint ventures are subject to Economic Sanctions.  Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   * @return economicSanctions
   */
  @javax.annotation.Nullable
  public EconomicSanctionsEnum getEconomicSanctions() {
    return economicSanctions;
  }

  public void setEconomicSanctions(@javax.annotation.Nullable EconomicSanctionsEnum economicSanctions) {
    this.economicSanctions = economicSanctions;
  }


  public PutUserRequest residentCountriesSanctions(@javax.annotation.Nullable ResidentCountriesSanctionsEnum residentCountriesSanctions) {
    this.residentCountriesSanctions = residentCountriesSanctions;
    return this;
  }

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Whether the entity, its subsidiaries, or joint ventures, located within or operating from any countries or territories are subject to Comprehensive Sanctions.   Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   * @return residentCountriesSanctions
   */
  @javax.annotation.Nullable
  public ResidentCountriesSanctionsEnum getResidentCountriesSanctions() {
    return residentCountriesSanctions;
  }

  public void setResidentCountriesSanctions(@javax.annotation.Nullable ResidentCountriesSanctionsEnum residentCountriesSanctions) {
    this.residentCountriesSanctions = residentCountriesSanctions;
  }


  public PutUserRequest involvedSanctions(@javax.annotation.Nullable InvolvedSanctionsEnum involvedSanctions) {
    this.involvedSanctions = involvedSanctions;
    return this;
  }

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Whether the entity, its subsidiaries, or joint ventures, are engaged in transactions, investments, business, or other dealings that directly or indirectly involve or benefit: * Any countries or territories subject to Comprehensive Sanctions (Cuba, Iran, North Korea, Syria, Crimea, Ukrainian Oblasts not controlled by the government, or Russia), or  * Any person or entity which is the target of any Sanctions (“Sanctioned Targets”).  Can be: * &#x60;0&#x60; – False * &#x60;1&#x60; – True   See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   * @return involvedSanctions
   */
  @javax.annotation.Nullable
  public InvolvedSanctionsEnum getInvolvedSanctions() {
    return involvedSanctions;
  }

  public void setInvolvedSanctions(@javax.annotation.Nullable InvolvedSanctionsEnum involvedSanctions) {
    this.involvedSanctions = involvedSanctions;
  }


  public PutUserRequest entitySanctionsQuestionnaire(@javax.annotation.Nullable EntitySanctionsQuestionnaireEnum entitySanctionsQuestionnaire) {
    this.entitySanctionsQuestionnaire = entitySanctionsQuestionnaire;
    return this;
  }

  /**
   * For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the &#x60;activityOutsideEu&#x60; value is set to &#x60;1&#x60;.  Defines the scope to which the &#x60;activityOutsideEu&#x60; field applies: * &#x60;0&#x60; – Not applicable * &#x60;1&#x60; – Only the legal entity * &#x60;2&#x60; – The legal entity and all its subsidiaries held at 100% * &#x60;3&#x60; – The legal entity and all its subsidiaries held at 50% or more * &#x60;4&#x60; – The legal entity and a list of subsidiaries  See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information. 
   * @return entitySanctionsQuestionnaire
   */
  @javax.annotation.Nullable
  public EntitySanctionsQuestionnaireEnum getEntitySanctionsQuestionnaire() {
    return entitySanctionsQuestionnaire;
  }

  public void setEntitySanctionsQuestionnaire(@javax.annotation.Nullable EntitySanctionsQuestionnaireEnum entitySanctionsQuestionnaire) {
    this.entitySanctionsQuestionnaire = entitySanctionsQuestionnaire;
  }


  public PutUserRequest timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The User timezone in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format. The timezones have unique names in the form \&quot;Area/Location\&quot; (e.g. \&quot;America/New_York\&quot;, \&quot;Europe/Paris\&quot;).  It may be used to enforce a card &#x60;paymentDailyLimit&#x60; based on the cardholder&#39;s timezone. 
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  @Deprecated
  public PutUserRequest occupationType(@javax.annotation.Nullable OccupationTypeEnum occupationType) {
    this.occupationType = occupationType;
    return this;
  }

  /**
   * Deprecated. Use &#x60;occupationCategory&#x60; instead.
   * @return occupationType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public OccupationTypeEnum getOccupationType() {
    return occupationType;
  }

  @Deprecated
  public void setOccupationType(@javax.annotation.Nullable OccupationTypeEnum occupationType) {
    this.occupationType = occupationType;
  }


  public PutUserRequest sourceOfFunds(@javax.annotation.Nullable SourceOfFundsEnum sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

  /**
   * The source of funds for opening an account for a company or self-employed person.
   * @return sourceOfFunds
   */
  @javax.annotation.Nullable
  public SourceOfFundsEnum getSourceOfFunds() {
    return sourceOfFunds;
  }

  public void setSourceOfFunds(@javax.annotation.Nullable SourceOfFundsEnum sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }


  public PutUserRequest legalSectorType(@javax.annotation.Nullable LegalSectorTypeEnum legalSectorType) {
    this.legalSectorType = legalSectorType;
    return this;
  }

  /**
   * Qualify the type of data in the &#x60;legalSector&#x60; field: * If it is set to NACE the legalSector needs to be in a NACE format (4 digits).  * If it is set to NAF (or not set at all) the legalSector needs to be in a NAF format (4 digits followed by a capital letter). 
   * @return legalSectorType
   */
  @javax.annotation.Nullable
  public LegalSectorTypeEnum getLegalSectorType() {
    return legalSectorType;
  }

  public void setLegalSectorType(@javax.annotation.Nullable LegalSectorTypeEnum legalSectorType) {
    this.legalSectorType = legalSectorType;
  }


  public PutUserRequest isOnStockExchange(@javax.annotation.Nullable IsOnStockExchangeEnum isOnStockExchange) {
    this.isOnStockExchange = isOnStockExchange;
    return this;
  }

  /**
   * The user is a corporation and is quoted on an organized stock exchange. * &#x60;0&#x60; – No * &#x60;1&#x60; – Yes 
   * @return isOnStockExchange
   */
  @javax.annotation.Nullable
  public IsOnStockExchangeEnum getIsOnStockExchange() {
    return isOnStockExchange;
  }

  public void setIsOnStockExchange(@javax.annotation.Nullable IsOnStockExchangeEnum isOnStockExchange) {
    this.isOnStockExchange = isOnStockExchange;
  }


  public PutUserRequest occupationCategory(@javax.annotation.Nullable OccupationCategoryEnum occupationCategory) {
    this.occupationCategory = occupationCategory;
    return this;
  }

  /**
   * Type of occupation of the user. See [Occupation Category](/guide/users/physical.html#occupation-category-occupationcategory) for the list of values. 
   * @return occupationCategory
   */
  @javax.annotation.Nullable
  public OccupationCategoryEnum getOccupationCategory() {
    return occupationCategory;
  }

  public void setOccupationCategory(@javax.annotation.Nullable OccupationCategoryEnum occupationCategory) {
    this.occupationCategory = occupationCategory;
  }


  public PutUserRequest personalAssetsRange(@javax.annotation.Nullable PersonalAssetsRangeEnum personalAssetsRange) {
    this.personalAssetsRange = personalAssetsRange;
    return this;
  }

  /**
   * The personal assets range of the user. See [Personal Assets Range](/guide/users/physical.html#personal-assets-range-personalassetsrange) for the list of values. 
   * @return personalAssetsRange
   */
  @javax.annotation.Nullable
  public PersonalAssetsRangeEnum getPersonalAssetsRange() {
    return personalAssetsRange;
  }

  public void setPersonalAssetsRange(@javax.annotation.Nullable PersonalAssetsRangeEnum personalAssetsRange) {
    this.personalAssetsRange = personalAssetsRange;
  }


  public PutUserRequest monthlyIncomeRange(@javax.annotation.Nullable MonthlyIncomeRangeEnum monthlyIncomeRange) {
    this.monthlyIncomeRange = monthlyIncomeRange;
    return this;
  }

  /**
   * Net monthly income of the user. See [Monthly Income Range](/guide/users/physical.html#monthly-income-range-monthlyincomerange) for the list of values. 
   * @return monthlyIncomeRange
   */
  @javax.annotation.Nullable
  public MonthlyIncomeRangeEnum getMonthlyIncomeRange() {
    return monthlyIncomeRange;
  }

  public void setMonthlyIncomeRange(@javax.annotation.Nullable MonthlyIncomeRangeEnum monthlyIncomeRange) {
    this.monthlyIncomeRange = monthlyIncomeRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutUserRequest putUserRequest = (PutUserRequest) o;
    return Objects.equals(this.userTag, putUserRequest.userTag) &&
        Objects.equals(this.specifiedUSPerson, putUserRequest.specifiedUSPerson) &&
        Objects.equals(this.controllingPersonType, putUserRequest.controllingPersonType) &&
        Objects.equals(this.employeeType, putUserRequest.employeeType) &&
        Objects.equals(this.title, putUserRequest.title) &&
        Objects.equals(this.firstname, putUserRequest.firstname) &&
        Objects.equals(this.lastname, putUserRequest.lastname) &&
        Objects.equals(this.middleNames, putUserRequest.middleNames) &&
        Objects.equals(this.birthday, putUserRequest.birthday) &&
        Objects.equals(this.email, putUserRequest.email) &&
        Objects.equals(this.address1, putUserRequest.address1) &&
        Objects.equals(this.address2, putUserRequest.address2) &&
        Objects.equals(this.address3, putUserRequest.address3) &&
        Objects.equals(this.postcode, putUserRequest.postcode) &&
        Objects.equals(this.city, putUserRequest.city) &&
        Objects.equals(this.state, putUserRequest.state) &&
        Objects.equals(this.country, putUserRequest.country) &&
        Objects.equals(this.distributionCountry, putUserRequest.distributionCountry) &&
        Objects.equals(this.secondaryAddress1, putUserRequest.secondaryAddress1) &&
        Objects.equals(this.secondaryAddress2, putUserRequest.secondaryAddress2) &&
        Objects.equals(this.secondaryAddress3, putUserRequest.secondaryAddress3) &&
        Objects.equals(this.secondaryPostcode, putUserRequest.secondaryPostcode) &&
        Objects.equals(this.secondaryCity, putUserRequest.secondaryCity) &&
        Objects.equals(this.secondaryState, putUserRequest.secondaryState) &&
        Objects.equals(this.secondaryCountry, putUserRequest.secondaryCountry) &&
        Objects.equals(this.phone, putUserRequest.phone) &&
        Objects.equals(this.mobile, putUserRequest.mobile) &&
        Objects.equals(this.nationality, putUserRequest.nationality) &&
        Objects.equals(this.nationalityOther, putUserRequest.nationalityOther) &&
        Objects.equals(this.placeOfBirth, putUserRequest.placeOfBirth) &&
        Objects.equals(this.birthCountry, putUserRequest.birthCountry) &&
        Objects.equals(this.occupation, putUserRequest.occupation) &&
        Objects.equals(this.incomeRange, putUserRequest.incomeRange) &&
        Objects.equals(this.legalName, putUserRequest.legalName) &&
        Objects.equals(this.legalRegistrationNumber, putUserRequest.legalRegistrationNumber) &&
        Objects.equals(this.legalTvaNumber, putUserRequest.legalTvaNumber) &&
        Objects.equals(this.legalRegistrationDate, putUserRequest.legalRegistrationDate) &&
        Objects.equals(this.legalForm, putUserRequest.legalForm) &&
        Objects.equals(this.legalShareCapital, putUserRequest.legalShareCapital) &&
        Objects.equals(this.legalSector, putUserRequest.legalSector) &&
        Objects.equals(this.legalAnnualTurnOver, putUserRequest.legalAnnualTurnOver) &&
        Objects.equals(this.legalNetIncomeRange, putUserRequest.legalNetIncomeRange) &&
        Objects.equals(this.legalNumberOfEmployeeRange, putUserRequest.legalNumberOfEmployeeRange) &&
        Objects.equals(this.effectiveBeneficiary, putUserRequest.effectiveBeneficiary) &&
        Objects.equals(this.language, putUserRequest.language) &&
        Objects.equals(this.taxNumber, putUserRequest.taxNumber) &&
        Objects.equals(this.taxResidence, putUserRequest.taxResidence) &&
        Objects.equals(this.position, putUserRequest.position) &&
        Objects.equals(this.personalAssets, putUserRequest.personalAssets) &&
        Objects.equals(this.activityOutsideEu, putUserRequest.activityOutsideEu) &&
        Objects.equals(this.economicSanctions, putUserRequest.economicSanctions) &&
        Objects.equals(this.residentCountriesSanctions, putUserRequest.residentCountriesSanctions) &&
        Objects.equals(this.involvedSanctions, putUserRequest.involvedSanctions) &&
        Objects.equals(this.entitySanctionsQuestionnaire, putUserRequest.entitySanctionsQuestionnaire) &&
        Objects.equals(this.timezone, putUserRequest.timezone) &&
        Objects.equals(this.occupationType, putUserRequest.occupationType) &&
        Objects.equals(this.sourceOfFunds, putUserRequest.sourceOfFunds) &&
        Objects.equals(this.legalSectorType, putUserRequest.legalSectorType) &&
        Objects.equals(this.isOnStockExchange, putUserRequest.isOnStockExchange) &&
        Objects.equals(this.occupationCategory, putUserRequest.occupationCategory) &&
        Objects.equals(this.personalAssetsRange, putUserRequest.personalAssetsRange) &&
        Objects.equals(this.monthlyIncomeRange, putUserRequest.monthlyIncomeRange);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(userTag, specifiedUSPerson, controllingPersonType, employeeType, title, firstname, lastname, middleNames, birthday, email, address1, address2, address3, postcode, city, state, country, distributionCountry, secondaryAddress1, secondaryAddress2, secondaryAddress3, secondaryPostcode, secondaryCity, secondaryState, secondaryCountry, phone, mobile, nationality, nationalityOther, placeOfBirth, birthCountry, occupation, incomeRange, legalName, legalRegistrationNumber, legalTvaNumber, legalRegistrationDate, legalForm, legalShareCapital, legalSector, legalAnnualTurnOver, legalNetIncomeRange, legalNumberOfEmployeeRange, effectiveBeneficiary, language, taxNumber, taxResidence, position, personalAssets, activityOutsideEu, economicSanctions, residentCountriesSanctions, involvedSanctions, entitySanctionsQuestionnaire, timezone, occupationType, sourceOfFunds, legalSectorType, isOnStockExchange, occupationCategory, personalAssetsRange, monthlyIncomeRange);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutUserRequest {\n");
    sb.append("    userTag: ").append(toIndentedString(userTag)).append("\n");
    sb.append("    specifiedUSPerson: ").append(toIndentedString(specifiedUSPerson)).append("\n");
    sb.append("    controllingPersonType: ").append(toIndentedString(controllingPersonType)).append("\n");
    sb.append("    employeeType: ").append(toIndentedString(employeeType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    middleNames: ").append(toIndentedString(middleNames)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    distributionCountry: ").append(toIndentedString(distributionCountry)).append("\n");
    sb.append("    secondaryAddress1: ").append(toIndentedString(secondaryAddress1)).append("\n");
    sb.append("    secondaryAddress2: ").append(toIndentedString(secondaryAddress2)).append("\n");
    sb.append("    secondaryAddress3: ").append(toIndentedString(secondaryAddress3)).append("\n");
    sb.append("    secondaryPostcode: ").append(toIndentedString(secondaryPostcode)).append("\n");
    sb.append("    secondaryCity: ").append(toIndentedString(secondaryCity)).append("\n");
    sb.append("    secondaryState: ").append(toIndentedString(secondaryState)).append("\n");
    sb.append("    secondaryCountry: ").append(toIndentedString(secondaryCountry)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    nationalityOther: ").append(toIndentedString(nationalityOther)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    birthCountry: ").append(toIndentedString(birthCountry)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    incomeRange: ").append(toIndentedString(incomeRange)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    legalRegistrationNumber: ").append(toIndentedString(legalRegistrationNumber)).append("\n");
    sb.append("    legalTvaNumber: ").append(toIndentedString(legalTvaNumber)).append("\n");
    sb.append("    legalRegistrationDate: ").append(toIndentedString(legalRegistrationDate)).append("\n");
    sb.append("    legalForm: ").append(toIndentedString(legalForm)).append("\n");
    sb.append("    legalShareCapital: ").append(toIndentedString(legalShareCapital)).append("\n");
    sb.append("    legalSector: ").append(toIndentedString(legalSector)).append("\n");
    sb.append("    legalAnnualTurnOver: ").append(toIndentedString(legalAnnualTurnOver)).append("\n");
    sb.append("    legalNetIncomeRange: ").append(toIndentedString(legalNetIncomeRange)).append("\n");
    sb.append("    legalNumberOfEmployeeRange: ").append(toIndentedString(legalNumberOfEmployeeRange)).append("\n");
    sb.append("    effectiveBeneficiary: ").append(toIndentedString(effectiveBeneficiary)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("    taxResidence: ").append(toIndentedString(taxResidence)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    personalAssets: ").append(toIndentedString(personalAssets)).append("\n");
    sb.append("    activityOutsideEu: ").append(toIndentedString(activityOutsideEu)).append("\n");
    sb.append("    economicSanctions: ").append(toIndentedString(economicSanctions)).append("\n");
    sb.append("    residentCountriesSanctions: ").append(toIndentedString(residentCountriesSanctions)).append("\n");
    sb.append("    involvedSanctions: ").append(toIndentedString(involvedSanctions)).append("\n");
    sb.append("    entitySanctionsQuestionnaire: ").append(toIndentedString(entitySanctionsQuestionnaire)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    occupationType: ").append(toIndentedString(occupationType)).append("\n");
    sb.append("    sourceOfFunds: ").append(toIndentedString(sourceOfFunds)).append("\n");
    sb.append("    legalSectorType: ").append(toIndentedString(legalSectorType)).append("\n");
    sb.append("    isOnStockExchange: ").append(toIndentedString(isOnStockExchange)).append("\n");
    sb.append("    occupationCategory: ").append(toIndentedString(occupationCategory)).append("\n");
    sb.append("    personalAssetsRange: ").append(toIndentedString(personalAssetsRange)).append("\n");
    sb.append("    monthlyIncomeRange: ").append(toIndentedString(monthlyIncomeRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userTag");
    openapiFields.add("specifiedUSPerson");
    openapiFields.add("controllingPersonType");
    openapiFields.add("employeeType");
    openapiFields.add("title");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("middleNames");
    openapiFields.add("birthday");
    openapiFields.add("email");
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("address3");
    openapiFields.add("postcode");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("country");
    openapiFields.add("distributionCountry");
    openapiFields.add("secondaryAddress1");
    openapiFields.add("secondaryAddress2");
    openapiFields.add("secondaryAddress3");
    openapiFields.add("secondaryPostcode");
    openapiFields.add("secondaryCity");
    openapiFields.add("secondaryState");
    openapiFields.add("secondaryCountry");
    openapiFields.add("phone");
    openapiFields.add("mobile");
    openapiFields.add("nationality");
    openapiFields.add("nationalityOther");
    openapiFields.add("placeOfBirth");
    openapiFields.add("birthCountry");
    openapiFields.add("occupation");
    openapiFields.add("incomeRange");
    openapiFields.add("legalName");
    openapiFields.add("legalRegistrationNumber");
    openapiFields.add("legalTvaNumber");
    openapiFields.add("legalRegistrationDate");
    openapiFields.add("legalForm");
    openapiFields.add("legalShareCapital");
    openapiFields.add("legalSector");
    openapiFields.add("legalAnnualTurnOver");
    openapiFields.add("legalNetIncomeRange");
    openapiFields.add("legalNumberOfEmployeeRange");
    openapiFields.add("effectiveBeneficiary");
    openapiFields.add("language");
    openapiFields.add("taxNumber");
    openapiFields.add("taxResidence");
    openapiFields.add("position");
    openapiFields.add("personalAssets");
    openapiFields.add("activityOutsideEu");
    openapiFields.add("economicSanctions");
    openapiFields.add("residentCountriesSanctions");
    openapiFields.add("involvedSanctions");
    openapiFields.add("entitySanctionsQuestionnaire");
    openapiFields.add("timezone");
    openapiFields.add("occupationType");
    openapiFields.add("sourceOfFunds");
    openapiFields.add("legalSectorType");
    openapiFields.add("isOnStockExchange");
    openapiFields.add("occupationCategory");
    openapiFields.add("personalAssetsRange");
    openapiFields.add("monthlyIncomeRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutUserRequest is not found in the empty JSON string", PutUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("userTag") != null && !jsonObj.get("userTag").isJsonNull()) && !jsonObj.get("userTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userTag").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if ((jsonObj.get("lastname") != null && !jsonObj.get("lastname").isJsonNull()) && !jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("middleNames") != null && !jsonObj.get("middleNames").isJsonNull()) && !jsonObj.get("middleNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleNames").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("address3") != null && !jsonObj.get("address3").isJsonNull()) && !jsonObj.get("address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address3").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("distributionCountry") != null && !jsonObj.get("distributionCountry").isJsonNull()) && !jsonObj.get("distributionCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributionCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distributionCountry").toString()));
      }
      // validate the optional field `distributionCountry`
      if (jsonObj.get("distributionCountry") != null && !jsonObj.get("distributionCountry").isJsonNull()) {
        DistributionCountryEnum.validateJsonElement(jsonObj.get("distributionCountry"));
      }
      if ((jsonObj.get("secondaryAddress1") != null && !jsonObj.get("secondaryAddress1").isJsonNull()) && !jsonObj.get("secondaryAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryAddress1").toString()));
      }
      if ((jsonObj.get("secondaryAddress2") != null && !jsonObj.get("secondaryAddress2").isJsonNull()) && !jsonObj.get("secondaryAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryAddress2").toString()));
      }
      if ((jsonObj.get("secondaryAddress3") != null && !jsonObj.get("secondaryAddress3").isJsonNull()) && !jsonObj.get("secondaryAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryAddress3").toString()));
      }
      if ((jsonObj.get("secondaryPostcode") != null && !jsonObj.get("secondaryPostcode").isJsonNull()) && !jsonObj.get("secondaryPostcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryPostcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryPostcode").toString()));
      }
      if ((jsonObj.get("secondaryCity") != null && !jsonObj.get("secondaryCity").isJsonNull()) && !jsonObj.get("secondaryCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryCity").toString()));
      }
      if ((jsonObj.get("secondaryState") != null && !jsonObj.get("secondaryState").isJsonNull()) && !jsonObj.get("secondaryState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryState").toString()));
      }
      if ((jsonObj.get("secondaryCountry") != null && !jsonObj.get("secondaryCountry").isJsonNull()) && !jsonObj.get("secondaryCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryCountry").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("nationalityOther") != null && !jsonObj.get("nationalityOther").isJsonNull()) && !jsonObj.get("nationalityOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalityOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalityOther").toString()));
      }
      if ((jsonObj.get("placeOfBirth") != null && !jsonObj.get("placeOfBirth").isJsonNull()) && !jsonObj.get("placeOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOfBirth").toString()));
      }
      if ((jsonObj.get("birthCountry") != null && !jsonObj.get("birthCountry").isJsonNull()) && !jsonObj.get("birthCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthCountry").toString()));
      }
      if ((jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) && !jsonObj.get("occupation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupation").toString()));
      }
      if ((jsonObj.get("incomeRange") != null && !jsonObj.get("incomeRange").isJsonNull()) && !jsonObj.get("incomeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomeRange").toString()));
      }
      // validate the optional field `incomeRange`
      if (jsonObj.get("incomeRange") != null && !jsonObj.get("incomeRange").isJsonNull()) {
        IncomeRangeEnum.validateJsonElement(jsonObj.get("incomeRange"));
      }
      if ((jsonObj.get("legalName") != null && !jsonObj.get("legalName").isJsonNull()) && !jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if ((jsonObj.get("legalRegistrationNumber") != null && !jsonObj.get("legalRegistrationNumber").isJsonNull()) && !jsonObj.get("legalRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalRegistrationNumber").toString()));
      }
      if ((jsonObj.get("legalTvaNumber") != null && !jsonObj.get("legalTvaNumber").isJsonNull()) && !jsonObj.get("legalTvaNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalTvaNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalTvaNumber").toString()));
      }
      if ((jsonObj.get("legalForm") != null && !jsonObj.get("legalForm").isJsonNull()) && !jsonObj.get("legalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalForm").toString()));
      }
      if ((jsonObj.get("legalSector") != null && !jsonObj.get("legalSector").isJsonNull()) && !jsonObj.get("legalSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalSector").toString()));
      }
      if ((jsonObj.get("legalAnnualTurnOver") != null && !jsonObj.get("legalAnnualTurnOver").isJsonNull()) && !jsonObj.get("legalAnnualTurnOver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalAnnualTurnOver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalAnnualTurnOver").toString()));
      }
      // validate the optional field `legalAnnualTurnOver`
      if (jsonObj.get("legalAnnualTurnOver") != null && !jsonObj.get("legalAnnualTurnOver").isJsonNull()) {
        LegalAnnualTurnOverEnum.validateJsonElement(jsonObj.get("legalAnnualTurnOver"));
      }
      if ((jsonObj.get("legalNetIncomeRange") != null && !jsonObj.get("legalNetIncomeRange").isJsonNull()) && !jsonObj.get("legalNetIncomeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalNetIncomeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalNetIncomeRange").toString()));
      }
      // validate the optional field `legalNetIncomeRange`
      if (jsonObj.get("legalNetIncomeRange") != null && !jsonObj.get("legalNetIncomeRange").isJsonNull()) {
        LegalNetIncomeRangeEnum.validateJsonElement(jsonObj.get("legalNetIncomeRange"));
      }
      if ((jsonObj.get("legalNumberOfEmployeeRange") != null && !jsonObj.get("legalNumberOfEmployeeRange").isJsonNull()) && !jsonObj.get("legalNumberOfEmployeeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalNumberOfEmployeeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalNumberOfEmployeeRange").toString()));
      }
      // validate the optional field `legalNumberOfEmployeeRange`
      if (jsonObj.get("legalNumberOfEmployeeRange") != null && !jsonObj.get("legalNumberOfEmployeeRange").isJsonNull()) {
        LegalNumberOfEmployeeRangeEnum.validateJsonElement(jsonObj.get("legalNumberOfEmployeeRange"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("taxNumber") != null && !jsonObj.get("taxNumber").isJsonNull()) && !jsonObj.get("taxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxNumber").toString()));
      }
      if ((jsonObj.get("taxResidence") != null && !jsonObj.get("taxResidence").isJsonNull()) && !jsonObj.get("taxResidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxResidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxResidence").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("personalAssets") != null && !jsonObj.get("personalAssets").isJsonNull()) && !jsonObj.get("personalAssets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalAssets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalAssets").toString()));
      }
      // validate the optional field `personalAssets`
      if (jsonObj.get("personalAssets") != null && !jsonObj.get("personalAssets").isJsonNull()) {
        PersonalAssetsEnum.validateJsonElement(jsonObj.get("personalAssets"));
      }
      // validate the optional field `activityOutsideEu`
      if (jsonObj.get("activityOutsideEu") != null && !jsonObj.get("activityOutsideEu").isJsonNull()) {
        ActivityOutsideEuEnum.validateJsonElement(jsonObj.get("activityOutsideEu"));
      }
      // validate the optional field `economicSanctions`
      if (jsonObj.get("economicSanctions") != null && !jsonObj.get("economicSanctions").isJsonNull()) {
        EconomicSanctionsEnum.validateJsonElement(jsonObj.get("economicSanctions"));
      }
      // validate the optional field `residentCountriesSanctions`
      if (jsonObj.get("residentCountriesSanctions") != null && !jsonObj.get("residentCountriesSanctions").isJsonNull()) {
        ResidentCountriesSanctionsEnum.validateJsonElement(jsonObj.get("residentCountriesSanctions"));
      }
      // validate the optional field `involvedSanctions`
      if (jsonObj.get("involvedSanctions") != null && !jsonObj.get("involvedSanctions").isJsonNull()) {
        InvolvedSanctionsEnum.validateJsonElement(jsonObj.get("involvedSanctions"));
      }
      // validate the optional field `entitySanctionsQuestionnaire`
      if (jsonObj.get("entitySanctionsQuestionnaire") != null && !jsonObj.get("entitySanctionsQuestionnaire").isJsonNull()) {
        EntitySanctionsQuestionnaireEnum.validateJsonElement(jsonObj.get("entitySanctionsQuestionnaire"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("occupationType") != null && !jsonObj.get("occupationType").isJsonNull()) && !jsonObj.get("occupationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupationType").toString()));
      }
      // validate the optional field `occupationType`
      if (jsonObj.get("occupationType") != null && !jsonObj.get("occupationType").isJsonNull()) {
        OccupationTypeEnum.validateJsonElement(jsonObj.get("occupationType"));
      }
      if ((jsonObj.get("sourceOfFunds") != null && !jsonObj.get("sourceOfFunds").isJsonNull()) && !jsonObj.get("sourceOfFunds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceOfFunds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceOfFunds").toString()));
      }
      // validate the optional field `sourceOfFunds`
      if (jsonObj.get("sourceOfFunds") != null && !jsonObj.get("sourceOfFunds").isJsonNull()) {
        SourceOfFundsEnum.validateJsonElement(jsonObj.get("sourceOfFunds"));
      }
      if ((jsonObj.get("legalSectorType") != null && !jsonObj.get("legalSectorType").isJsonNull()) && !jsonObj.get("legalSectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalSectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalSectorType").toString()));
      }
      // validate the optional field `legalSectorType`
      if (jsonObj.get("legalSectorType") != null && !jsonObj.get("legalSectorType").isJsonNull()) {
        LegalSectorTypeEnum.validateJsonElement(jsonObj.get("legalSectorType"));
      }
      // validate the optional field `isOnStockExchange`
      if (jsonObj.get("isOnStockExchange") != null && !jsonObj.get("isOnStockExchange").isJsonNull()) {
        IsOnStockExchangeEnum.validateJsonElement(jsonObj.get("isOnStockExchange"));
      }
      // validate the optional field `occupationCategory`
      if (jsonObj.get("occupationCategory") != null && !jsonObj.get("occupationCategory").isJsonNull()) {
        OccupationCategoryEnum.validateJsonElement(jsonObj.get("occupationCategory"));
      }
      // validate the optional field `personalAssetsRange`
      if (jsonObj.get("personalAssetsRange") != null && !jsonObj.get("personalAssetsRange").isJsonNull()) {
        PersonalAssetsRangeEnum.validateJsonElement(jsonObj.get("personalAssetsRange"));
      }
      // validate the optional field `monthlyIncomeRange`
      if (jsonObj.get("monthlyIncomeRange") != null && !jsonObj.get("monthlyIncomeRange").isJsonNull()) {
        MonthlyIncomeRangeEnum.validateJsonElement(jsonObj.get("monthlyIncomeRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutUserRequest>() {
           @Override
           public void write(JsonWriter out, PutUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutUserRequest
   * @throws IOException if the JSON string is invalid with respect to PutUserRequest
   */
  public static PutUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutUserRequest.class);
  }

  /**
   * Convert an instance of PutUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

