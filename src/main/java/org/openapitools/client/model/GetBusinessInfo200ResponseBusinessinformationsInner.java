/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBusinessInfo200ResponseBusinessinformationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class GetBusinessInfo200ResponseBusinessinformationsInner {
  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  @javax.annotation.Nullable
  private String legalName;

  public static final String SERIALIZED_NAME_LEGAL_REGISTRATION_NUMBER = "legalRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_LEGAL_REGISTRATION_NUMBER)
  @javax.annotation.Nullable
  private String legalRegistrationNumber;

  public static final String SERIALIZED_NAME_LEGAL_REGISTRATION_DATE = "legalRegistrationDate";
  @SerializedName(SERIALIZED_NAME_LEGAL_REGISTRATION_DATE)
  @javax.annotation.Nullable
  private String legalRegistrationDate;

  public static final String SERIALIZED_NAME_LEGAL_FORM = "legalForm";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM)
  @javax.annotation.Nullable
  private String legalForm;

  public static final String SERIALIZED_NAME_LEGAL_SHARE_CAPITAL = "legalShareCapital";
  @SerializedName(SERIALIZED_NAME_LEGAL_SHARE_CAPITAL)
  @javax.annotation.Nullable
  private BigDecimal legalShareCapital;

  public static final String SERIALIZED_NAME_LEGAL_SECTOR = "legalSector";
  @SerializedName(SERIALIZED_NAME_LEGAL_SECTOR)
  @javax.annotation.Nullable
  private String legalSector;

  /**
   * Business annual turnover range in k€. 
   */
  @JsonAdapter(LegalAnnualTurnOverEnum.Adapter.class)
  public enum LegalAnnualTurnOverEnum {
    EMPTY(""),
    
    _0_39("0-39"),
    
    _40_99("40-99"),
    
    _100_249("100-249"),
    
    _250_999("250-999"),
    
    _1000_2999("1000-2999"),
    
    _3000_9999("3000-9999"),
    
    _10000_99999("10000-99999"),
    
    _100000_("100000-*");

    private String value;

    LegalAnnualTurnOverEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalAnnualTurnOverEnum fromValue(String value) {
      for (LegalAnnualTurnOverEnum b : LegalAnnualTurnOverEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalAnnualTurnOverEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalAnnualTurnOverEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalAnnualTurnOverEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalAnnualTurnOverEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalAnnualTurnOverEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ANNUAL_TURN_OVER = "legalAnnualTurnOver";
  @SerializedName(SERIALIZED_NAME_LEGAL_ANNUAL_TURN_OVER)
  @javax.annotation.Nullable
  private LegalAnnualTurnOverEnum legalAnnualTurnOver;

  /**
   * Business annual netincome in k€. 
   */
  @JsonAdapter(LegalNetIncomeRangeEnum.Adapter.class)
  public enum LegalNetIncomeRangeEnum {
    EMPTY(""),
    
    _0_4("0-4"),
    
    _5_9("5-9"),
    
    _10_49("10-49"),
    
    _50_149("50-149"),
    
    _150_499("150-499"),
    
    _500_("500-*");

    private String value;

    LegalNetIncomeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalNetIncomeRangeEnum fromValue(String value) {
      for (LegalNetIncomeRangeEnum b : LegalNetIncomeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalNetIncomeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalNetIncomeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalNetIncomeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalNetIncomeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalNetIncomeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_NET_INCOME_RANGE = "legalNetIncomeRange";
  @SerializedName(SERIALIZED_NAME_LEGAL_NET_INCOME_RANGE)
  @javax.annotation.Nullable
  private LegalNetIncomeRangeEnum legalNetIncomeRange;

  /**
   * Business workforce. 
   */
  @JsonAdapter(LegalNumberOfEmployeeRangeEnum.Adapter.class)
  public enum LegalNumberOfEmployeeRangeEnum {
    EMPTY(""),
    
    _0("0"),
    
    _1_9("1-9"),
    
    _10_99("10-99"),
    
    _100_249("100-249"),
    
    _250_("250-*");

    private String value;

    LegalNumberOfEmployeeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalNumberOfEmployeeRangeEnum fromValue(String value) {
      for (LegalNumberOfEmployeeRangeEnum b : LegalNumberOfEmployeeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalNumberOfEmployeeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalNumberOfEmployeeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalNumberOfEmployeeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalNumberOfEmployeeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalNumberOfEmployeeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_NUMBER_OF_EMPLOYEE_RANGE = "legalNumberOfEmployeeRange";
  @SerializedName(SERIALIZED_NAME_LEGAL_NUMBER_OF_EMPLOYEE_RANGE)
  @javax.annotation.Nullable
  private LegalNumberOfEmployeeRangeEnum legalNumberOfEmployeeRange;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private String phone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  @javax.annotation.Nullable
  private String address1;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  @javax.annotation.Nullable
  private String postcode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nullable
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  /**
   * | Code | Description | | ---- | ----------- | |  D   | Deleted     | |  N   | Company non diffusible (Insee) | |  I   | Inactive (Insee) | |  A   | Economically active | |  C   | Closed | |  T   | Transfered | |  S   | Economically stopped (Insee) | |  L   | Liquidation | |  O   | Dormant company | 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    D("D"),
    
    N("N"),
    
    I("I"),
    
    A("A"),
    
    C("C"),
    
    T("T"),
    
    S("S"),
    
    L("L"),
    
    O("O");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRADENAME = "tradename";
  @SerializedName(SERIALIZED_NAME_TRADENAME)
  @javax.annotation.Nullable
  private String tradename;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  @javax.annotation.Nullable
  private List<GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner> users = new ArrayList<>();

  public GetBusinessInfo200ResponseBusinessinformationsInner() {
  }

  public GetBusinessInfo200ResponseBusinessinformationsInner legalName(@javax.annotation.Nullable String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * Business commercial name.
   * @return legalName
   */
  @javax.annotation.Nullable
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(@javax.annotation.Nullable String legalName) {
    this.legalName = legalName;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalRegistrationNumber(@javax.annotation.Nullable String legalRegistrationNumber) {
    this.legalRegistrationNumber = legalRegistrationNumber;
    return this;
  }

  /**
   * Business registration number.
   * @return legalRegistrationNumber
   */
  @javax.annotation.Nullable
  public String getLegalRegistrationNumber() {
    return legalRegistrationNumber;
  }

  public void setLegalRegistrationNumber(@javax.annotation.Nullable String legalRegistrationNumber) {
    this.legalRegistrationNumber = legalRegistrationNumber;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalRegistrationDate(@javax.annotation.Nullable String legalRegistrationDate) {
    this.legalRegistrationDate = legalRegistrationDate;
    return this;
  }

  /**
   * Business registration date.
   * @return legalRegistrationDate
   */
  @javax.annotation.Nullable
  public String getLegalRegistrationDate() {
    return legalRegistrationDate;
  }

  public void setLegalRegistrationDate(@javax.annotation.Nullable String legalRegistrationDate) {
    this.legalRegistrationDate = legalRegistrationDate;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalForm(@javax.annotation.Nullable String legalForm) {
    this.legalForm = legalForm;
    return this;
  }

  /**
   * The legal form/category of the company.   You may check out [the authoritative list](https://www.insee.fr/fr/information/2028129) 
   * @return legalForm
   */
  @javax.annotation.Nullable
  public String getLegalForm() {
    return legalForm;
  }

  public void setLegalForm(@javax.annotation.Nullable String legalForm) {
    this.legalForm = legalForm;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalShareCapital(@javax.annotation.Nullable BigDecimal legalShareCapital) {
    this.legalShareCapital = legalShareCapital;
    return this;
  }

  /**
   * Business share capital.
   * @return legalShareCapital
   */
  @javax.annotation.Nullable
  public BigDecimal getLegalShareCapital() {
    return legalShareCapital;
  }

  public void setLegalShareCapital(@javax.annotation.Nullable BigDecimal legalShareCapital) {
    this.legalShareCapital = legalShareCapital;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalSector(@javax.annotation.Nullable String legalSector) {
    this.legalSector = legalSector;
    return this;
  }

  /**
   * The Business Sector of the company (NAF or NACE code in France). The expected format depends on &#x60;legalSectorType&#x60;  You may check out [the authoritative list](https://www.insee.fr/fr/information/2120875) 
   * @return legalSector
   */
  @javax.annotation.Nullable
  public String getLegalSector() {
    return legalSector;
  }

  public void setLegalSector(@javax.annotation.Nullable String legalSector) {
    this.legalSector = legalSector;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalAnnualTurnOver(@javax.annotation.Nullable LegalAnnualTurnOverEnum legalAnnualTurnOver) {
    this.legalAnnualTurnOver = legalAnnualTurnOver;
    return this;
  }

  /**
   * Business annual turnover range in k€. 
   * @return legalAnnualTurnOver
   */
  @javax.annotation.Nullable
  public LegalAnnualTurnOverEnum getLegalAnnualTurnOver() {
    return legalAnnualTurnOver;
  }

  public void setLegalAnnualTurnOver(@javax.annotation.Nullable LegalAnnualTurnOverEnum legalAnnualTurnOver) {
    this.legalAnnualTurnOver = legalAnnualTurnOver;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalNetIncomeRange(@javax.annotation.Nullable LegalNetIncomeRangeEnum legalNetIncomeRange) {
    this.legalNetIncomeRange = legalNetIncomeRange;
    return this;
  }

  /**
   * Business annual netincome in k€. 
   * @return legalNetIncomeRange
   */
  @javax.annotation.Nullable
  public LegalNetIncomeRangeEnum getLegalNetIncomeRange() {
    return legalNetIncomeRange;
  }

  public void setLegalNetIncomeRange(@javax.annotation.Nullable LegalNetIncomeRangeEnum legalNetIncomeRange) {
    this.legalNetIncomeRange = legalNetIncomeRange;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner legalNumberOfEmployeeRange(@javax.annotation.Nullable LegalNumberOfEmployeeRangeEnum legalNumberOfEmployeeRange) {
    this.legalNumberOfEmployeeRange = legalNumberOfEmployeeRange;
    return this;
  }

  /**
   * Business workforce. 
   * @return legalNumberOfEmployeeRange
   */
  @javax.annotation.Nullable
  public LegalNumberOfEmployeeRangeEnum getLegalNumberOfEmployeeRange() {
    return legalNumberOfEmployeeRange;
  }

  public void setLegalNumberOfEmployeeRange(@javax.annotation.Nullable LegalNumberOfEmployeeRangeEnum legalNumberOfEmployeeRange) {
    this.legalNumberOfEmployeeRange = legalNumberOfEmployeeRange;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner phone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Business phone number.
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Business generic email.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner address1(@javax.annotation.Nullable String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Business&#39; street
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(@javax.annotation.Nullable String address1) {
    this.address1 = address1;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner postcode(@javax.annotation.Nullable String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Business&#39; postal code
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(@javax.annotation.Nullable String postcode) {
    this.postcode = postcode;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner city(@javax.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  /**
   * Business&#39; city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nullable String city) {
    this.city = city;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * Business&#39; province
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Business&#39; country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * | Code | Description | | ---- | ----------- | |  D   | Deleted     | |  N   | Company non diffusible (Insee) | |  I   | Inactive (Insee) | |  A   | Economically active | |  C   | Closed | |  T   | Transfered | |  S   | Economically stopped (Insee) | |  L   | Liquidation | |  O   | Dormant company | 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner tradename(@javax.annotation.Nullable String tradename) {
    this.tradename = tradename;
    return this;
  }

  /**
   * Business trade name
   * @return tradename
   */
  @javax.annotation.Nullable
  public String getTradename() {
    return tradename;
  }

  public void setTradename(@javax.annotation.Nullable String tradename) {
    this.tradename = tradename;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInner users(@javax.annotation.Nullable List<GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner> users) {
    this.users = users;
    return this;
  }

  public GetBusinessInfo200ResponseBusinessinformationsInner addUsersItem(GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner> getUsers() {
    return users;
  }

  public void setUsers(@javax.annotation.Nullable List<GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBusinessInfo200ResponseBusinessinformationsInner getBusinessInfo200ResponseBusinessinformationsInner = (GetBusinessInfo200ResponseBusinessinformationsInner) o;
    return Objects.equals(this.legalName, getBusinessInfo200ResponseBusinessinformationsInner.legalName) &&
        Objects.equals(this.legalRegistrationNumber, getBusinessInfo200ResponseBusinessinformationsInner.legalRegistrationNumber) &&
        Objects.equals(this.legalRegistrationDate, getBusinessInfo200ResponseBusinessinformationsInner.legalRegistrationDate) &&
        Objects.equals(this.legalForm, getBusinessInfo200ResponseBusinessinformationsInner.legalForm) &&
        Objects.equals(this.legalShareCapital, getBusinessInfo200ResponseBusinessinformationsInner.legalShareCapital) &&
        Objects.equals(this.legalSector, getBusinessInfo200ResponseBusinessinformationsInner.legalSector) &&
        Objects.equals(this.legalAnnualTurnOver, getBusinessInfo200ResponseBusinessinformationsInner.legalAnnualTurnOver) &&
        Objects.equals(this.legalNetIncomeRange, getBusinessInfo200ResponseBusinessinformationsInner.legalNetIncomeRange) &&
        Objects.equals(this.legalNumberOfEmployeeRange, getBusinessInfo200ResponseBusinessinformationsInner.legalNumberOfEmployeeRange) &&
        Objects.equals(this.phone, getBusinessInfo200ResponseBusinessinformationsInner.phone) &&
        Objects.equals(this.email, getBusinessInfo200ResponseBusinessinformationsInner.email) &&
        Objects.equals(this.address1, getBusinessInfo200ResponseBusinessinformationsInner.address1) &&
        Objects.equals(this.postcode, getBusinessInfo200ResponseBusinessinformationsInner.postcode) &&
        Objects.equals(this.city, getBusinessInfo200ResponseBusinessinformationsInner.city) &&
        Objects.equals(this.state, getBusinessInfo200ResponseBusinessinformationsInner.state) &&
        Objects.equals(this.country, getBusinessInfo200ResponseBusinessinformationsInner.country) &&
        Objects.equals(this.status, getBusinessInfo200ResponseBusinessinformationsInner.status) &&
        Objects.equals(this.tradename, getBusinessInfo200ResponseBusinessinformationsInner.tradename) &&
        Objects.equals(this.users, getBusinessInfo200ResponseBusinessinformationsInner.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalName, legalRegistrationNumber, legalRegistrationDate, legalForm, legalShareCapital, legalSector, legalAnnualTurnOver, legalNetIncomeRange, legalNumberOfEmployeeRange, phone, email, address1, postcode, city, state, country, status, tradename, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBusinessInfo200ResponseBusinessinformationsInner {\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    legalRegistrationNumber: ").append(toIndentedString(legalRegistrationNumber)).append("\n");
    sb.append("    legalRegistrationDate: ").append(toIndentedString(legalRegistrationDate)).append("\n");
    sb.append("    legalForm: ").append(toIndentedString(legalForm)).append("\n");
    sb.append("    legalShareCapital: ").append(toIndentedString(legalShareCapital)).append("\n");
    sb.append("    legalSector: ").append(toIndentedString(legalSector)).append("\n");
    sb.append("    legalAnnualTurnOver: ").append(toIndentedString(legalAnnualTurnOver)).append("\n");
    sb.append("    legalNetIncomeRange: ").append(toIndentedString(legalNetIncomeRange)).append("\n");
    sb.append("    legalNumberOfEmployeeRange: ").append(toIndentedString(legalNumberOfEmployeeRange)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tradename: ").append(toIndentedString(tradename)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legalName");
    openapiFields.add("legalRegistrationNumber");
    openapiFields.add("legalRegistrationDate");
    openapiFields.add("legalForm");
    openapiFields.add("legalShareCapital");
    openapiFields.add("legalSector");
    openapiFields.add("legalAnnualTurnOver");
    openapiFields.add("legalNetIncomeRange");
    openapiFields.add("legalNumberOfEmployeeRange");
    openapiFields.add("phone");
    openapiFields.add("email");
    openapiFields.add("address1");
    openapiFields.add("postcode");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("country");
    openapiFields.add("status");
    openapiFields.add("tradename");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBusinessInfo200ResponseBusinessinformationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBusinessInfo200ResponseBusinessinformationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBusinessInfo200ResponseBusinessinformationsInner is not found in the empty JSON string", GetBusinessInfo200ResponseBusinessinformationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBusinessInfo200ResponseBusinessinformationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBusinessInfo200ResponseBusinessinformationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("legalName") != null && !jsonObj.get("legalName").isJsonNull()) && !jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if ((jsonObj.get("legalRegistrationNumber") != null && !jsonObj.get("legalRegistrationNumber").isJsonNull()) && !jsonObj.get("legalRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalRegistrationNumber").toString()));
      }
      if ((jsonObj.get("legalRegistrationDate") != null && !jsonObj.get("legalRegistrationDate").isJsonNull()) && !jsonObj.get("legalRegistrationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalRegistrationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalRegistrationDate").toString()));
      }
      if ((jsonObj.get("legalForm") != null && !jsonObj.get("legalForm").isJsonNull()) && !jsonObj.get("legalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalForm").toString()));
      }
      if ((jsonObj.get("legalSector") != null && !jsonObj.get("legalSector").isJsonNull()) && !jsonObj.get("legalSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalSector").toString()));
      }
      if ((jsonObj.get("legalAnnualTurnOver") != null && !jsonObj.get("legalAnnualTurnOver").isJsonNull()) && !jsonObj.get("legalAnnualTurnOver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalAnnualTurnOver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalAnnualTurnOver").toString()));
      }
      // validate the optional field `legalAnnualTurnOver`
      if (jsonObj.get("legalAnnualTurnOver") != null && !jsonObj.get("legalAnnualTurnOver").isJsonNull()) {
        LegalAnnualTurnOverEnum.validateJsonElement(jsonObj.get("legalAnnualTurnOver"));
      }
      if ((jsonObj.get("legalNetIncomeRange") != null && !jsonObj.get("legalNetIncomeRange").isJsonNull()) && !jsonObj.get("legalNetIncomeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalNetIncomeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalNetIncomeRange").toString()));
      }
      // validate the optional field `legalNetIncomeRange`
      if (jsonObj.get("legalNetIncomeRange") != null && !jsonObj.get("legalNetIncomeRange").isJsonNull()) {
        LegalNetIncomeRangeEnum.validateJsonElement(jsonObj.get("legalNetIncomeRange"));
      }
      if ((jsonObj.get("legalNumberOfEmployeeRange") != null && !jsonObj.get("legalNumberOfEmployeeRange").isJsonNull()) && !jsonObj.get("legalNumberOfEmployeeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalNumberOfEmployeeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalNumberOfEmployeeRange").toString()));
      }
      // validate the optional field `legalNumberOfEmployeeRange`
      if (jsonObj.get("legalNumberOfEmployeeRange") != null && !jsonObj.get("legalNumberOfEmployeeRange").isJsonNull()) {
        LegalNumberOfEmployeeRangeEnum.validateJsonElement(jsonObj.get("legalNumberOfEmployeeRange"));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("tradename") != null && !jsonObj.get("tradename").isJsonNull()) && !jsonObj.get("tradename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradename").toString()));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBusinessInfo200ResponseBusinessinformationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBusinessInfo200ResponseBusinessinformationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBusinessInfo200ResponseBusinessinformationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBusinessInfo200ResponseBusinessinformationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBusinessInfo200ResponseBusinessinformationsInner>() {
           @Override
           public void write(JsonWriter out, GetBusinessInfo200ResponseBusinessinformationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBusinessInfo200ResponseBusinessinformationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBusinessInfo200ResponseBusinessinformationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBusinessInfo200ResponseBusinessinformationsInner
   * @throws IOException if the JSON string is invalid with respect to GetBusinessInfo200ResponseBusinessinformationsInner
   */
  public static GetBusinessInfo200ResponseBusinessinformationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBusinessInfo200ResponseBusinessinformationsInner.class);
  }

  /**
   * Convert an instance of GetBusinessInfo200ResponseBusinessinformationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

