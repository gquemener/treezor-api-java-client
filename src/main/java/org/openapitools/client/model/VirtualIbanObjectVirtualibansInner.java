/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualIbanObjectVirtualibansInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class VirtualIbanObjectVirtualibansInner {
  public static final String SERIALIZED_NAME_VIRTUALIBAN_ID = "virtualibanId";
  @SerializedName(SERIALIZED_NAME_VIRTUALIBAN_ID)
  @javax.annotation.Nullable
  private Integer virtualibanId;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nullable
  private Integer walletId;

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  @javax.annotation.Nullable
  private Integer typeId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  @javax.annotation.Nullable
  private String reference;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  @javax.annotation.Nullable
  private String validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  @javax.annotation.Nullable
  private String validTo;

  public static final String SERIALIZED_NAME_MAX_USAGE = "maxUsage";
  @SerializedName(SERIALIZED_NAME_MAX_USAGE)
  @javax.annotation.Nullable
  private Integer maxUsage;

  public static final String SERIALIZED_NAME_MAX_AMOUNT = "maxAmount";
  @SerializedName(SERIALIZED_NAME_MAX_AMOUNT)
  @javax.annotation.Nullable
  private Float maxAmount;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  @javax.annotation.Nullable
  private String iban;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private String createdDate;

  public static final String SERIALIZED_NAME_NUMBER_OF_TRANSACTIONS = "numberOfTransactions";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TRANSACTIONS)
  @javax.annotation.Nullable
  private Integer numberOfTransactions;

  public static final String SERIALIZED_NAME_CUMULATED_AMOUNT = "cumulatedAmount";
  @SerializedName(SERIALIZED_NAME_CUMULATED_AMOUNT)
  @javax.annotation.Nullable
  private Float cumulatedAmount;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updatedDate";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  @javax.annotation.Nullable
  private String updatedDate;

  public VirtualIbanObjectVirtualibansInner() {
  }

  public VirtualIbanObjectVirtualibansInner virtualibanId(@javax.annotation.Nullable Integer virtualibanId) {
    this.virtualibanId = virtualibanId;
    return this;
  }

  /**
   * Get virtualibanId
   * @return virtualibanId
   */
  @javax.annotation.Nullable
  public Integer getVirtualibanId() {
    return virtualibanId;
  }

  public void setVirtualibanId(@javax.annotation.Nullable Integer virtualibanId) {
    this.virtualibanId = virtualibanId;
  }


  public VirtualIbanObjectVirtualibansInner walletId(@javax.annotation.Nullable Integer walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Get walletId
   * @return walletId
   */
  @javax.annotation.Nullable
  public Integer getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nullable Integer walletId) {
    this.walletId = walletId;
  }


  public VirtualIbanObjectVirtualibansInner typeId(@javax.annotation.Nullable Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Get typeId
   * @return typeId
   */
  @javax.annotation.Nullable
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(@javax.annotation.Nullable Integer typeId) {
    this.typeId = typeId;
  }


  public VirtualIbanObjectVirtualibansInner tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public VirtualIbanObjectVirtualibansInner reference(@javax.annotation.Nullable String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(@javax.annotation.Nullable String reference) {
    this.reference = reference;
  }


  public VirtualIbanObjectVirtualibansInner validFrom(@javax.annotation.Nullable String validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Get validFrom
   * @return validFrom
   */
  @javax.annotation.Nullable
  public String getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(@javax.annotation.Nullable String validFrom) {
    this.validFrom = validFrom;
  }


  public VirtualIbanObjectVirtualibansInner validTo(@javax.annotation.Nullable String validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Get validTo
   * @return validTo
   */
  @javax.annotation.Nullable
  public String getValidTo() {
    return validTo;
  }

  public void setValidTo(@javax.annotation.Nullable String validTo) {
    this.validTo = validTo;
  }


  public VirtualIbanObjectVirtualibansInner maxUsage(@javax.annotation.Nullable Integer maxUsage) {
    this.maxUsage = maxUsage;
    return this;
  }

  /**
   * Get maxUsage
   * @return maxUsage
   */
  @javax.annotation.Nullable
  public Integer getMaxUsage() {
    return maxUsage;
  }

  public void setMaxUsage(@javax.annotation.Nullable Integer maxUsage) {
    this.maxUsage = maxUsage;
  }


  public VirtualIbanObjectVirtualibansInner maxAmount(@javax.annotation.Nullable Float maxAmount) {
    this.maxAmount = maxAmount;
    return this;
  }

  /**
   * Get maxAmount
   * @return maxAmount
   */
  @javax.annotation.Nullable
  public Float getMaxAmount() {
    return maxAmount;
  }

  public void setMaxAmount(@javax.annotation.Nullable Float maxAmount) {
    this.maxAmount = maxAmount;
  }


  public VirtualIbanObjectVirtualibansInner iban(@javax.annotation.Nullable String iban) {
    this.iban = iban;
    return this;
  }

  /**
   * Get iban
   * @return iban
   */
  @javax.annotation.Nullable
  public String getIban() {
    return iban;
  }

  public void setIban(@javax.annotation.Nullable String iban) {
    this.iban = iban;
  }


  public VirtualIbanObjectVirtualibansInner createdDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
  }


  public VirtualIbanObjectVirtualibansInner numberOfTransactions(@javax.annotation.Nullable Integer numberOfTransactions) {
    this.numberOfTransactions = numberOfTransactions;
    return this;
  }

  /**
   * Get numberOfTransactions
   * @return numberOfTransactions
   */
  @javax.annotation.Nullable
  public Integer getNumberOfTransactions() {
    return numberOfTransactions;
  }

  public void setNumberOfTransactions(@javax.annotation.Nullable Integer numberOfTransactions) {
    this.numberOfTransactions = numberOfTransactions;
  }


  public VirtualIbanObjectVirtualibansInner cumulatedAmount(@javax.annotation.Nullable Float cumulatedAmount) {
    this.cumulatedAmount = cumulatedAmount;
    return this;
  }

  /**
   * Get cumulatedAmount
   * @return cumulatedAmount
   */
  @javax.annotation.Nullable
  public Float getCumulatedAmount() {
    return cumulatedAmount;
  }

  public void setCumulatedAmount(@javax.annotation.Nullable Float cumulatedAmount) {
    this.cumulatedAmount = cumulatedAmount;
  }


  public VirtualIbanObjectVirtualibansInner updatedDate(@javax.annotation.Nullable String updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

  /**
   * Get updatedDate
   * @return updatedDate
   */
  @javax.annotation.Nullable
  public String getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(@javax.annotation.Nullable String updatedDate) {
    this.updatedDate = updatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualIbanObjectVirtualibansInner virtualIbanObjectVirtualibansInner = (VirtualIbanObjectVirtualibansInner) o;
    return Objects.equals(this.virtualibanId, virtualIbanObjectVirtualibansInner.virtualibanId) &&
        Objects.equals(this.walletId, virtualIbanObjectVirtualibansInner.walletId) &&
        Objects.equals(this.typeId, virtualIbanObjectVirtualibansInner.typeId) &&
        Objects.equals(this.tag, virtualIbanObjectVirtualibansInner.tag) &&
        Objects.equals(this.reference, virtualIbanObjectVirtualibansInner.reference) &&
        Objects.equals(this.validFrom, virtualIbanObjectVirtualibansInner.validFrom) &&
        Objects.equals(this.validTo, virtualIbanObjectVirtualibansInner.validTo) &&
        Objects.equals(this.maxUsage, virtualIbanObjectVirtualibansInner.maxUsage) &&
        Objects.equals(this.maxAmount, virtualIbanObjectVirtualibansInner.maxAmount) &&
        Objects.equals(this.iban, virtualIbanObjectVirtualibansInner.iban) &&
        Objects.equals(this.createdDate, virtualIbanObjectVirtualibansInner.createdDate) &&
        Objects.equals(this.numberOfTransactions, virtualIbanObjectVirtualibansInner.numberOfTransactions) &&
        Objects.equals(this.cumulatedAmount, virtualIbanObjectVirtualibansInner.cumulatedAmount) &&
        Objects.equals(this.updatedDate, virtualIbanObjectVirtualibansInner.updatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(virtualibanId, walletId, typeId, tag, reference, validFrom, validTo, maxUsage, maxAmount, iban, createdDate, numberOfTransactions, cumulatedAmount, updatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualIbanObjectVirtualibansInner {\n");
    sb.append("    virtualibanId: ").append(toIndentedString(virtualibanId)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    maxUsage: ").append(toIndentedString(maxUsage)).append("\n");
    sb.append("    maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    numberOfTransactions: ").append(toIndentedString(numberOfTransactions)).append("\n");
    sb.append("    cumulatedAmount: ").append(toIndentedString(cumulatedAmount)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("virtualibanId");
    openapiFields.add("walletId");
    openapiFields.add("typeId");
    openapiFields.add("tag");
    openapiFields.add("reference");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("maxUsage");
    openapiFields.add("maxAmount");
    openapiFields.add("iban");
    openapiFields.add("createdDate");
    openapiFields.add("numberOfTransactions");
    openapiFields.add("cumulatedAmount");
    openapiFields.add("updatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualIbanObjectVirtualibansInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualIbanObjectVirtualibansInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualIbanObjectVirtualibansInner is not found in the empty JSON string", VirtualIbanObjectVirtualibansInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualIbanObjectVirtualibansInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualIbanObjectVirtualibansInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("validFrom") != null && !jsonObj.get("validFrom").isJsonNull()) && !jsonObj.get("validFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validFrom").toString()));
      }
      if ((jsonObj.get("validTo") != null && !jsonObj.get("validTo").isJsonNull()) && !jsonObj.get("validTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validTo").toString()));
      }
      if ((jsonObj.get("maxAmount") != null && !jsonObj.get("maxAmount").isJsonNull()) && !jsonObj.get("maxAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAmount").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("cumulatedAmount") != null && !jsonObj.get("cumulatedAmount").isJsonNull()) && !jsonObj.get("cumulatedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulatedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulatedAmount").toString()));
      }
      if ((jsonObj.get("updatedDate") != null && !jsonObj.get("updatedDate").isJsonNull()) && !jsonObj.get("updatedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualIbanObjectVirtualibansInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualIbanObjectVirtualibansInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualIbanObjectVirtualibansInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualIbanObjectVirtualibansInner.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualIbanObjectVirtualibansInner>() {
           @Override
           public void write(JsonWriter out, VirtualIbanObjectVirtualibansInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualIbanObjectVirtualibansInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualIbanObjectVirtualibansInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualIbanObjectVirtualibansInner
   * @throws IOException if the JSON string is invalid with respect to VirtualIbanObjectVirtualibansInner
   */
  public static VirtualIbanObjectVirtualibansInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualIbanObjectVirtualibansInner.class);
  }

  /**
   * Convert an instance of VirtualIbanObjectVirtualibansInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

