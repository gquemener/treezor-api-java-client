/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPayoutRefundRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostPayoutRefundRequest {
  public static final String SERIALIZED_NAME_PAYOUT_ID = "payoutId";
  @SerializedName(SERIALIZED_NAME_PAYOUT_ID)
  @javax.annotation.Nonnull
  private String payoutId;

  public static final String SERIALIZED_NAME_ACCESS_TAG = "accessTag";
  @SerializedName(SERIALIZED_NAME_ACCESS_TAG)
  @javax.annotation.Nullable
  private String accessTag;

  public static final String SERIALIZED_NAME_PAYOUT_REFUND_TAG = "payoutRefundTag";
  @SerializedName(SERIALIZED_NAME_PAYOUT_REFUND_TAG)
  @javax.annotation.Nullable
  private String payoutRefundTag;

  public static final String SERIALIZED_NAME_REQUEST_AMOUNT = "requestAmount";
  @SerializedName(SERIALIZED_NAME_REQUEST_AMOUNT)
  @javax.annotation.Nullable
  private Float requestAmount;

  public static final String SERIALIZED_NAME_REQUEST_CURRENCY = "requestCurrency";
  @SerializedName(SERIALIZED_NAME_REQUEST_CURRENCY)
  @javax.annotation.Nullable
  private String requestCurrency = "The initial Payout amount currency.";

  public static final String SERIALIZED_NAME_REQUEST_COMMENT = "requestComment";
  @SerializedName(SERIALIZED_NAME_REQUEST_COMMENT)
  @javax.annotation.Nullable
  private String requestComment;

  /**
   * The reason for the recall, as listed in the [Types of Recalls](/guide/transfers/sepa-recalls.html#types-of-recalls-reasoncode) article. 
   */
  @JsonAdapter(ReasonCodeEnum.Adapter.class)
  public enum ReasonCodeEnum {
    DUPL("DUPL"),
    
    TECH("TECH"),
    
    FRAD("FRAD"),
    
    CUST("CUST"),
    
    AM09("AM09"),
    
    AC03("AC03");

    private String value;

    ReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonCodeEnum fromValue(String value) {
      for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  @javax.annotation.Nonnull
  private ReasonCodeEnum reasonCode;

  public PostPayoutRefundRequest() {
  }

  public PostPayoutRefundRequest payoutId(@javax.annotation.Nonnull String payoutId) {
    this.payoutId = payoutId;
    return this;
  }

  /**
   * The unique identifier of the payout for which the recall is to be made.
   * @return payoutId
   */
  @javax.annotation.Nonnull
  public String getPayoutId() {
    return payoutId;
  }

  public void setPayoutId(@javax.annotation.Nonnull String payoutId) {
    this.payoutId = payoutId;
  }


  public PostPayoutRefundRequest accessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
    return this;
  }

  /**
   * A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html).  &lt;br&gt;Max length: 250 characters. 
   * @return accessTag
   */
  @javax.annotation.Nullable
  public String getAccessTag() {
    return accessTag;
  }

  public void setAccessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
  }


  public PostPayoutRefundRequest payoutRefundTag(@javax.annotation.Nullable String payoutRefundTag) {
    this.payoutRefundTag = payoutRefundTag;
    return this;
  }

  /**
   * Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60; 
   * @return payoutRefundTag
   */
  @javax.annotation.Nullable
  public String getPayoutRefundTag() {
    return payoutRefundTag;
  }

  public void setPayoutRefundTag(@javax.annotation.Nullable String payoutRefundTag) {
    this.payoutRefundTag = payoutRefundTag;
  }


  public PostPayoutRefundRequest requestAmount(@javax.annotation.Nullable Float requestAmount) {
    this.requestAmount = requestAmount;
    return this;
  }

  /**
   * The amount of the recall request. Defaults to the initial Payout amount.
   * @return requestAmount
   */
  @javax.annotation.Nullable
  public Float getRequestAmount() {
    return requestAmount;
  }

  public void setRequestAmount(@javax.annotation.Nullable Float requestAmount) {
    this.requestAmount = requestAmount;
  }


  public PostPayoutRefundRequest requestCurrency(@javax.annotation.Nullable String requestCurrency) {
    this.requestCurrency = requestCurrency;
    return this;
  }

  /**
   * The currency of the recall request.
   * @return requestCurrency
   */
  @javax.annotation.Nullable
  public String getRequestCurrency() {
    return requestCurrency;
  }

  public void setRequestCurrency(@javax.annotation.Nullable String requestCurrency) {
    this.requestCurrency = requestCurrency;
  }


  public PostPayoutRefundRequest requestComment(@javax.annotation.Nullable String requestComment) {
    this.requestComment = requestComment;
    return this;
  }

  /**
   * Max length: 105 characters. 
   * @return requestComment
   */
  @javax.annotation.Nullable
  public String getRequestComment() {
    return requestComment;
  }

  public void setRequestComment(@javax.annotation.Nullable String requestComment) {
    this.requestComment = requestComment;
  }


  public PostPayoutRefundRequest reasonCode(@javax.annotation.Nonnull ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * The reason for the recall, as listed in the [Types of Recalls](/guide/transfers/sepa-recalls.html#types-of-recalls-reasoncode) article. 
   * @return reasonCode
   */
  @javax.annotation.Nonnull
  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(@javax.annotation.Nonnull ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPayoutRefundRequest postPayoutRefundRequest = (PostPayoutRefundRequest) o;
    return Objects.equals(this.payoutId, postPayoutRefundRequest.payoutId) &&
        Objects.equals(this.accessTag, postPayoutRefundRequest.accessTag) &&
        Objects.equals(this.payoutRefundTag, postPayoutRefundRequest.payoutRefundTag) &&
        Objects.equals(this.requestAmount, postPayoutRefundRequest.requestAmount) &&
        Objects.equals(this.requestCurrency, postPayoutRefundRequest.requestCurrency) &&
        Objects.equals(this.requestComment, postPayoutRefundRequest.requestComment) &&
        Objects.equals(this.reasonCode, postPayoutRefundRequest.reasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payoutId, accessTag, payoutRefundTag, requestAmount, requestCurrency, requestComment, reasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPayoutRefundRequest {\n");
    sb.append("    payoutId: ").append(toIndentedString(payoutId)).append("\n");
    sb.append("    accessTag: ").append(toIndentedString(accessTag)).append("\n");
    sb.append("    payoutRefundTag: ").append(toIndentedString(payoutRefundTag)).append("\n");
    sb.append("    requestAmount: ").append(toIndentedString(requestAmount)).append("\n");
    sb.append("    requestCurrency: ").append(toIndentedString(requestCurrency)).append("\n");
    sb.append("    requestComment: ").append(toIndentedString(requestComment)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payoutId");
    openapiFields.add("accessTag");
    openapiFields.add("payoutRefundTag");
    openapiFields.add("requestAmount");
    openapiFields.add("requestCurrency");
    openapiFields.add("requestComment");
    openapiFields.add("reasonCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payoutId");
    openapiRequiredFields.add("reasonCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPayoutRefundRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPayoutRefundRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPayoutRefundRequest is not found in the empty JSON string", PostPayoutRefundRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPayoutRefundRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPayoutRefundRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPayoutRefundRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("payoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutId").toString()));
      }
      if ((jsonObj.get("accessTag") != null && !jsonObj.get("accessTag").isJsonNull()) && !jsonObj.get("accessTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTag").toString()));
      }
      if ((jsonObj.get("payoutRefundTag") != null && !jsonObj.get("payoutRefundTag").isJsonNull()) && !jsonObj.get("payoutRefundTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutRefundTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutRefundTag").toString()));
      }
      if ((jsonObj.get("requestCurrency") != null && !jsonObj.get("requestCurrency").isJsonNull()) && !jsonObj.get("requestCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCurrency").toString()));
      }
      if ((jsonObj.get("requestComment") != null && !jsonObj.get("requestComment").isJsonNull()) && !jsonObj.get("requestComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestComment").toString()));
      }
      if (!jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      // validate the required field `reasonCode`
      ReasonCodeEnum.validateJsonElement(jsonObj.get("reasonCode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPayoutRefundRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPayoutRefundRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPayoutRefundRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPayoutRefundRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPayoutRefundRequest>() {
           @Override
           public void write(JsonWriter out, PostPayoutRefundRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPayoutRefundRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPayoutRefundRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPayoutRefundRequest
   * @throws IOException if the JSON string is invalid with respect to PostPayoutRefundRequest
   */
  public static PostPayoutRefundRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPayoutRefundRequest.class);
  }

  /**
   * Convert an instance of PostPayoutRefundRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

