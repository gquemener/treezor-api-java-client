/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transfer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class Transfer {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_CODE_STATUS = "codeStatus";
  @SerializedName(SERIALIZED_NAME_CODE_STATUS)
  @javax.annotation.Nullable
  private String codeStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_RECEIVER_ID = "receiverId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RECEIVER_ID)
  @javax.annotation.Nullable
  private Integer receiverId;

  public static final String SERIALIZED_NAME_EMITTER_ID = "emitterId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EMITTER_ID)
  @javax.annotation.Nullable
  private Integer emitterId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_INFORMATION_STATUS = "informationStatus";
  @SerializedName(SERIALIZED_NAME_INFORMATION_STATUS)
  @javax.annotation.Nullable
  private String informationStatus;

  public static final String SERIALIZED_NAME_CREDITOR_WALLET_ID = "creditorWalletId";
  @SerializedName(SERIALIZED_NAME_CREDITOR_WALLET_ID)
  @javax.annotation.Nullable
  private String creditorWalletId;

  public static final String SERIALIZED_NAME_CREDITOR_FIRST_NAME = "creditorFirstName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_FIRST_NAME)
  @javax.annotation.Nullable
  private String creditorFirstName;

  public static final String SERIALIZED_NAME_CREDITOR_LAST_NAME = "creditorLastName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_LAST_NAME)
  @javax.annotation.Nullable
  private String creditorLastName;

  public static final String SERIALIZED_NAME_CREDITOR_LEGAL_NAME = "creditorLegalName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_LEGAL_NAME)
  @javax.annotation.Nullable
  private String creditorLegalName;

  public static final String SERIALIZED_NAME_CREDITOR_WALLET_EVENT_NAME = "creditorWalletEventName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_WALLET_EVENT_NAME)
  @javax.annotation.Nullable
  private String creditorWalletEventName;

  public static final String SERIALIZED_NAME_DEBTOR_WALLET_ID = "debtorWalletId";
  @SerializedName(SERIALIZED_NAME_DEBTOR_WALLET_ID)
  @javax.annotation.Nullable
  private String debtorWalletId;

  public static final String SERIALIZED_NAME_DEBTOR_FIRST_NAME = "debtorFirstName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_FIRST_NAME)
  @javax.annotation.Nullable
  private String debtorFirstName;

  public static final String SERIALIZED_NAME_DEBTOR_LAST_NAME = "debtorLastName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_LAST_NAME)
  @javax.annotation.Nullable
  private String debtorLastName;

  public static final String SERIALIZED_NAME_DEBTOR_LEGAL_NAME = "debtorLegalName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_LEGAL_NAME)
  @javax.annotation.Nullable
  private String debtorLegalName;

  public static final String SERIALIZED_NAME_DEBTOR_WALLET_EVENT_NAME = "debtorWalletEventName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_WALLET_EVENT_NAME)
  @javax.annotation.Nullable
  private String debtorWalletEventName;

  public Transfer() {
  }

  public Transfer label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public Transfer codeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
    return this;
  }

  /**
   * Get codeStatus
   * @return codeStatus
   */
  @javax.annotation.Nullable
  public String getCodeStatus() {
    return codeStatus;
  }

  public void setCodeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
  }


  public Transfer description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  @Deprecated
  public Transfer receiverId(@javax.annotation.Nullable Integer receiverId) {
    this.receiverId = receiverId;
    return this;
  }

  /**
   * Get receiverId
   * @return receiverId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getReceiverId() {
    return receiverId;
  }

  @Deprecated
  public void setReceiverId(@javax.annotation.Nullable Integer receiverId) {
    this.receiverId = receiverId;
  }


  @Deprecated
  public Transfer emitterId(@javax.annotation.Nullable Integer emitterId) {
    this.emitterId = emitterId;
    return this;
  }

  /**
   * Get emitterId
   * @return emitterId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getEmitterId() {
    return emitterId;
  }

  @Deprecated
  public void setEmitterId(@javax.annotation.Nullable Integer emitterId) {
    this.emitterId = emitterId;
  }


  public Transfer tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public Transfer informationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
    return this;
  }

  /**
   * Get informationStatus
   * @return informationStatus
   */
  @javax.annotation.Nullable
  public String getInformationStatus() {
    return informationStatus;
  }

  public void setInformationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
  }


  public Transfer creditorWalletId(@javax.annotation.Nullable String creditorWalletId) {
    this.creditorWalletId = creditorWalletId;
    return this;
  }

  /**
   * Get creditorWalletId
   * @return creditorWalletId
   */
  @javax.annotation.Nullable
  public String getCreditorWalletId() {
    return creditorWalletId;
  }

  public void setCreditorWalletId(@javax.annotation.Nullable String creditorWalletId) {
    this.creditorWalletId = creditorWalletId;
  }


  public Transfer creditorFirstName(@javax.annotation.Nullable String creditorFirstName) {
    this.creditorFirstName = creditorFirstName;
    return this;
  }

  /**
   * Get creditorFirstName
   * @return creditorFirstName
   */
  @javax.annotation.Nullable
  public String getCreditorFirstName() {
    return creditorFirstName;
  }

  public void setCreditorFirstName(@javax.annotation.Nullable String creditorFirstName) {
    this.creditorFirstName = creditorFirstName;
  }


  public Transfer creditorLastName(@javax.annotation.Nullable String creditorLastName) {
    this.creditorLastName = creditorLastName;
    return this;
  }

  /**
   * Get creditorLastName
   * @return creditorLastName
   */
  @javax.annotation.Nullable
  public String getCreditorLastName() {
    return creditorLastName;
  }

  public void setCreditorLastName(@javax.annotation.Nullable String creditorLastName) {
    this.creditorLastName = creditorLastName;
  }


  public Transfer creditorLegalName(@javax.annotation.Nullable String creditorLegalName) {
    this.creditorLegalName = creditorLegalName;
    return this;
  }

  /**
   * Get creditorLegalName
   * @return creditorLegalName
   */
  @javax.annotation.Nullable
  public String getCreditorLegalName() {
    return creditorLegalName;
  }

  public void setCreditorLegalName(@javax.annotation.Nullable String creditorLegalName) {
    this.creditorLegalName = creditorLegalName;
  }


  public Transfer creditorWalletEventName(@javax.annotation.Nullable String creditorWalletEventName) {
    this.creditorWalletEventName = creditorWalletEventName;
    return this;
  }

  /**
   * Get creditorWalletEventName
   * @return creditorWalletEventName
   */
  @javax.annotation.Nullable
  public String getCreditorWalletEventName() {
    return creditorWalletEventName;
  }

  public void setCreditorWalletEventName(@javax.annotation.Nullable String creditorWalletEventName) {
    this.creditorWalletEventName = creditorWalletEventName;
  }


  public Transfer debtorWalletId(@javax.annotation.Nullable String debtorWalletId) {
    this.debtorWalletId = debtorWalletId;
    return this;
  }

  /**
   * Get debtorWalletId
   * @return debtorWalletId
   */
  @javax.annotation.Nullable
  public String getDebtorWalletId() {
    return debtorWalletId;
  }

  public void setDebtorWalletId(@javax.annotation.Nullable String debtorWalletId) {
    this.debtorWalletId = debtorWalletId;
  }


  public Transfer debtorFirstName(@javax.annotation.Nullable String debtorFirstName) {
    this.debtorFirstName = debtorFirstName;
    return this;
  }

  /**
   * Get debtorFirstName
   * @return debtorFirstName
   */
  @javax.annotation.Nullable
  public String getDebtorFirstName() {
    return debtorFirstName;
  }

  public void setDebtorFirstName(@javax.annotation.Nullable String debtorFirstName) {
    this.debtorFirstName = debtorFirstName;
  }


  public Transfer debtorLastName(@javax.annotation.Nullable String debtorLastName) {
    this.debtorLastName = debtorLastName;
    return this;
  }

  /**
   * Get debtorLastName
   * @return debtorLastName
   */
  @javax.annotation.Nullable
  public String getDebtorLastName() {
    return debtorLastName;
  }

  public void setDebtorLastName(@javax.annotation.Nullable String debtorLastName) {
    this.debtorLastName = debtorLastName;
  }


  public Transfer debtorLegalName(@javax.annotation.Nullable String debtorLegalName) {
    this.debtorLegalName = debtorLegalName;
    return this;
  }

  /**
   * Get debtorLegalName
   * @return debtorLegalName
   */
  @javax.annotation.Nullable
  public String getDebtorLegalName() {
    return debtorLegalName;
  }

  public void setDebtorLegalName(@javax.annotation.Nullable String debtorLegalName) {
    this.debtorLegalName = debtorLegalName;
  }


  public Transfer debtorWalletEventName(@javax.annotation.Nullable String debtorWalletEventName) {
    this.debtorWalletEventName = debtorWalletEventName;
    return this;
  }

  /**
   * Get debtorWalletEventName
   * @return debtorWalletEventName
   */
  @javax.annotation.Nullable
  public String getDebtorWalletEventName() {
    return debtorWalletEventName;
  }

  public void setDebtorWalletEventName(@javax.annotation.Nullable String debtorWalletEventName) {
    this.debtorWalletEventName = debtorWalletEventName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transfer transfer = (Transfer) o;
    return Objects.equals(this.label, transfer.label) &&
        Objects.equals(this.codeStatus, transfer.codeStatus) &&
        Objects.equals(this.description, transfer.description) &&
        Objects.equals(this.receiverId, transfer.receiverId) &&
        Objects.equals(this.emitterId, transfer.emitterId) &&
        Objects.equals(this.tag, transfer.tag) &&
        Objects.equals(this.informationStatus, transfer.informationStatus) &&
        Objects.equals(this.creditorWalletId, transfer.creditorWalletId) &&
        Objects.equals(this.creditorFirstName, transfer.creditorFirstName) &&
        Objects.equals(this.creditorLastName, transfer.creditorLastName) &&
        Objects.equals(this.creditorLegalName, transfer.creditorLegalName) &&
        Objects.equals(this.creditorWalletEventName, transfer.creditorWalletEventName) &&
        Objects.equals(this.debtorWalletId, transfer.debtorWalletId) &&
        Objects.equals(this.debtorFirstName, transfer.debtorFirstName) &&
        Objects.equals(this.debtorLastName, transfer.debtorLastName) &&
        Objects.equals(this.debtorLegalName, transfer.debtorLegalName) &&
        Objects.equals(this.debtorWalletEventName, transfer.debtorWalletEventName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, codeStatus, description, receiverId, emitterId, tag, informationStatus, creditorWalletId, creditorFirstName, creditorLastName, creditorLegalName, creditorWalletEventName, debtorWalletId, debtorFirstName, debtorLastName, debtorLegalName, debtorWalletEventName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transfer {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    codeStatus: ").append(toIndentedString(codeStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    receiverId: ").append(toIndentedString(receiverId)).append("\n");
    sb.append("    emitterId: ").append(toIndentedString(emitterId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    informationStatus: ").append(toIndentedString(informationStatus)).append("\n");
    sb.append("    creditorWalletId: ").append(toIndentedString(creditorWalletId)).append("\n");
    sb.append("    creditorFirstName: ").append(toIndentedString(creditorFirstName)).append("\n");
    sb.append("    creditorLastName: ").append(toIndentedString(creditorLastName)).append("\n");
    sb.append("    creditorLegalName: ").append(toIndentedString(creditorLegalName)).append("\n");
    sb.append("    creditorWalletEventName: ").append(toIndentedString(creditorWalletEventName)).append("\n");
    sb.append("    debtorWalletId: ").append(toIndentedString(debtorWalletId)).append("\n");
    sb.append("    debtorFirstName: ").append(toIndentedString(debtorFirstName)).append("\n");
    sb.append("    debtorLastName: ").append(toIndentedString(debtorLastName)).append("\n");
    sb.append("    debtorLegalName: ").append(toIndentedString(debtorLegalName)).append("\n");
    sb.append("    debtorWalletEventName: ").append(toIndentedString(debtorWalletEventName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("codeStatus");
    openapiFields.add("description");
    openapiFields.add("receiverId");
    openapiFields.add("emitterId");
    openapiFields.add("tag");
    openapiFields.add("informationStatus");
    openapiFields.add("creditorWalletId");
    openapiFields.add("creditorFirstName");
    openapiFields.add("creditorLastName");
    openapiFields.add("creditorLegalName");
    openapiFields.add("creditorWalletEventName");
    openapiFields.add("debtorWalletId");
    openapiFields.add("debtorFirstName");
    openapiFields.add("debtorLastName");
    openapiFields.add("debtorLegalName");
    openapiFields.add("debtorWalletEventName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transfer is not found in the empty JSON string", Transfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("codeStatus") != null && !jsonObj.get("codeStatus").isJsonNull()) && !jsonObj.get("codeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeStatus").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("informationStatus") != null && !jsonObj.get("informationStatus").isJsonNull()) && !jsonObj.get("informationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informationStatus").toString()));
      }
      if ((jsonObj.get("creditorWalletId") != null && !jsonObj.get("creditorWalletId").isJsonNull()) && !jsonObj.get("creditorWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorWalletId").toString()));
      }
      if ((jsonObj.get("creditorFirstName") != null && !jsonObj.get("creditorFirstName").isJsonNull()) && !jsonObj.get("creditorFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorFirstName").toString()));
      }
      if ((jsonObj.get("creditorLastName") != null && !jsonObj.get("creditorLastName").isJsonNull()) && !jsonObj.get("creditorLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorLastName").toString()));
      }
      if ((jsonObj.get("creditorLegalName") != null && !jsonObj.get("creditorLegalName").isJsonNull()) && !jsonObj.get("creditorLegalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorLegalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorLegalName").toString()));
      }
      if ((jsonObj.get("creditorWalletEventName") != null && !jsonObj.get("creditorWalletEventName").isJsonNull()) && !jsonObj.get("creditorWalletEventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorWalletEventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorWalletEventName").toString()));
      }
      if ((jsonObj.get("debtorWalletId") != null && !jsonObj.get("debtorWalletId").isJsonNull()) && !jsonObj.get("debtorWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorWalletId").toString()));
      }
      if ((jsonObj.get("debtorFirstName") != null && !jsonObj.get("debtorFirstName").isJsonNull()) && !jsonObj.get("debtorFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorFirstName").toString()));
      }
      if ((jsonObj.get("debtorLastName") != null && !jsonObj.get("debtorLastName").isJsonNull()) && !jsonObj.get("debtorLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorLastName").toString()));
      }
      if ((jsonObj.get("debtorLegalName") != null && !jsonObj.get("debtorLegalName").isJsonNull()) && !jsonObj.get("debtorLegalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorLegalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorLegalName").toString()));
      }
      if ((jsonObj.get("debtorWalletEventName") != null && !jsonObj.get("debtorWalletEventName").isJsonNull()) && !jsonObj.get("debtorWalletEventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorWalletEventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorWalletEventName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transfer.class));

       return (TypeAdapter<T>) new TypeAdapter<Transfer>() {
           @Override
           public void write(JsonWriter out, Transfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transfer
   * @throws IOException if the JSON string is invalid with respect to Transfer
   */
  public static Transfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transfer.class);
  }

  /**
   * Convert an instance of Transfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

