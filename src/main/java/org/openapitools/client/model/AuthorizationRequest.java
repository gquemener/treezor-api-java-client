/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AuthorizationRequestBrowserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthorizationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class AuthorizationRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nonnull
  private String walletId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private String userId;

  public static final String SERIALIZED_NAME_TOPUP_CARD_ID = "topupCardId";
  @SerializedName(SERIALIZED_NAME_TOPUP_CARD_ID)
  @javax.annotation.Nullable
  private String topupCardId;

  public static final String SERIALIZED_NAME_ACCEPT_URL = "acceptUrl";
  @SerializedName(SERIALIZED_NAME_ACCEPT_URL)
  @javax.annotation.Nonnull
  private String acceptUrl;

  public static final String SERIALIZED_NAME_DECLINE_URL = "declineUrl";
  @SerializedName(SERIALIZED_NAME_DECLINE_URL)
  @javax.annotation.Nonnull
  private String declineUrl;

  public static final String SERIALIZED_NAME_PENDING_URL = "pendingUrl";
  @SerializedName(SERIALIZED_NAME_PENDING_URL)
  @javax.annotation.Nonnull
  private String pendingUrl;

  public static final String SERIALIZED_NAME_EXCEPTION_URL = "exceptionUrl";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_URL)
  @javax.annotation.Nonnull
  private String exceptionUrl;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancelUrl";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  @javax.annotation.Nonnull
  private String cancelUrl;

  public static final String SERIALIZED_NAME_ECI = "eci";
  @SerializedName(SERIALIZED_NAME_ECI)
  @javax.annotation.Nonnull
  private String eci;

  public static final String SERIALIZED_NAME_AUTHENTICATION_INDICATOR = "authenticationIndicator";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_INDICATOR)
  @javax.annotation.Nonnull
  private String authenticationIndicator;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nonnull
  private String orderId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nonnull
  private String description;

  public static final String SERIALIZED_NAME_PAYMENT_PRODUCT = "paymentProduct";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PRODUCT)
  @javax.annotation.Nonnull
  private String paymentProduct;

  public static final String SERIALIZED_NAME_ISSUER_BANK_ID = "issuerBankId";
  @SerializedName(SERIALIZED_NAME_ISSUER_BANK_ID)
  @javax.annotation.Nullable
  private String issuerBankId;

  public static final String SERIALIZED_NAME_IPADDR = "ipaddr";
  @SerializedName(SERIALIZED_NAME_IPADDR)
  @javax.annotation.Nullable
  private String ipaddr;

  public static final String SERIALIZED_NAME_DEVICE_CHANNEL = "deviceChannel";
  @SerializedName(SERIALIZED_NAME_DEVICE_CHANNEL)
  @javax.annotation.Nonnull
  private Integer deviceChannel;

  public static final String SERIALIZED_NAME_BROWSER_INFO = "browserInfo";
  @SerializedName(SERIALIZED_NAME_BROWSER_INFO)
  @javax.annotation.Nonnull
  private AuthorizationRequestBrowserInfo browserInfo;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private String profile;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  @javax.annotation.Nonnull
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  @javax.annotation.Nonnull
  private String lastname;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nonnull
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nonnull
  private String phone;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  @javax.annotation.Nonnull
  private String streetAddress;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nonnull
  private String city;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  @javax.annotation.Nonnull
  private String zipCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nonnull
  private String country;

  public static final String SERIALIZED_NAME_CARD_HOLDER = "cardHolder";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER)
  @javax.annotation.Nonnull
  private String cardHolder;

  public AuthorizationRequest() {
  }

  public AuthorizationRequest amount(@javax.annotation.Nonnull BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the operation.
   * @return amount
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull BigDecimal amount) {
    this.amount = amount;
  }


  public AuthorizationRequest currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency of the operation. Format: ISO-4217. 
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public AuthorizationRequest walletId(@javax.annotation.Nonnull String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * The unique identifier of the wallet to be credited.
   * @return walletId
   */
  @javax.annotation.Nonnull
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nonnull String walletId) {
    this.walletId = walletId;
  }


  public AuthorizationRequest userId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the user requesting the operation.
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }


  public AuthorizationRequest topupCardId(@javax.annotation.Nullable String topupCardId) {
    this.topupCardId = topupCardId;
    return this;
  }

  /**
   * The unique identifier for the user&#39;s Topup Card.
   * @return topupCardId
   */
  @javax.annotation.Nullable
  public String getTopupCardId() {
    return topupCardId;
  }

  public void setTopupCardId(@javax.annotation.Nullable String topupCardId) {
    this.topupCardId = topupCardId;
  }


  public AuthorizationRequest acceptUrl(@javax.annotation.Nonnull String acceptUrl) {
    this.acceptUrl = acceptUrl;
    return this;
  }

  /**
   * The URL to return the end user to once the payment process is completed successfully. 
   * @return acceptUrl
   */
  @javax.annotation.Nonnull
  public String getAcceptUrl() {
    return acceptUrl;
  }

  public void setAcceptUrl(@javax.annotation.Nonnull String acceptUrl) {
    this.acceptUrl = acceptUrl;
  }


  public AuthorizationRequest declineUrl(@javax.annotation.Nonnull String declineUrl) {
    this.declineUrl = declineUrl;
    return this;
  }

  /**
   * The URL to return the end user to after the acquirer declines the payment. 
   * @return declineUrl
   */
  @javax.annotation.Nonnull
  public String getDeclineUrl() {
    return declineUrl;
  }

  public void setDeclineUrl(@javax.annotation.Nonnull String declineUrl) {
    this.declineUrl = declineUrl;
  }


  public AuthorizationRequest pendingUrl(@javax.annotation.Nonnull String pendingUrl) {
    this.pendingUrl = pendingUrl;
    return this;
  }

  /**
   * The URL to return your end-user to when the payment request was submitted to the acquirer but response is not yet available. 
   * @return pendingUrl
   */
  @javax.annotation.Nonnull
  public String getPendingUrl() {
    return pendingUrl;
  }

  public void setPendingUrl(@javax.annotation.Nonnull String pendingUrl) {
    this.pendingUrl = pendingUrl;
  }


  public AuthorizationRequest exceptionUrl(@javax.annotation.Nonnull String exceptionUrl) {
    this.exceptionUrl = exceptionUrl;
    return this;
  }

  /**
   * The URL to return your end-user to after a system failure
   * @return exceptionUrl
   */
  @javax.annotation.Nonnull
  public String getExceptionUrl() {
    return exceptionUrl;
  }

  public void setExceptionUrl(@javax.annotation.Nonnull String exceptionUrl) {
    this.exceptionUrl = exceptionUrl;
  }


  public AuthorizationRequest cancelUrl(@javax.annotation.Nonnull String cancelUrl) {
    this.cancelUrl = cancelUrl;
    return this;
  }

  /**
   * The URL to return your end-user to after a system failure
   * @return cancelUrl
   */
  @javax.annotation.Nonnull
  public String getCancelUrl() {
    return cancelUrl;
  }

  public void setCancelUrl(@javax.annotation.Nonnull String cancelUrl) {
    this.cancelUrl = cancelUrl;
  }


  public AuthorizationRequest eci(@javax.annotation.Nonnull String eci) {
    this.eci = eci;
    return this;
  }

  /**
   * The ECI indicates the security level at which the payment information is processed between the cardholder and Treezor customer 
   * @return eci
   */
  @javax.annotation.Nonnull
  public String getEci() {
    return eci;
  }

  public void setEci(@javax.annotation.Nonnull String eci) {
    this.eci = eci;
  }


  public AuthorizationRequest authenticationIndicator(@javax.annotation.Nonnull String authenticationIndicator) {
    this.authenticationIndicator = authenticationIndicator;
    return this;
  }

  /**
   * If the payment product is a credit or debit card, this parameter indicates if the 3-D Secure authentication should be performed for this transaction 
   * @return authenticationIndicator
   */
  @javax.annotation.Nonnull
  public String getAuthenticationIndicator() {
    return authenticationIndicator;
  }

  public void setAuthenticationIndicator(@javax.annotation.Nonnull String authenticationIndicator) {
    this.authenticationIndicator = authenticationIndicator;
  }


  public AuthorizationRequest orderId(@javax.annotation.Nonnull String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The unique identifier of the order, guaranteeing the uniqueness of the transaction.   Must be unique and abide by the following rules: * Length: min. 32 characters * Structure: &#x60;&lt;yourCompanyName&gt;_order_&lt;uniqueIdentifier&gt;&#x60; 
   * @return orderId
   */
  @javax.annotation.Nonnull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nonnull String orderId) {
    this.orderId = orderId;
  }


  public AuthorizationRequest description(@javax.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * The order short description.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }


  public AuthorizationRequest paymentProduct(@javax.annotation.Nonnull String paymentProduct) {
    this.paymentProduct = paymentProduct;
    return this;
  }

  /**
   * The payment method used for the top-up.  Depending on the payment product, parameters specific to the payment method are required. 
   * @return paymentProduct
   */
  @javax.annotation.Nonnull
  public String getPaymentProduct() {
    return paymentProduct;
  }

  public void setPaymentProduct(@javax.annotation.Nonnull String paymentProduct) {
    this.paymentProduct = paymentProduct;
  }


  public AuthorizationRequest issuerBankId(@javax.annotation.Nullable String issuerBankId) {
    this.issuerBankId = issuerBankId;
    return this;
  }

  /**
   * This parameter is specific to the iDEAL payment product.  This is the Business Identifier Code (BIC) of the end user issuer bank 
   * @return issuerBankId
   */
  @javax.annotation.Nullable
  public String getIssuerBankId() {
    return issuerBankId;
  }

  public void setIssuerBankId(@javax.annotation.Nullable String issuerBankId) {
    this.issuerBankId = issuerBankId;
  }


  public AuthorizationRequest ipaddr(@javax.annotation.Nullable String ipaddr) {
    this.ipaddr = ipaddr;
    return this;
  }

  /**
   * The IP address of the end user making a top-up
   * @return ipaddr
   */
  @javax.annotation.Nullable
  public String getIpaddr() {
    return ipaddr;
  }

  public void setIpaddr(@javax.annotation.Nullable String ipaddr) {
    this.ipaddr = ipaddr;
  }


  public AuthorizationRequest deviceChannel(@javax.annotation.Nonnull Integer deviceChannel) {
    this.deviceChannel = deviceChannel;
    return this;
  }

  /**
   * This parameter is specific to the PSD2  Channel through which the transaction is being processed
   * @return deviceChannel
   */
  @javax.annotation.Nonnull
  public Integer getDeviceChannel() {
    return deviceChannel;
  }

  public void setDeviceChannel(@javax.annotation.Nonnull Integer deviceChannel) {
    this.deviceChannel = deviceChannel;
  }


  public AuthorizationRequest browserInfo(@javax.annotation.Nonnull AuthorizationRequestBrowserInfo browserInfo) {
    this.browserInfo = browserInfo;
    return this;
  }

  /**
   * Get browserInfo
   * @return browserInfo
   */
  @javax.annotation.Nonnull
  public AuthorizationRequestBrowserInfo getBrowserInfo() {
    return browserInfo;
  }

  public void setBrowserInfo(@javax.annotation.Nonnull AuthorizationRequestBrowserInfo browserInfo) {
    this.browserInfo = browserInfo;
  }


  public AuthorizationRequest profile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Your HiPay Merchant ID. Required if you have multiple MIDs, otherwise empty. 
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
  }


  public AuthorizationRequest firstname(@javax.annotation.Nonnull String firstname) {
    this.firstname = firstname;
    return this;
  }

  /**
   * The first name of the user.
   * @return firstname
   */
  @javax.annotation.Nonnull
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(@javax.annotation.Nonnull String firstname) {
    this.firstname = firstname;
  }


  public AuthorizationRequest lastname(@javax.annotation.Nonnull String lastname) {
    this.lastname = lastname;
    return this;
  }

  /**
   * The last name of the user.
   * @return lastname
   */
  @javax.annotation.Nonnull
  public String getLastname() {
    return lastname;
  }

  public void setLastname(@javax.annotation.Nonnull String lastname) {
    this.lastname = lastname;
  }


  public AuthorizationRequest email(@javax.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nonnull String email) {
    this.email = email;
  }


  public AuthorizationRequest phone(@javax.annotation.Nonnull String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The phone number of the user.
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nonnull String phone) {
    this.phone = phone;
  }


  public AuthorizationRequest streetAddress(@javax.annotation.Nonnull String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * The residence street name and number of the user.
   * @return streetAddress
   */
  @javax.annotation.Nonnull
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(@javax.annotation.Nonnull String streetAddress) {
    this.streetAddress = streetAddress;
  }


  public AuthorizationRequest city(@javax.annotation.Nonnull String city) {
    this.city = city;
    return this;
  }

  /**
   * The residence city of the user.
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nonnull String city) {
    this.city = city;
  }


  public AuthorizationRequest zipCode(@javax.annotation.Nonnull String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * The residence city zipcode of the user.
   * @return zipCode
   */
  @javax.annotation.Nonnull
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(@javax.annotation.Nonnull String zipCode) {
    this.zipCode = zipCode;
  }


  public AuthorizationRequest country(@javax.annotation.Nonnull String country) {
    this.country = country;
    return this;
  }

  /**
   * The residence country of the user. Format: ISO 3166 alpha-2 
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nonnull String country) {
    this.country = country;
  }


  public AuthorizationRequest cardHolder(@javax.annotation.Nonnull String cardHolder) {
    this.cardHolder = cardHolder;
    return this;
  }

  /**
   * The name associated to the card.
   * @return cardHolder
   */
  @javax.annotation.Nonnull
  public String getCardHolder() {
    return cardHolder;
  }

  public void setCardHolder(@javax.annotation.Nonnull String cardHolder) {
    this.cardHolder = cardHolder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationRequest authorizationRequest = (AuthorizationRequest) o;
    return Objects.equals(this.amount, authorizationRequest.amount) &&
        Objects.equals(this.currency, authorizationRequest.currency) &&
        Objects.equals(this.walletId, authorizationRequest.walletId) &&
        Objects.equals(this.userId, authorizationRequest.userId) &&
        Objects.equals(this.topupCardId, authorizationRequest.topupCardId) &&
        Objects.equals(this.acceptUrl, authorizationRequest.acceptUrl) &&
        Objects.equals(this.declineUrl, authorizationRequest.declineUrl) &&
        Objects.equals(this.pendingUrl, authorizationRequest.pendingUrl) &&
        Objects.equals(this.exceptionUrl, authorizationRequest.exceptionUrl) &&
        Objects.equals(this.cancelUrl, authorizationRequest.cancelUrl) &&
        Objects.equals(this.eci, authorizationRequest.eci) &&
        Objects.equals(this.authenticationIndicator, authorizationRequest.authenticationIndicator) &&
        Objects.equals(this.orderId, authorizationRequest.orderId) &&
        Objects.equals(this.description, authorizationRequest.description) &&
        Objects.equals(this.paymentProduct, authorizationRequest.paymentProduct) &&
        Objects.equals(this.issuerBankId, authorizationRequest.issuerBankId) &&
        Objects.equals(this.ipaddr, authorizationRequest.ipaddr) &&
        Objects.equals(this.deviceChannel, authorizationRequest.deviceChannel) &&
        Objects.equals(this.browserInfo, authorizationRequest.browserInfo) &&
        Objects.equals(this.profile, authorizationRequest.profile) &&
        Objects.equals(this.firstname, authorizationRequest.firstname) &&
        Objects.equals(this.lastname, authorizationRequest.lastname) &&
        Objects.equals(this.email, authorizationRequest.email) &&
        Objects.equals(this.phone, authorizationRequest.phone) &&
        Objects.equals(this.streetAddress, authorizationRequest.streetAddress) &&
        Objects.equals(this.city, authorizationRequest.city) &&
        Objects.equals(this.zipCode, authorizationRequest.zipCode) &&
        Objects.equals(this.country, authorizationRequest.country) &&
        Objects.equals(this.cardHolder, authorizationRequest.cardHolder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, walletId, userId, topupCardId, acceptUrl, declineUrl, pendingUrl, exceptionUrl, cancelUrl, eci, authenticationIndicator, orderId, description, paymentProduct, issuerBankId, ipaddr, deviceChannel, browserInfo, profile, firstname, lastname, email, phone, streetAddress, city, zipCode, country, cardHolder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    topupCardId: ").append(toIndentedString(topupCardId)).append("\n");
    sb.append("    acceptUrl: ").append(toIndentedString(acceptUrl)).append("\n");
    sb.append("    declineUrl: ").append(toIndentedString(declineUrl)).append("\n");
    sb.append("    pendingUrl: ").append(toIndentedString(pendingUrl)).append("\n");
    sb.append("    exceptionUrl: ").append(toIndentedString(exceptionUrl)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    eci: ").append(toIndentedString(eci)).append("\n");
    sb.append("    authenticationIndicator: ").append(toIndentedString(authenticationIndicator)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    paymentProduct: ").append(toIndentedString(paymentProduct)).append("\n");
    sb.append("    issuerBankId: ").append(toIndentedString(issuerBankId)).append("\n");
    sb.append("    ipaddr: ").append(toIndentedString(ipaddr)).append("\n");
    sb.append("    deviceChannel: ").append(toIndentedString(deviceChannel)).append("\n");
    sb.append("    browserInfo: ").append(toIndentedString(browserInfo)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    cardHolder: ").append(toIndentedString(cardHolder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("walletId");
    openapiFields.add("userId");
    openapiFields.add("topupCardId");
    openapiFields.add("acceptUrl");
    openapiFields.add("declineUrl");
    openapiFields.add("pendingUrl");
    openapiFields.add("exceptionUrl");
    openapiFields.add("cancelUrl");
    openapiFields.add("eci");
    openapiFields.add("authenticationIndicator");
    openapiFields.add("orderId");
    openapiFields.add("description");
    openapiFields.add("paymentProduct");
    openapiFields.add("issuerBankId");
    openapiFields.add("ipaddr");
    openapiFields.add("deviceChannel");
    openapiFields.add("browserInfo");
    openapiFields.add("profile");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("streetAddress");
    openapiFields.add("city");
    openapiFields.add("zipCode");
    openapiFields.add("country");
    openapiFields.add("cardHolder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("walletId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("acceptUrl");
    openapiRequiredFields.add("declineUrl");
    openapiRequiredFields.add("pendingUrl");
    openapiRequiredFields.add("exceptionUrl");
    openapiRequiredFields.add("cancelUrl");
    openapiRequiredFields.add("eci");
    openapiRequiredFields.add("authenticationIndicator");
    openapiRequiredFields.add("orderId");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("paymentProduct");
    openapiRequiredFields.add("deviceChannel");
    openapiRequiredFields.add("browserInfo");
    openapiRequiredFields.add("firstname");
    openapiRequiredFields.add("lastname");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("streetAddress");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("zipCode");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("cardHolder");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationRequest is not found in the empty JSON string", AuthorizationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthorizationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("topupCardId") != null && !jsonObj.get("topupCardId").isJsonNull()) && !jsonObj.get("topupCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topupCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topupCardId").toString()));
      }
      if (!jsonObj.get("acceptUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceptUrl").toString()));
      }
      if (!jsonObj.get("declineUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `declineUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("declineUrl").toString()));
      }
      if (!jsonObj.get("pendingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingUrl").toString()));
      }
      if (!jsonObj.get("exceptionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exceptionUrl").toString()));
      }
      if (!jsonObj.get("cancelUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelUrl").toString()));
      }
      if (!jsonObj.get("eci").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eci` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eci").toString()));
      }
      if (!jsonObj.get("authenticationIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationIndicator").toString()));
      }
      if (!jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("paymentProduct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentProduct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentProduct").toString()));
      }
      if ((jsonObj.get("issuerBankId") != null && !jsonObj.get("issuerBankId").isJsonNull()) && !jsonObj.get("issuerBankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerBankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerBankId").toString()));
      }
      if ((jsonObj.get("ipaddr") != null && !jsonObj.get("ipaddr").isJsonNull()) && !jsonObj.get("ipaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipaddr").toString()));
      }
      // validate the required field `browserInfo`
      AuthorizationRequestBrowserInfo.validateJsonElement(jsonObj.get("browserInfo"));
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
      if (!jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if (!jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("streetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("cardHolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationRequest>() {
           @Override
           public void write(JsonWriter out, AuthorizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizationRequest
   * @throws IOException if the JSON string is invalid with respect to AuthorizationRequest
   */
  public static AuthorizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationRequest.class);
  }

  /**
   * Convert an instance of AuthorizationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

