/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChangePinRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class ChangePinRequest {
  public static final String SERIALIZED_NAME_CURRENT_P_I_N = "currentPIN";
  @SerializedName(SERIALIZED_NAME_CURRENT_P_I_N)
  @javax.annotation.Nonnull
  private String currentPIN;

  public static final String SERIALIZED_NAME_NEW_P_I_N = "newPIN";
  @SerializedName(SERIALIZED_NAME_NEW_P_I_N)
  @javax.annotation.Nonnull
  private String newPIN;

  public static final String SERIALIZED_NAME_CONFIRM_P_I_N = "confirmPIN";
  @SerializedName(SERIALIZED_NAME_CONFIRM_P_I_N)
  @javax.annotation.Nonnull
  private String confirmPIN;

  public static final String SERIALIZED_NAME_ACCESS_TAG = "accessTag";
  @SerializedName(SERIALIZED_NAME_ACCESS_TAG)
  @javax.annotation.Nullable
  private String accessTag;

  public ChangePinRequest() {
  }

  public ChangePinRequest currentPIN(@javax.annotation.Nonnull String currentPIN) {
    this.currentPIN = currentPIN;
    return this;
  }

  /**
   * The current PIN code of the card.
   * @return currentPIN
   */
  @javax.annotation.Nonnull
  public String getCurrentPIN() {
    return currentPIN;
  }

  public void setCurrentPIN(@javax.annotation.Nonnull String currentPIN) {
    this.currentPIN = currentPIN;
  }


  public ChangePinRequest newPIN(@javax.annotation.Nonnull String newPIN) {
    this.newPIN = newPIN;
    return this;
  }

  /**
   * The new PIN code of the card.
   * @return newPIN
   */
  @javax.annotation.Nonnull
  public String getNewPIN() {
    return newPIN;
  }

  public void setNewPIN(@javax.annotation.Nonnull String newPIN) {
    this.newPIN = newPIN;
  }


  public ChangePinRequest confirmPIN(@javax.annotation.Nonnull String confirmPIN) {
    this.confirmPIN = confirmPIN;
    return this;
  }

  /**
   * The confirmation of the new PIN code of the card.
   * @return confirmPIN
   */
  @javax.annotation.Nonnull
  public String getConfirmPIN() {
    return confirmPIN;
  }

  public void setConfirmPIN(@javax.annotation.Nonnull String confirmPIN) {
    this.confirmPIN = confirmPIN;
  }


  public ChangePinRequest accessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
    return this;
  }

  /**
   * A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters. 
   * @return accessTag
   */
  @javax.annotation.Nullable
  public String getAccessTag() {
    return accessTag;
  }

  public void setAccessTag(@javax.annotation.Nullable String accessTag) {
    this.accessTag = accessTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangePinRequest changePinRequest = (ChangePinRequest) o;
    return Objects.equals(this.currentPIN, changePinRequest.currentPIN) &&
        Objects.equals(this.newPIN, changePinRequest.newPIN) &&
        Objects.equals(this.confirmPIN, changePinRequest.confirmPIN) &&
        Objects.equals(this.accessTag, changePinRequest.accessTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPIN, newPIN, confirmPIN, accessTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangePinRequest {\n");
    sb.append("    currentPIN: ").append(toIndentedString(currentPIN)).append("\n");
    sb.append("    newPIN: ").append(toIndentedString(newPIN)).append("\n");
    sb.append("    confirmPIN: ").append(toIndentedString(confirmPIN)).append("\n");
    sb.append("    accessTag: ").append(toIndentedString(accessTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentPIN");
    openapiFields.add("newPIN");
    openapiFields.add("confirmPIN");
    openapiFields.add("accessTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentPIN");
    openapiRequiredFields.add("newPIN");
    openapiRequiredFields.add("confirmPIN");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangePinRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangePinRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangePinRequest is not found in the empty JSON string", ChangePinRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangePinRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangePinRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChangePinRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currentPIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPIN").toString()));
      }
      if (!jsonObj.get("newPIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newPIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newPIN").toString()));
      }
      if (!jsonObj.get("confirmPIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmPIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmPIN").toString()));
      }
      if ((jsonObj.get("accessTag") != null && !jsonObj.get("accessTag").isJsonNull()) && !jsonObj.get("accessTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangePinRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangePinRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangePinRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangePinRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangePinRequest>() {
           @Override
           public void write(JsonWriter out, ChangePinRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangePinRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangePinRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangePinRequest
   * @throws IOException if the JSON string is invalid with respect to ChangePinRequest
   */
  public static ChangePinRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangePinRequest.class);
  }

  /**
   * Convert an instance of ChangePinRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

