/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayoutRefund
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PayoutRefund {
  public static final String SERIALIZED_NAME_PAYOUT_REFUND_TAG = "payoutRefundTag";
  @SerializedName(SERIALIZED_NAME_PAYOUT_REFUND_TAG)
  @javax.annotation.Nullable
  private String payoutRefundTag;

  public static final String SERIALIZED_NAME_CODE_STATUS = "codeStatus";
  @SerializedName(SERIALIZED_NAME_CODE_STATUS)
  @javax.annotation.Nullable
  private String codeStatus;

  public static final String SERIALIZED_NAME_INFORMATION_STATUS = "informationStatus";
  @SerializedName(SERIALIZED_NAME_INFORMATION_STATUS)
  @javax.annotation.Nullable
  private String informationStatus;

  public static final String SERIALIZED_NAME_REQUEST_COMMENT = "requestComment";
  @SerializedName(SERIALIZED_NAME_REQUEST_COMMENT)
  @javax.annotation.Nullable
  private String requestComment;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  @javax.annotation.Nullable
  private String reasonCode;

  public static final String SERIALIZED_NAME_REFUND_DATE = "refundDate";
  @SerializedName(SERIALIZED_NAME_REFUND_DATE)
  @javax.annotation.Nullable
  private String refundDate;

  public static final String SERIALIZED_NAME_REFUND_COMMENT = "refundComment";
  @SerializedName(SERIALIZED_NAME_REFUND_COMMENT)
  @javax.annotation.Nullable
  private String refundComment;

  public static final String SERIALIZED_NAME_PAYOUT_ID = "payoutId";
  @SerializedName(SERIALIZED_NAME_PAYOUT_ID)
  @javax.annotation.Nullable
  private String payoutId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_BENEFICIARY_NAME = "beneficiaryName";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_NAME)
  @javax.annotation.Nullable
  private String beneficiaryName;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_END_TO_END_ID = "endToEndId";
  @SerializedName(SERIALIZED_NAME_END_TO_END_ID)
  @javax.annotation.Nullable
  private String endToEndId;

  public static final String SERIALIZED_NAME_UNIQUE_MANDATE_REFERENCE = "uniqueMandateReference";
  @SerializedName(SERIALIZED_NAME_UNIQUE_MANDATE_REFERENCE)
  @javax.annotation.Nullable
  private String uniqueMandateReference;

  public PayoutRefund() {
  }

  public PayoutRefund payoutRefundTag(@javax.annotation.Nullable String payoutRefundTag) {
    this.payoutRefundTag = payoutRefundTag;
    return this;
  }

  /**
   * Get payoutRefundTag
   * @return payoutRefundTag
   */
  @javax.annotation.Nullable
  public String getPayoutRefundTag() {
    return payoutRefundTag;
  }

  public void setPayoutRefundTag(@javax.annotation.Nullable String payoutRefundTag) {
    this.payoutRefundTag = payoutRefundTag;
  }


  public PayoutRefund codeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
    return this;
  }

  /**
   * Get codeStatus
   * @return codeStatus
   */
  @javax.annotation.Nullable
  public String getCodeStatus() {
    return codeStatus;
  }

  public void setCodeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
  }


  public PayoutRefund informationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
    return this;
  }

  /**
   * Get informationStatus
   * @return informationStatus
   */
  @javax.annotation.Nullable
  public String getInformationStatus() {
    return informationStatus;
  }

  public void setInformationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
  }


  public PayoutRefund requestComment(@javax.annotation.Nullable String requestComment) {
    this.requestComment = requestComment;
    return this;
  }

  /**
   * Get requestComment
   * @return requestComment
   */
  @javax.annotation.Nullable
  public String getRequestComment() {
    return requestComment;
  }

  public void setRequestComment(@javax.annotation.Nullable String requestComment) {
    this.requestComment = requestComment;
  }


  public PayoutRefund reasonCode(@javax.annotation.Nullable String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Get reasonCode
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(@javax.annotation.Nullable String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public PayoutRefund refundDate(@javax.annotation.Nullable String refundDate) {
    this.refundDate = refundDate;
    return this;
  }

  /**
   * Get refundDate
   * @return refundDate
   */
  @javax.annotation.Nullable
  public String getRefundDate() {
    return refundDate;
  }

  public void setRefundDate(@javax.annotation.Nullable String refundDate) {
    this.refundDate = refundDate;
  }


  public PayoutRefund refundComment(@javax.annotation.Nullable String refundComment) {
    this.refundComment = refundComment;
    return this;
  }

  /**
   * Get refundComment
   * @return refundComment
   */
  @javax.annotation.Nullable
  public String getRefundComment() {
    return refundComment;
  }

  public void setRefundComment(@javax.annotation.Nullable String refundComment) {
    this.refundComment = refundComment;
  }


  public PayoutRefund payoutId(@javax.annotation.Nullable String payoutId) {
    this.payoutId = payoutId;
    return this;
  }

  /**
   * Get payoutId
   * @return payoutId
   */
  @javax.annotation.Nullable
  public String getPayoutId() {
    return payoutId;
  }

  public void setPayoutId(@javax.annotation.Nullable String payoutId) {
    this.payoutId = payoutId;
  }


  public PayoutRefund tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public PayoutRefund beneficiaryName(@javax.annotation.Nullable String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
    return this;
  }

  /**
   * Get beneficiaryName
   * @return beneficiaryName
   */
  @javax.annotation.Nullable
  public String getBeneficiaryName() {
    return beneficiaryName;
  }

  public void setBeneficiaryName(@javax.annotation.Nullable String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }


  public PayoutRefund label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public PayoutRefund endToEndId(@javax.annotation.Nullable String endToEndId) {
    this.endToEndId = endToEndId;
    return this;
  }

  /**
   * Get endToEndId
   * @return endToEndId
   */
  @javax.annotation.Nullable
  public String getEndToEndId() {
    return endToEndId;
  }

  public void setEndToEndId(@javax.annotation.Nullable String endToEndId) {
    this.endToEndId = endToEndId;
  }


  public PayoutRefund uniqueMandateReference(@javax.annotation.Nullable String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
    return this;
  }

  /**
   * Get uniqueMandateReference
   * @return uniqueMandateReference
   */
  @javax.annotation.Nullable
  public String getUniqueMandateReference() {
    return uniqueMandateReference;
  }

  public void setUniqueMandateReference(@javax.annotation.Nullable String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayoutRefund payoutRefund = (PayoutRefund) o;
    return Objects.equals(this.payoutRefundTag, payoutRefund.payoutRefundTag) &&
        Objects.equals(this.codeStatus, payoutRefund.codeStatus) &&
        Objects.equals(this.informationStatus, payoutRefund.informationStatus) &&
        Objects.equals(this.requestComment, payoutRefund.requestComment) &&
        Objects.equals(this.reasonCode, payoutRefund.reasonCode) &&
        Objects.equals(this.refundDate, payoutRefund.refundDate) &&
        Objects.equals(this.refundComment, payoutRefund.refundComment) &&
        Objects.equals(this.payoutId, payoutRefund.payoutId) &&
        Objects.equals(this.tag, payoutRefund.tag) &&
        Objects.equals(this.beneficiaryName, payoutRefund.beneficiaryName) &&
        Objects.equals(this.label, payoutRefund.label) &&
        Objects.equals(this.endToEndId, payoutRefund.endToEndId) &&
        Objects.equals(this.uniqueMandateReference, payoutRefund.uniqueMandateReference);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(payoutRefundTag, codeStatus, informationStatus, requestComment, reasonCode, refundDate, refundComment, payoutId, tag, beneficiaryName, label, endToEndId, uniqueMandateReference);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutRefund {\n");
    sb.append("    payoutRefundTag: ").append(toIndentedString(payoutRefundTag)).append("\n");
    sb.append("    codeStatus: ").append(toIndentedString(codeStatus)).append("\n");
    sb.append("    informationStatus: ").append(toIndentedString(informationStatus)).append("\n");
    sb.append("    requestComment: ").append(toIndentedString(requestComment)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    refundDate: ").append(toIndentedString(refundDate)).append("\n");
    sb.append("    refundComment: ").append(toIndentedString(refundComment)).append("\n");
    sb.append("    payoutId: ").append(toIndentedString(payoutId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    endToEndId: ").append(toIndentedString(endToEndId)).append("\n");
    sb.append("    uniqueMandateReference: ").append(toIndentedString(uniqueMandateReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payoutRefundTag");
    openapiFields.add("codeStatus");
    openapiFields.add("informationStatus");
    openapiFields.add("requestComment");
    openapiFields.add("reasonCode");
    openapiFields.add("refundDate");
    openapiFields.add("refundComment");
    openapiFields.add("payoutId");
    openapiFields.add("tag");
    openapiFields.add("beneficiaryName");
    openapiFields.add("label");
    openapiFields.add("endToEndId");
    openapiFields.add("uniqueMandateReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayoutRefund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayoutRefund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayoutRefund is not found in the empty JSON string", PayoutRefund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayoutRefund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayoutRefund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payoutRefundTag") != null && !jsonObj.get("payoutRefundTag").isJsonNull()) && !jsonObj.get("payoutRefundTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutRefundTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutRefundTag").toString()));
      }
      if ((jsonObj.get("codeStatus") != null && !jsonObj.get("codeStatus").isJsonNull()) && !jsonObj.get("codeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeStatus").toString()));
      }
      if ((jsonObj.get("informationStatus") != null && !jsonObj.get("informationStatus").isJsonNull()) && !jsonObj.get("informationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informationStatus").toString()));
      }
      if ((jsonObj.get("requestComment") != null && !jsonObj.get("requestComment").isJsonNull()) && !jsonObj.get("requestComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestComment").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      if ((jsonObj.get("refundDate") != null && !jsonObj.get("refundDate").isJsonNull()) && !jsonObj.get("refundDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundDate").toString()));
      }
      if ((jsonObj.get("refundComment") != null && !jsonObj.get("refundComment").isJsonNull()) && !jsonObj.get("refundComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundComment").toString()));
      }
      if ((jsonObj.get("payoutId") != null && !jsonObj.get("payoutId").isJsonNull()) && !jsonObj.get("payoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutId").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("beneficiaryName") != null && !jsonObj.get("beneficiaryName").isJsonNull()) && !jsonObj.get("beneficiaryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryName").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("endToEndId") != null && !jsonObj.get("endToEndId").isJsonNull()) && !jsonObj.get("endToEndId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endToEndId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endToEndId").toString()));
      }
      if ((jsonObj.get("uniqueMandateReference") != null && !jsonObj.get("uniqueMandateReference").isJsonNull()) && !jsonObj.get("uniqueMandateReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueMandateReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueMandateReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayoutRefund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayoutRefund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayoutRefund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayoutRefund.class));

       return (TypeAdapter<T>) new TypeAdapter<PayoutRefund>() {
           @Override
           public void write(JsonWriter out, PayoutRefund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayoutRefund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayoutRefund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayoutRefund
   * @throws IOException if the JSON string is invalid with respect to PayoutRefund
   */
  public static PayoutRefund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayoutRefund.class);
  }

  /**
   * Convert an instance of PayoutRefund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

