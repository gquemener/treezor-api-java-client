/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RefundResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class RefundResponse {
  public static final String SERIALIZED_NAME_PAYINREFUND_ID = "payinrefundId";
  @SerializedName(SERIALIZED_NAME_PAYINREFUND_ID)
  @javax.annotation.Nullable
  private String payinrefundId;

  public static final String SERIALIZED_NAME_PAYINREFUND_TAG = "payinrefundTag";
  @SerializedName(SERIALIZED_NAME_PAYINREFUND_TAG)
  @javax.annotation.Nullable
  private String payinrefundTag = "null";

  /**
   * Status of the refund.   Possible values:   - *PENDING*   - *VALIDATED*   - *CANCELED*
   */
  @JsonAdapter(PayinrefundStatusEnum.Adapter.class)
  public enum PayinrefundStatusEnum {
    PENDING("PENDING"),
    
    VALIDATED("VALIDATED"),
    
    CANCELED("CANCELED");

    private String value;

    PayinrefundStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayinrefundStatusEnum fromValue(String value) {
      for (PayinrefundStatusEnum b : PayinrefundStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayinrefundStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayinrefundStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayinrefundStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayinrefundStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayinrefundStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYINREFUND_STATUS = "payinrefundStatus";
  @SerializedName(SERIALIZED_NAME_PAYINREFUND_STATUS)
  @javax.annotation.Nullable
  private PayinrefundStatusEnum payinrefundStatus;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nullable
  private String walletId;

  public static final String SERIALIZED_NAME_PAYIN_ID = "payinId";
  @SerializedName(SERIALIZED_NAME_PAYIN_ID)
  @javax.annotation.Nullable
  private String payinId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private String createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private String modifiedDate;

  public static final String SERIALIZED_NAME_PAYINREFUND_DATE = "payinrefundDate";
  @SerializedName(SERIALIZED_NAME_PAYINREFUND_DATE)
  @javax.annotation.Nullable
  private String payinrefundDate;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private String profile;

  public RefundResponse() {
  }

  public RefundResponse payinrefundId(@javax.annotation.Nullable String payinrefundId) {
    this.payinrefundId = payinrefundId;
    return this;
  }

  /**
   * The universally unique identifier (UUID) of the refund
   * @return payinrefundId
   */
  @javax.annotation.Nullable
  public String getPayinrefundId() {
    return payinrefundId;
  }

  public void setPayinrefundId(@javax.annotation.Nullable String payinrefundId) {
    this.payinrefundId = payinrefundId;
  }


  public RefundResponse payinrefundTag(@javax.annotation.Nullable String payinrefundTag) {
    this.payinrefundTag = payinrefundTag;
    return this;
  }

  /**
   * Get payinrefundTag
   * @return payinrefundTag
   */
  @javax.annotation.Nullable
  public String getPayinrefundTag() {
    return payinrefundTag;
  }

  public void setPayinrefundTag(@javax.annotation.Nullable String payinrefundTag) {
    this.payinrefundTag = payinrefundTag;
  }


  public RefundResponse payinrefundStatus(@javax.annotation.Nullable PayinrefundStatusEnum payinrefundStatus) {
    this.payinrefundStatus = payinrefundStatus;
    return this;
  }

  /**
   * Status of the refund.   Possible values:   - *PENDING*   - *VALIDATED*   - *CANCELED*
   * @return payinrefundStatus
   */
  @javax.annotation.Nullable
  public PayinrefundStatusEnum getPayinrefundStatus() {
    return payinrefundStatus;
  }

  public void setPayinrefundStatus(@javax.annotation.Nullable PayinrefundStatusEnum payinrefundStatus) {
    this.payinrefundStatus = payinrefundStatus;
  }


  public RefundResponse walletId(@javax.annotation.Nullable String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Identifier of the wallet to be debited
   * @return walletId
   */
  @javax.annotation.Nullable
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nullable String walletId) {
    this.walletId = walletId;
  }


  public RefundResponse payinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
    return this;
  }

  /**
   * The universally unique identifier (UUID) of the payin
   * @return payinId
   */
  @javax.annotation.Nullable
  public String getPayinId() {
    return payinId;
  }

  public void setPayinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
  }


  public RefundResponse amount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount to be refunded
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
  }


  public RefundResponse currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Base currency for the refund.  This three-character currency code must comply with ISO-4217
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public RefundResponse createdDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The creation date of the refund
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
  }


  public RefundResponse modifiedDate(@javax.annotation.Nullable String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * The last updated date of the refund
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public RefundResponse payinrefundDate(@javax.annotation.Nullable String payinrefundDate) {
    this.payinrefundDate = payinrefundDate;
    return this;
  }

  /**
   * The date of the refund
   * @return payinrefundDate
   */
  @javax.annotation.Nullable
  public String getPayinrefundDate() {
    return payinrefundDate;
  }

  public void setPayinrefundDate(@javax.annotation.Nullable String payinrefundDate) {
    this.payinrefundDate = payinrefundDate;
  }


  public RefundResponse profile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Your HiPay Merchant ID.
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundResponse refundResponse = (RefundResponse) o;
    return Objects.equals(this.payinrefundId, refundResponse.payinrefundId) &&
        Objects.equals(this.payinrefundTag, refundResponse.payinrefundTag) &&
        Objects.equals(this.payinrefundStatus, refundResponse.payinrefundStatus) &&
        Objects.equals(this.walletId, refundResponse.walletId) &&
        Objects.equals(this.payinId, refundResponse.payinId) &&
        Objects.equals(this.amount, refundResponse.amount) &&
        Objects.equals(this.currency, refundResponse.currency) &&
        Objects.equals(this.createdDate, refundResponse.createdDate) &&
        Objects.equals(this.modifiedDate, refundResponse.modifiedDate) &&
        Objects.equals(this.payinrefundDate, refundResponse.payinrefundDate) &&
        Objects.equals(this.profile, refundResponse.profile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(payinrefundId, payinrefundTag, payinrefundStatus, walletId, payinId, amount, currency, createdDate, modifiedDate, payinrefundDate, profile);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundResponse {\n");
    sb.append("    payinrefundId: ").append(toIndentedString(payinrefundId)).append("\n");
    sb.append("    payinrefundTag: ").append(toIndentedString(payinrefundTag)).append("\n");
    sb.append("    payinrefundStatus: ").append(toIndentedString(payinrefundStatus)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    payinId: ").append(toIndentedString(payinId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    payinrefundDate: ").append(toIndentedString(payinrefundDate)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payinrefundId");
    openapiFields.add("payinrefundTag");
    openapiFields.add("payinrefundStatus");
    openapiFields.add("walletId");
    openapiFields.add("payinId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("payinrefundDate");
    openapiFields.add("profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RefundResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefundResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundResponse is not found in the empty JSON string", RefundResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefundResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefundResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payinrefundId") != null && !jsonObj.get("payinrefundId").isJsonNull()) && !jsonObj.get("payinrefundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinrefundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinrefundId").toString()));
      }
      if ((jsonObj.get("payinrefundTag") != null && !jsonObj.get("payinrefundTag").isJsonNull()) && !jsonObj.get("payinrefundTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinrefundTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinrefundTag").toString()));
      }
      if ((jsonObj.get("payinrefundStatus") != null && !jsonObj.get("payinrefundStatus").isJsonNull()) && !jsonObj.get("payinrefundStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinrefundStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinrefundStatus").toString()));
      }
      // validate the optional field `payinrefundStatus`
      if (jsonObj.get("payinrefundStatus") != null && !jsonObj.get("payinrefundStatus").isJsonNull()) {
        PayinrefundStatusEnum.validateJsonElement(jsonObj.get("payinrefundStatus"));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if ((jsonObj.get("payinId") != null && !jsonObj.get("payinId").isJsonNull()) && !jsonObj.get("payinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinId").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
      if ((jsonObj.get("payinrefundDate") != null && !jsonObj.get("payinrefundDate").isJsonNull()) && !jsonObj.get("payinrefundDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinrefundDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinrefundDate").toString()));
      }
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundResponse>() {
           @Override
           public void write(JsonWriter out, RefundResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RefundResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RefundResponse
   * @throws IOException if the JSON string is invalid with respect to RefundResponse
   */
  public static RefundResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundResponse.class);
  }

  /**
   * Convert an instance of RefundResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

