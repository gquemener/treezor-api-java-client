/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPayinRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostPayinRequest {
  public static final String SERIALIZED_NAME_PAYIN_TAG = "payinTag";
  @SerializedName(SERIALIZED_NAME_PAYIN_TAG)
  @javax.annotation.Nullable
  private String payinTag;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nonnull
  private Integer walletId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private String userId;

  /**
   * | Id | Payment by | | ---| --- | | &#x60;20&#x60; | SEPA Credit Transfer (SCTR) – You can only create such payins in Sandbox, otherwise created automatically upon receiving a transfer. | | &#x60;21&#x60; | SEPA Direct Debit Core | | &#x60;23&#x60; | Full Hosted HTML Payment Form. If you use this &#x60;paymentMethodId&#x60;, the &#x60;paymentAcceptedUrl&#x60;, &#x60;paymentRefusedUrl&#x60;, &#x60;paymentWaitingUrl&#x60;, &#x60;paymentCanceledUrl&#x60; and &#x60;paymentExceptionUrl&#x60; fields are mandatory. CSS of the payment page can be customized. | | &#x60;24&#x60; | IFrame Payment Form. Please note that if you use this &#x60;paymentMethodId&#x60;, the &#x60;paymentAcceptedUrl&#x60;, &#x60;paymentRefusedUrl&#x60;, &#x60;paymentWaitingUrl&#x60;, &#x60;paymentCanceledUrl&#x60; and &#x60;paymentExceptionUrl&#x60; fields are mandatory. CSS of the payment page can be customized. | | &#x60;25&#x60; | Card topup - You cannot create a payin directly with this method id. The payin will be automatically created by Treezor. | | &#x60;26&#x60; | Check | | &#x60;27&#x60; | Instant Credit Transfers (SCTR Inst) – You cannot create a payin directly with this method id. The payin will be automatically created by Treezor. | 
   */
  @JsonAdapter(PaymentMethodIdEnum.Adapter.class)
  public enum PaymentMethodIdEnum {
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27);

    private Integer value;

    PaymentMethodIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodIdEnum fromValue(Integer value) {
      for (PaymentMethodIdEnum b : PaymentMethodIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PaymentMethodIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PaymentMethodIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "paymentMethodId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  @javax.annotation.Nonnull
  private PaymentMethodIdEnum paymentMethodId;

  public static final String SERIALIZED_NAME_PAYMENT_ACCEPTED_URL = "paymentAcceptedUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCEPTED_URL)
  @javax.annotation.Nullable
  private String paymentAcceptedUrl;

  public static final String SERIALIZED_NAME_PAYMENT_WAITING_URL = "paymentWaitingUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_WAITING_URL)
  @javax.annotation.Nullable
  private String paymentWaitingUrl;

  public static final String SERIALIZED_NAME_PAYMENT_CANCELED_URL = "paymentCanceledUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CANCELED_URL)
  @javax.annotation.Nullable
  private String paymentCanceledUrl;

  public static final String SERIALIZED_NAME_PAYMENT_REFUSED_URL = "paymentRefusedUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REFUSED_URL)
  @javax.annotation.Nullable
  private String paymentRefusedUrl;

  public static final String SERIALIZED_NAME_PAYMENT_EXCEPTION_URL = "paymentExceptionUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_EXCEPTION_URL)
  @javax.annotation.Nullable
  private String paymentExceptionUrl;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private Float amount;

  public static final String SERIALIZED_NAME_DISTRIBUTOR_FEE = "distributorFee";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTOR_FEE)
  @javax.annotation.Nullable
  private Float distributorFee;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_MESSAGE_TO_USER = "messageToUser";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_USER)
  @javax.annotation.Nullable
  private String messageToUser;

  /**
   * Language for the third party interface.
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    FRA("FRA"),
    
    GBR("GBR"),
    
    ESP("ESP"),
    
    ITA("ITA"),
    
    PRT("PRT");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_CREATED_IP = "createdIp";
  @SerializedName(SERIALIZED_NAME_CREATED_IP)
  @javax.annotation.Nullable
  private String createdIp;

  public static final String SERIALIZED_NAME_PAYIN_DATE = "payinDate";
  @SerializedName(SERIALIZED_NAME_PAYIN_DATE)
  @javax.annotation.Nullable
  private String payinDate;

  public static final String SERIALIZED_NAME_MANDATE_ID = "mandateId";
  @SerializedName(SERIALIZED_NAME_MANDATE_ID)
  @javax.annotation.Nullable
  private Integer mandateId;

  public PostPayinRequest() {
  }

  public PostPayinRequest payinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
    return this;
  }

  /**
   * Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article. &lt;br&gt;Max length: 250 characters  &lt;br&gt;Format: hc characters and &#x60;/&#x60; &#x60;!&#x60; &#x60;-&#x60; &#x60;_&#x60; &#x60;.&#x60; &#x60;*&#x60; &#x60;&#39;&#x60; &#x60;(&#x60; &#x60;)&#x60; 
   * @return payinTag
   */
  @javax.annotation.Nullable
  public String getPayinTag() {
    return payinTag;
  }

  public void setPayinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
  }


  public PostPayinRequest walletId(@javax.annotation.Nonnull Integer walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * The unique identifier of the credited Wallet.
   * @return walletId
   */
  @javax.annotation.Nonnull
  public Integer getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nonnull Integer walletId) {
    this.walletId = walletId;
  }


  public PostPayinRequest userId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the User making the payin.  Note that for the &#x60;paymentMethodId&#x60; of &#x60;21&#x60; and &#x60;26&#x60;, you don&#39;t need to provide this value. It will be set automatically by Treezor. 
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }


  public PostPayinRequest paymentMethodId(@javax.annotation.Nonnull PaymentMethodIdEnum paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
    return this;
  }

  /**
   * | Id | Payment by | | ---| --- | | &#x60;20&#x60; | SEPA Credit Transfer (SCTR) – You can only create such payins in Sandbox, otherwise created automatically upon receiving a transfer. | | &#x60;21&#x60; | SEPA Direct Debit Core | | &#x60;23&#x60; | Full Hosted HTML Payment Form. If you use this &#x60;paymentMethodId&#x60;, the &#x60;paymentAcceptedUrl&#x60;, &#x60;paymentRefusedUrl&#x60;, &#x60;paymentWaitingUrl&#x60;, &#x60;paymentCanceledUrl&#x60; and &#x60;paymentExceptionUrl&#x60; fields are mandatory. CSS of the payment page can be customized. | | &#x60;24&#x60; | IFrame Payment Form. Please note that if you use this &#x60;paymentMethodId&#x60;, the &#x60;paymentAcceptedUrl&#x60;, &#x60;paymentRefusedUrl&#x60;, &#x60;paymentWaitingUrl&#x60;, &#x60;paymentCanceledUrl&#x60; and &#x60;paymentExceptionUrl&#x60; fields are mandatory. CSS of the payment page can be customized. | | &#x60;25&#x60; | Card topup - You cannot create a payin directly with this method id. The payin will be automatically created by Treezor. | | &#x60;26&#x60; | Check | | &#x60;27&#x60; | Instant Credit Transfers (SCTR Inst) – You cannot create a payin directly with this method id. The payin will be automatically created by Treezor. | 
   * @return paymentMethodId
   */
  @javax.annotation.Nonnull
  public PaymentMethodIdEnum getPaymentMethodId() {
    return paymentMethodId;
  }

  public void setPaymentMethodId(@javax.annotation.Nonnull PaymentMethodIdEnum paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
  }


  public PostPayinRequest paymentAcceptedUrl(@javax.annotation.Nullable String paymentAcceptedUrl) {
    this.paymentAcceptedUrl = paymentAcceptedUrl;
    return this;
  }

  /**
   * URL to which the cardholder is redirected if payment is successful. When using &#x60;paymentMethodId&#x60; &#x60;23&#x60; and &#x60;24&#x60; an HTTPS URL is mandatory. 
   * @return paymentAcceptedUrl
   */
  @javax.annotation.Nullable
  public String getPaymentAcceptedUrl() {
    return paymentAcceptedUrl;
  }

  public void setPaymentAcceptedUrl(@javax.annotation.Nullable String paymentAcceptedUrl) {
    this.paymentAcceptedUrl = paymentAcceptedUrl;
  }


  public PostPayinRequest paymentWaitingUrl(@javax.annotation.Nullable String paymentWaitingUrl) {
    this.paymentWaitingUrl = paymentWaitingUrl;
    return this;
  }

  /**
   * URL to which the cardholder is redirected to wait payment processing. When using &#x60;paymentMethodId&#x60; &#x60;23&#x60; and &#x60;24&#x60; an HTTPS URL is mandatory. 
   * @return paymentWaitingUrl
   */
  @javax.annotation.Nullable
  public String getPaymentWaitingUrl() {
    return paymentWaitingUrl;
  }

  public void setPaymentWaitingUrl(@javax.annotation.Nullable String paymentWaitingUrl) {
    this.paymentWaitingUrl = paymentWaitingUrl;
  }


  public PostPayinRequest paymentCanceledUrl(@javax.annotation.Nullable String paymentCanceledUrl) {
    this.paymentCanceledUrl = paymentCanceledUrl;
    return this;
  }

  /**
   * URL to which the cardholder is redirected if payment is canceled. When using &#x60;paymentMethodId&#x60; &#x60;23&#x60; and &#x60;24&#x60; an HTTPS URL is mandatory. 
   * @return paymentCanceledUrl
   */
  @javax.annotation.Nullable
  public String getPaymentCanceledUrl() {
    return paymentCanceledUrl;
  }

  public void setPaymentCanceledUrl(@javax.annotation.Nullable String paymentCanceledUrl) {
    this.paymentCanceledUrl = paymentCanceledUrl;
  }


  public PostPayinRequest paymentRefusedUrl(@javax.annotation.Nullable String paymentRefusedUrl) {
    this.paymentRefusedUrl = paymentRefusedUrl;
    return this;
  }

  /**
   * URL to which the cardholder is redirected if payment is refused. When using &#x60;paymentMethodId&#x60; &#x60;23&#x60; and &#x60;24&#x60; an HTTPS URL is mandatory. 
   * @return paymentRefusedUrl
   */
  @javax.annotation.Nullable
  public String getPaymentRefusedUrl() {
    return paymentRefusedUrl;
  }

  public void setPaymentRefusedUrl(@javax.annotation.Nullable String paymentRefusedUrl) {
    this.paymentRefusedUrl = paymentRefusedUrl;
  }


  public PostPayinRequest paymentExceptionUrl(@javax.annotation.Nullable String paymentExceptionUrl) {
    this.paymentExceptionUrl = paymentExceptionUrl;
    return this;
  }

  /**
   * URL to which the cardholder is redirected if the payment process raised an exception. When using &#x60;paymentMethodId&#x60; &#x60;23&#x60; and &#x60;24&#x60; an HTTPS URL is mandatory. 
   * @return paymentExceptionUrl
   */
  @javax.annotation.Nullable
  public String getPaymentExceptionUrl() {
    return paymentExceptionUrl;
  }

  public void setPaymentExceptionUrl(@javax.annotation.Nullable String paymentExceptionUrl) {
    this.paymentExceptionUrl = paymentExceptionUrl;
  }


  public PostPayinRequest amount(@javax.annotation.Nonnull Float amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payin.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Float getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull Float amount) {
    this.amount = amount;
  }


  public PostPayinRequest distributorFee(@javax.annotation.Nullable Float distributorFee) {
    this.distributorFee = distributorFee;
    return this;
  }

  /**
   * Distributor fee.
   * @return distributorFee
   */
  @javax.annotation.Nullable
  public Float getDistributorFee() {
    return distributorFee;
  }

  public void setDistributorFee(@javax.annotation.Nullable Float distributorFee) {
    this.distributorFee = distributorFee;
  }


  public PostPayinRequest currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency of the payin. Must be the same as the Wallet currency. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies). 
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public PostPayinRequest messageToUser(@javax.annotation.Nullable String messageToUser) {
    this.messageToUser = messageToUser;
    return this;
  }

  /**
   * Message to send to Wallet of the user. In the case of a SEPA Direct Debit Core payment method, this parameter will be the reconciliation information transmitted to the Debtor (i.e., Invoice number). In this case it can&#39;t exceed 140 characters.
   * @return messageToUser
   */
  @javax.annotation.Nullable
  public String getMessageToUser() {
    return messageToUser;
  }

  public void setMessageToUser(@javax.annotation.Nullable String messageToUser) {
    this.messageToUser = messageToUser;
  }


  public PostPayinRequest language(@javax.annotation.Nullable LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * Language for the third party interface.
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable LanguageEnum language) {
    this.language = language;
  }


  public PostPayinRequest createdIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
    return this;
  }

  /**
   * The IP address of the User.
   * @return createdIp
   */
  @javax.annotation.Nullable
  public String getCreatedIp() {
    return createdIp;
  }

  public void setCreatedIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
  }


  public PostPayinRequest payinDate(@javax.annotation.Nullable String payinDate) {
    this.payinDate = payinDate;
    return this;
  }

  /**
   * The date at which the SDD should be presented.   In the case of SDD Core, this parameter defaults to the third working day following the payin creation if left empty.   Format: YYYY-MM-DD, a [SEPA Open Banking Day](/guide/overview/glossary.html#sepa-open-banking-days) is expected (at least 2 days after the creation). 
   * @return payinDate
   */
  @javax.annotation.Nullable
  public String getPayinDate() {
    return payinDate;
  }

  public void setPayinDate(@javax.annotation.Nullable String payinDate) {
    this.payinDate = payinDate;
  }


  public PostPayinRequest mandateId(@javax.annotation.Nullable Integer mandateId) {
    this.mandateId = mandateId;
    return this;
  }

  /**
   * The unique identifier of the Mandate. This parameter is mandatory when performing a payin with method SDD Core.
   * @return mandateId
   */
  @javax.annotation.Nullable
  public Integer getMandateId() {
    return mandateId;
  }

  public void setMandateId(@javax.annotation.Nullable Integer mandateId) {
    this.mandateId = mandateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPayinRequest postPayinRequest = (PostPayinRequest) o;
    return Objects.equals(this.payinTag, postPayinRequest.payinTag) &&
        Objects.equals(this.walletId, postPayinRequest.walletId) &&
        Objects.equals(this.userId, postPayinRequest.userId) &&
        Objects.equals(this.paymentMethodId, postPayinRequest.paymentMethodId) &&
        Objects.equals(this.paymentAcceptedUrl, postPayinRequest.paymentAcceptedUrl) &&
        Objects.equals(this.paymentWaitingUrl, postPayinRequest.paymentWaitingUrl) &&
        Objects.equals(this.paymentCanceledUrl, postPayinRequest.paymentCanceledUrl) &&
        Objects.equals(this.paymentRefusedUrl, postPayinRequest.paymentRefusedUrl) &&
        Objects.equals(this.paymentExceptionUrl, postPayinRequest.paymentExceptionUrl) &&
        Objects.equals(this.amount, postPayinRequest.amount) &&
        Objects.equals(this.distributorFee, postPayinRequest.distributorFee) &&
        Objects.equals(this.currency, postPayinRequest.currency) &&
        Objects.equals(this.messageToUser, postPayinRequest.messageToUser) &&
        Objects.equals(this.language, postPayinRequest.language) &&
        Objects.equals(this.createdIp, postPayinRequest.createdIp) &&
        Objects.equals(this.payinDate, postPayinRequest.payinDate) &&
        Objects.equals(this.mandateId, postPayinRequest.mandateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payinTag, walletId, userId, paymentMethodId, paymentAcceptedUrl, paymentWaitingUrl, paymentCanceledUrl, paymentRefusedUrl, paymentExceptionUrl, amount, distributorFee, currency, messageToUser, language, createdIp, payinDate, mandateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPayinRequest {\n");
    sb.append("    payinTag: ").append(toIndentedString(payinTag)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    paymentAcceptedUrl: ").append(toIndentedString(paymentAcceptedUrl)).append("\n");
    sb.append("    paymentWaitingUrl: ").append(toIndentedString(paymentWaitingUrl)).append("\n");
    sb.append("    paymentCanceledUrl: ").append(toIndentedString(paymentCanceledUrl)).append("\n");
    sb.append("    paymentRefusedUrl: ").append(toIndentedString(paymentRefusedUrl)).append("\n");
    sb.append("    paymentExceptionUrl: ").append(toIndentedString(paymentExceptionUrl)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    distributorFee: ").append(toIndentedString(distributorFee)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    messageToUser: ").append(toIndentedString(messageToUser)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    createdIp: ").append(toIndentedString(createdIp)).append("\n");
    sb.append("    payinDate: ").append(toIndentedString(payinDate)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payinTag");
    openapiFields.add("walletId");
    openapiFields.add("userId");
    openapiFields.add("paymentMethodId");
    openapiFields.add("paymentAcceptedUrl");
    openapiFields.add("paymentWaitingUrl");
    openapiFields.add("paymentCanceledUrl");
    openapiFields.add("paymentRefusedUrl");
    openapiFields.add("paymentExceptionUrl");
    openapiFields.add("amount");
    openapiFields.add("distributorFee");
    openapiFields.add("currency");
    openapiFields.add("messageToUser");
    openapiFields.add("language");
    openapiFields.add("createdIp");
    openapiFields.add("payinDate");
    openapiFields.add("mandateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("walletId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("paymentMethodId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPayinRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPayinRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPayinRequest is not found in the empty JSON string", PostPayinRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPayinRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPayinRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPayinRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payinTag") != null && !jsonObj.get("payinTag").isJsonNull()) && !jsonObj.get("payinTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinTag").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      // validate the required field `paymentMethodId`
      PaymentMethodIdEnum.validateJsonElement(jsonObj.get("paymentMethodId"));
      if ((jsonObj.get("paymentAcceptedUrl") != null && !jsonObj.get("paymentAcceptedUrl").isJsonNull()) && !jsonObj.get("paymentAcceptedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAcceptedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAcceptedUrl").toString()));
      }
      if ((jsonObj.get("paymentWaitingUrl") != null && !jsonObj.get("paymentWaitingUrl").isJsonNull()) && !jsonObj.get("paymentWaitingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentWaitingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentWaitingUrl").toString()));
      }
      if ((jsonObj.get("paymentCanceledUrl") != null && !jsonObj.get("paymentCanceledUrl").isJsonNull()) && !jsonObj.get("paymentCanceledUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCanceledUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCanceledUrl").toString()));
      }
      if ((jsonObj.get("paymentRefusedUrl") != null && !jsonObj.get("paymentRefusedUrl").isJsonNull()) && !jsonObj.get("paymentRefusedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentRefusedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentRefusedUrl").toString()));
      }
      if ((jsonObj.get("paymentExceptionUrl") != null && !jsonObj.get("paymentExceptionUrl").isJsonNull()) && !jsonObj.get("paymentExceptionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentExceptionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentExceptionUrl").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("messageToUser") != null && !jsonObj.get("messageToUser").isJsonNull()) && !jsonObj.get("messageToUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageToUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageToUser").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("createdIp") != null && !jsonObj.get("createdIp").isJsonNull()) && !jsonObj.get("createdIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdIp").toString()));
      }
      if ((jsonObj.get("payinDate") != null && !jsonObj.get("payinDate").isJsonNull()) && !jsonObj.get("payinDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPayinRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPayinRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPayinRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPayinRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPayinRequest>() {
           @Override
           public void write(JsonWriter out, PostPayinRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPayinRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPayinRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPayinRequest
   * @throws IOException if the JSON string is invalid with respect to PostPayinRequest
   */
  public static PostPayinRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPayinRequest.class);
  }

  /**
   * Convert an instance of PostPayinRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

