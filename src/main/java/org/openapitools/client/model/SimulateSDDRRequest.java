/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimulateSDDRRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class SimulateSDDRRequest {
  public static final String SERIALIZED_NAME_DEBITOR_IBAN = "debitorIban";
  @SerializedName(SERIALIZED_NAME_DEBITOR_IBAN)
  @javax.annotation.Nullable
  private String debitorIban;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private Integer amount;

  /**
   * Gets or Sets typeSDD
   */
  @JsonAdapter(TypeSDDEnum.Adapter.class)
  public enum TypeSDDEnum {
    CORE("CORE"),
    
    B2_B("B2B");

    private String value;

    TypeSDDEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeSDDEnum fromValue(String value) {
      for (TypeSDDEnum b : TypeSDDEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeSDDEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeSDDEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeSDDEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeSDDEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeSDDEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_S_D_D = "typeSDD";
  @SerializedName(SERIALIZED_NAME_TYPE_S_D_D)
  @javax.annotation.Nullable
  private TypeSDDEnum typeSDD;

  /**
   * The type of error returned if the SDDR fails. Defaults to &#x60;rejected&#x60;. 
   */
  @JsonAdapter(TypeRejectEnum.Adapter.class)
  public enum TypeRejectEnum {
    REJECTED("rejected"),
    
    RETURNED("returned"),
    
    REFUNDED("refunded"),
    
    TODAY("today");

    private String value;

    TypeRejectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeRejectEnum fromValue(String value) {
      for (TypeRejectEnum b : TypeRejectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeRejectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeRejectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeRejectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeRejectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeRejectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_REJECT = "typeReject";
  @SerializedName(SERIALIZED_NAME_TYPE_REJECT)
  @javax.annotation.Nullable
  private TypeRejectEnum typeReject;

  public static final String SERIALIZED_NAME_SCI = "sci";
  @SerializedName(SERIALIZED_NAME_SCI)
  @javax.annotation.Nullable
  private String sci;

  public static final String SERIALIZED_NAME_NB_TXS = "nbTxs";
  @SerializedName(SERIALIZED_NAME_NB_TXS)
  @javax.annotation.Nullable
  private String nbTxs;

  public static final String SERIALIZED_NAME_MANDATE_ID = "mandateId";
  @SerializedName(SERIALIZED_NAME_MANDATE_ID)
  @javax.annotation.Nullable
  private Integer mandateId;

  /**
   * Gets or Sets executeAfterParse
   */
  @JsonAdapter(ExecuteAfterParseEnum.Adapter.class)
  public enum ExecuteAfterParseEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ExecuteAfterParseEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecuteAfterParseEnum fromValue(Integer value) {
      for (ExecuteAfterParseEnum b : ExecuteAfterParseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecuteAfterParseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecuteAfterParseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecuteAfterParseEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ExecuteAfterParseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ExecuteAfterParseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTE_AFTER_PARSE = "executeAfterParse";
  @SerializedName(SERIALIZED_NAME_EXECUTE_AFTER_PARSE)
  @javax.annotation.Nullable
  private ExecuteAfterParseEnum executeAfterParse;

  public SimulateSDDRRequest() {
  }

  public SimulateSDDRRequest debitorIban(@javax.annotation.Nullable String debitorIban) {
    this.debitorIban = debitorIban;
    return this;
  }

  /**
   * IBAN or Virtual IBAN of the debited Wallet.
   * @return debitorIban
   */
  @javax.annotation.Nullable
  public String getDebitorIban() {
    return debitorIban;
  }

  public void setDebitorIban(@javax.annotation.Nullable String debitorIban) {
    this.debitorIban = debitorIban;
  }


  public SimulateSDDRRequest amount(@javax.annotation.Nullable Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable Integer amount) {
    this.amount = amount;
  }


  public SimulateSDDRRequest typeSDD(@javax.annotation.Nullable TypeSDDEnum typeSDD) {
    this.typeSDD = typeSDD;
    return this;
  }

  /**
   * Get typeSDD
   * @return typeSDD
   */
  @javax.annotation.Nullable
  public TypeSDDEnum getTypeSDD() {
    return typeSDD;
  }

  public void setTypeSDD(@javax.annotation.Nullable TypeSDDEnum typeSDD) {
    this.typeSDD = typeSDD;
  }


  public SimulateSDDRRequest typeReject(@javax.annotation.Nullable TypeRejectEnum typeReject) {
    this.typeReject = typeReject;
    return this;
  }

  /**
   * The type of error returned if the SDDR fails. Defaults to &#x60;rejected&#x60;. 
   * @return typeReject
   */
  @javax.annotation.Nullable
  public TypeRejectEnum getTypeReject() {
    return typeReject;
  }

  public void setTypeReject(@javax.annotation.Nullable TypeRejectEnum typeReject) {
    this.typeReject = typeReject;
  }


  public SimulateSDDRRequest sci(@javax.annotation.Nullable String sci) {
    this.sci = sci;
    return this;
  }

  /**
   * The SEPA Credit Identifier of the user. In the case of simulation, this defaults to a random string.
   * @return sci
   */
  @javax.annotation.Nullable
  public String getSci() {
    return sci;
  }

  public void setSci(@javax.annotation.Nullable String sci) {
    this.sci = sci;
  }


  public SimulateSDDRRequest nbTxs(@javax.annotation.Nullable String nbTxs) {
    this.nbTxs = nbTxs;
    return this;
  }

  /**
   * The number of transactions for the SDD. Defaults to &#x60;1&#x60;. 
   * @return nbTxs
   */
  @javax.annotation.Nullable
  public String getNbTxs() {
    return nbTxs;
  }

  public void setNbTxs(@javax.annotation.Nullable String nbTxs) {
    this.nbTxs = nbTxs;
  }


  public SimulateSDDRRequest mandateId(@javax.annotation.Nullable Integer mandateId) {
    this.mandateId = mandateId;
    return this;
  }

  /**
   * The unique identifier of the Mandate
   * @return mandateId
   */
  @javax.annotation.Nullable
  public Integer getMandateId() {
    return mandateId;
  }

  public void setMandateId(@javax.annotation.Nullable Integer mandateId) {
    this.mandateId = mandateId;
  }


  public SimulateSDDRRequest executeAfterParse(@javax.annotation.Nullable ExecuteAfterParseEnum executeAfterParse) {
    this.executeAfterParse = executeAfterParse;
    return this;
  }

  /**
   * Get executeAfterParse
   * @return executeAfterParse
   */
  @javax.annotation.Nullable
  public ExecuteAfterParseEnum getExecuteAfterParse() {
    return executeAfterParse;
  }

  public void setExecuteAfterParse(@javax.annotation.Nullable ExecuteAfterParseEnum executeAfterParse) {
    this.executeAfterParse = executeAfterParse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateSDDRRequest simulateSDDRRequest = (SimulateSDDRRequest) o;
    return Objects.equals(this.debitorIban, simulateSDDRRequest.debitorIban) &&
        Objects.equals(this.amount, simulateSDDRRequest.amount) &&
        Objects.equals(this.typeSDD, simulateSDDRRequest.typeSDD) &&
        Objects.equals(this.typeReject, simulateSDDRRequest.typeReject) &&
        Objects.equals(this.sci, simulateSDDRRequest.sci) &&
        Objects.equals(this.nbTxs, simulateSDDRRequest.nbTxs) &&
        Objects.equals(this.mandateId, simulateSDDRRequest.mandateId) &&
        Objects.equals(this.executeAfterParse, simulateSDDRRequest.executeAfterParse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debitorIban, amount, typeSDD, typeReject, sci, nbTxs, mandateId, executeAfterParse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateSDDRRequest {\n");
    sb.append("    debitorIban: ").append(toIndentedString(debitorIban)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    typeSDD: ").append(toIndentedString(typeSDD)).append("\n");
    sb.append("    typeReject: ").append(toIndentedString(typeReject)).append("\n");
    sb.append("    sci: ").append(toIndentedString(sci)).append("\n");
    sb.append("    nbTxs: ").append(toIndentedString(nbTxs)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    executeAfterParse: ").append(toIndentedString(executeAfterParse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("debitorIban");
    openapiFields.add("amount");
    openapiFields.add("typeSDD");
    openapiFields.add("typeReject");
    openapiFields.add("sci");
    openapiFields.add("nbTxs");
    openapiFields.add("mandateId");
    openapiFields.add("executeAfterParse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulateSDDRRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulateSDDRRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulateSDDRRequest is not found in the empty JSON string", SimulateSDDRRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulateSDDRRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulateSDDRRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("debitorIban") != null && !jsonObj.get("debitorIban").isJsonNull()) && !jsonObj.get("debitorIban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitorIban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitorIban").toString()));
      }
      if ((jsonObj.get("typeSDD") != null && !jsonObj.get("typeSDD").isJsonNull()) && !jsonObj.get("typeSDD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeSDD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeSDD").toString()));
      }
      // validate the optional field `typeSDD`
      if (jsonObj.get("typeSDD") != null && !jsonObj.get("typeSDD").isJsonNull()) {
        TypeSDDEnum.validateJsonElement(jsonObj.get("typeSDD"));
      }
      if ((jsonObj.get("typeReject") != null && !jsonObj.get("typeReject").isJsonNull()) && !jsonObj.get("typeReject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeReject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeReject").toString()));
      }
      // validate the optional field `typeReject`
      if (jsonObj.get("typeReject") != null && !jsonObj.get("typeReject").isJsonNull()) {
        TypeRejectEnum.validateJsonElement(jsonObj.get("typeReject"));
      }
      if ((jsonObj.get("sci") != null && !jsonObj.get("sci").isJsonNull()) && !jsonObj.get("sci").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sci` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sci").toString()));
      }
      if ((jsonObj.get("nbTxs") != null && !jsonObj.get("nbTxs").isJsonNull()) && !jsonObj.get("nbTxs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nbTxs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nbTxs").toString()));
      }
      // validate the optional field `executeAfterParse`
      if (jsonObj.get("executeAfterParse") != null && !jsonObj.get("executeAfterParse").isJsonNull()) {
        ExecuteAfterParseEnum.validateJsonElement(jsonObj.get("executeAfterParse"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulateSDDRRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulateSDDRRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulateSDDRRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulateSDDRRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulateSDDRRequest>() {
           @Override
           public void write(JsonWriter out, SimulateSDDRRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulateSDDRRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulateSDDRRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulateSDDRRequest
   * @throws IOException if the JSON string is invalid with respect to SimulateSDDRRequest
   */
  public static SimulateSDDRRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulateSDDRRequest.class);
  }

  /**
   * Convert an instance of SimulateSDDRRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

