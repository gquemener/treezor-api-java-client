/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScaWalletObjectScaWalletsInnerMobileWallet;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScaWalletObjectScaWalletsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class ScaWalletObjectScaWalletsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATING("CREATING"),
    
    CREATED("CREATED"),
    
    INITIALIZING("INITIALIZING"),
    
    ACTIVE("ACTIVE"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  /**
   * Gets or Sets subStatus
   */
  @JsonAdapter(SubStatusEnum.Adapter.class)
  public enum SubStatusEnum {
    CREATING_IN_PROGRESS("CREATING_IN_PROGRESS"),
    
    CREATED_BLOCKED("CREATED_BLOCKED"),
    
    CREATED_READY("CREATED_READY"),
    
    INITIALIZING_MOBILE("INITIALIZING_MOBILE"),
    
    ACTIVATED_LOGGED_IN("ACTIVATED_LOGGED_IN"),
    
    ACTIVATED_LOGGED_OUT("ACTIVATED_LOGGED_OUT"),
    
    DELETED_BY_ISSUER("DELETED_BY_ISSUER"),
    
    DELETED_UNINSTALLED("DELETED_UNINSTALLED");

    private String value;

    SubStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubStatusEnum fromValue(String value) {
      for (SubStatusEnum b : SubStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SubStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_STATUS = "subStatus";
  @SerializedName(SERIALIZED_NAME_SUB_STATUS)
  @javax.annotation.Nullable
  private SubStatusEnum subStatus;

  /**
   * Gets or Sets passcodeStatus
   */
  @JsonAdapter(PasscodeStatusEnum.Adapter.class)
  public enum PasscodeStatusEnum {
    SET("SET"),
    
    NOT_SET("NOT_SET"),
    
    TO_BE_CHANGED("TO_BE_CHANGED"),
    
    NONE("NONE");

    private String value;

    PasscodeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasscodeStatusEnum fromValue(String value) {
      for (PasscodeStatusEnum b : PasscodeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PasscodeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasscodeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasscodeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasscodeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasscodeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSCODE_STATUS = "passcodeStatus";
  @SerializedName(SERIALIZED_NAME_PASSCODE_STATUS)
  @javax.annotation.Nullable
  private PasscodeStatusEnum passcodeStatus;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  @javax.annotation.Nullable
  private Boolean locked;

  /**
   * Gets or Sets lockReasons
   */
  @JsonAdapter(LockReasonsEnum.Adapter.class)
  public enum LockReasonsEnum {
    ISSUER("ISSUER"),
    
    LOST_DEVICE("LOST_DEVICE"),
    
    STOLEN_DEVICE("STOLEN_DEVICE"),
    
    FRAUDULENT_USE_SUSPECTED_BY_ISSUER("FRAUDULENT_USE_SUSPECTED_BY_ISSUER"),
    
    FRAUDULENT_USE_SUSPECTED_BY_CLIENT("FRAUDULENT_USE_SUSPECTED_BY_CLIENT"),
    
    TERMINATE_SERVICE("TERMINATE_SERVICE"),
    
    INCIDENT("INCIDENT");

    private String value;

    LockReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LockReasonsEnum fromValue(String value) {
      for (LockReasonsEnum b : LockReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LockReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LockReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LockReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LockReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LockReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCK_REASONS = "lockReasons";
  @SerializedName(SERIALIZED_NAME_LOCK_REASONS)
  @javax.annotation.Nullable
  private List<LockReasonsEnum> lockReasons;

  public static final String SERIALIZED_NAME_LOCK_MESSAGE = "lockMessage";
  @SerializedName(SERIALIZED_NAME_LOCK_MESSAGE)
  @javax.annotation.Nullable
  private String lockMessage;

  public static final String SERIALIZED_NAME_SETTINGS_PROFILE = "settingsProfile";
  @SerializedName(SERIALIZED_NAME_SETTINGS_PROFILE)
  @javax.annotation.Nullable
  private String settingsProfile;

  public static final String SERIALIZED_NAME_MOBILE_WALLET = "mobileWallet";
  @SerializedName(SERIALIZED_NAME_MOBILE_WALLET)
  @javax.annotation.Nullable
  private ScaWalletObjectScaWalletsInnerMobileWallet mobileWallet;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE = "activationCode";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE)
  @javax.annotation.Nullable
  private String activationCode;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DELETION_DATE = "deletionDate";
  @SerializedName(SERIALIZED_NAME_DELETION_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime deletionDate;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE_EXPIRY_DATE = "activationCodeExpiryDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE_EXPIRY_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime activationCodeExpiryDate;

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHODS = "authenticationMethods";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHODS)
  @javax.annotation.Nullable
  private List<Object> authenticationMethods;

  public static final String SERIALIZED_NAME_INVALID_ACTIVATION_ATTEMPTS = "invalidActivationAttempts";
  @SerializedName(SERIALIZED_NAME_INVALID_ACTIVATION_ATTEMPTS)
  @javax.annotation.Nullable
  private String invalidActivationAttempts;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_SCA_WALLET_TAG = "scaWalletTag";
  @SerializedName(SERIALIZED_NAME_SCA_WALLET_TAG)
  @javax.annotation.Nullable
  private String scaWalletTag;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "activationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  @javax.annotation.Nullable
  private String activationDate;

  public ScaWalletObjectScaWalletsInner() {
  }

  public ScaWalletObjectScaWalletsInner id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ScaWalletObjectScaWalletsInner status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public ScaWalletObjectScaWalletsInner subStatus(@javax.annotation.Nullable SubStatusEnum subStatus) {
    this.subStatus = subStatus;
    return this;
  }

  /**
   * Get subStatus
   * @return subStatus
   */
  @javax.annotation.Nullable
  public SubStatusEnum getSubStatus() {
    return subStatus;
  }

  public void setSubStatus(@javax.annotation.Nullable SubStatusEnum subStatus) {
    this.subStatus = subStatus;
  }


  public ScaWalletObjectScaWalletsInner passcodeStatus(@javax.annotation.Nullable PasscodeStatusEnum passcodeStatus) {
    this.passcodeStatus = passcodeStatus;
    return this;
  }

  /**
   * Get passcodeStatus
   * @return passcodeStatus
   */
  @javax.annotation.Nullable
  public PasscodeStatusEnum getPasscodeStatus() {
    return passcodeStatus;
  }

  public void setPasscodeStatus(@javax.annotation.Nullable PasscodeStatusEnum passcodeStatus) {
    this.passcodeStatus = passcodeStatus;
  }


  public ScaWalletObjectScaWalletsInner locked(@javax.annotation.Nullable Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(@javax.annotation.Nullable Boolean locked) {
    this.locked = locked;
  }


  public ScaWalletObjectScaWalletsInner lockReasons(@javax.annotation.Nullable List<LockReasonsEnum> lockReasons) {
    this.lockReasons = lockReasons;
    return this;
  }

  public ScaWalletObjectScaWalletsInner addLockReasonsItem(LockReasonsEnum lockReasonsItem) {
    if (this.lockReasons == null) {
      this.lockReasons = new ArrayList<>();
    }
    this.lockReasons.add(lockReasonsItem);
    return this;
  }

  /**
   * Get lockReasons
   * @return lockReasons
   */
  @javax.annotation.Nullable
  public List<LockReasonsEnum> getLockReasons() {
    return lockReasons;
  }

  public void setLockReasons(@javax.annotation.Nullable List<LockReasonsEnum> lockReasons) {
    this.lockReasons = lockReasons;
  }


  public ScaWalletObjectScaWalletsInner lockMessage(@javax.annotation.Nullable String lockMessage) {
    this.lockMessage = lockMessage;
    return this;
  }

  /**
   * Get lockMessage
   * @return lockMessage
   */
  @javax.annotation.Nullable
  public String getLockMessage() {
    return lockMessage;
  }

  public void setLockMessage(@javax.annotation.Nullable String lockMessage) {
    this.lockMessage = lockMessage;
  }


  public ScaWalletObjectScaWalletsInner settingsProfile(@javax.annotation.Nullable String settingsProfile) {
    this.settingsProfile = settingsProfile;
    return this;
  }

  /**
   * Get settingsProfile
   * @return settingsProfile
   */
  @javax.annotation.Nullable
  public String getSettingsProfile() {
    return settingsProfile;
  }

  public void setSettingsProfile(@javax.annotation.Nullable String settingsProfile) {
    this.settingsProfile = settingsProfile;
  }


  public ScaWalletObjectScaWalletsInner mobileWallet(@javax.annotation.Nullable ScaWalletObjectScaWalletsInnerMobileWallet mobileWallet) {
    this.mobileWallet = mobileWallet;
    return this;
  }

  /**
   * Get mobileWallet
   * @return mobileWallet
   */
  @javax.annotation.Nullable
  public ScaWalletObjectScaWalletsInnerMobileWallet getMobileWallet() {
    return mobileWallet;
  }

  public void setMobileWallet(@javax.annotation.Nullable ScaWalletObjectScaWalletsInnerMobileWallet mobileWallet) {
    this.mobileWallet = mobileWallet;
  }


  public ScaWalletObjectScaWalletsInner activationCode(@javax.annotation.Nullable String activationCode) {
    this.activationCode = activationCode;
    return this;
  }

  /**
   * Get activationCode
   * @return activationCode
   */
  @javax.annotation.Nullable
  public String getActivationCode() {
    return activationCode;
  }

  public void setActivationCode(@javax.annotation.Nullable String activationCode) {
    this.activationCode = activationCode;
  }


  public ScaWalletObjectScaWalletsInner creationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ScaWalletObjectScaWalletsInner deletionDate(@javax.annotation.Nullable OffsetDateTime deletionDate) {
    this.deletionDate = deletionDate;
    return this;
  }

  /**
   * Get deletionDate
   * @return deletionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionDate() {
    return deletionDate;
  }

  public void setDeletionDate(@javax.annotation.Nullable OffsetDateTime deletionDate) {
    this.deletionDate = deletionDate;
  }


  public ScaWalletObjectScaWalletsInner activationCodeExpiryDate(@javax.annotation.Nullable OffsetDateTime activationCodeExpiryDate) {
    this.activationCodeExpiryDate = activationCodeExpiryDate;
    return this;
  }

  /**
   * Get activationCodeExpiryDate
   * @return activationCodeExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivationCodeExpiryDate() {
    return activationCodeExpiryDate;
  }

  public void setActivationCodeExpiryDate(@javax.annotation.Nullable OffsetDateTime activationCodeExpiryDate) {
    this.activationCodeExpiryDate = activationCodeExpiryDate;
  }


  public ScaWalletObjectScaWalletsInner authenticationMethods(@javax.annotation.Nullable List<Object> authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
    return this;
  }

  public ScaWalletObjectScaWalletsInner addAuthenticationMethodsItem(Object authenticationMethodsItem) {
    if (this.authenticationMethods == null) {
      this.authenticationMethods = new ArrayList<>();
    }
    this.authenticationMethods.add(authenticationMethodsItem);
    return this;
  }

  /**
   * Get authenticationMethods
   * @return authenticationMethods
   */
  @javax.annotation.Nullable
  public List<Object> getAuthenticationMethods() {
    return authenticationMethods;
  }

  public void setAuthenticationMethods(@javax.annotation.Nullable List<Object> authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
  }


  public ScaWalletObjectScaWalletsInner invalidActivationAttempts(@javax.annotation.Nullable String invalidActivationAttempts) {
    this.invalidActivationAttempts = invalidActivationAttempts;
    return this;
  }

  /**
   * Get invalidActivationAttempts
   * @return invalidActivationAttempts
   */
  @javax.annotation.Nullable
  public String getInvalidActivationAttempts() {
    return invalidActivationAttempts;
  }

  public void setInvalidActivationAttempts(@javax.annotation.Nullable String invalidActivationAttempts) {
    this.invalidActivationAttempts = invalidActivationAttempts;
  }


  public ScaWalletObjectScaWalletsInner userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public ScaWalletObjectScaWalletsInner scaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = scaWalletTag;
    return this;
  }

  /**
   * Get scaWalletTag
   * @return scaWalletTag
   */
  @javax.annotation.Nullable
  public String getScaWalletTag() {
    return scaWalletTag;
  }

  public void setScaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = scaWalletTag;
  }


  public ScaWalletObjectScaWalletsInner clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public ScaWalletObjectScaWalletsInner activationDate(@javax.annotation.Nullable String activationDate) {
    this.activationDate = activationDate;
    return this;
  }

  /**
   * Get activationDate
   * @return activationDate
   */
  @javax.annotation.Nullable
  public String getActivationDate() {
    return activationDate;
  }

  public void setActivationDate(@javax.annotation.Nullable String activationDate) {
    this.activationDate = activationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaWalletObjectScaWalletsInner scaWalletObjectScaWalletsInner = (ScaWalletObjectScaWalletsInner) o;
    return Objects.equals(this.id, scaWalletObjectScaWalletsInner.id) &&
        Objects.equals(this.status, scaWalletObjectScaWalletsInner.status) &&
        Objects.equals(this.subStatus, scaWalletObjectScaWalletsInner.subStatus) &&
        Objects.equals(this.passcodeStatus, scaWalletObjectScaWalletsInner.passcodeStatus) &&
        Objects.equals(this.locked, scaWalletObjectScaWalletsInner.locked) &&
        Objects.equals(this.lockReasons, scaWalletObjectScaWalletsInner.lockReasons) &&
        Objects.equals(this.lockMessage, scaWalletObjectScaWalletsInner.lockMessage) &&
        Objects.equals(this.settingsProfile, scaWalletObjectScaWalletsInner.settingsProfile) &&
        Objects.equals(this.mobileWallet, scaWalletObjectScaWalletsInner.mobileWallet) &&
        Objects.equals(this.activationCode, scaWalletObjectScaWalletsInner.activationCode) &&
        Objects.equals(this.creationDate, scaWalletObjectScaWalletsInner.creationDate) &&
        Objects.equals(this.deletionDate, scaWalletObjectScaWalletsInner.deletionDate) &&
        Objects.equals(this.activationCodeExpiryDate, scaWalletObjectScaWalletsInner.activationCodeExpiryDate) &&
        Objects.equals(this.authenticationMethods, scaWalletObjectScaWalletsInner.authenticationMethods) &&
        Objects.equals(this.invalidActivationAttempts, scaWalletObjectScaWalletsInner.invalidActivationAttempts) &&
        Objects.equals(this.userId, scaWalletObjectScaWalletsInner.userId) &&
        Objects.equals(this.scaWalletTag, scaWalletObjectScaWalletsInner.scaWalletTag) &&
        Objects.equals(this.clientId, scaWalletObjectScaWalletsInner.clientId) &&
        Objects.equals(this.activationDate, scaWalletObjectScaWalletsInner.activationDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, subStatus, passcodeStatus, locked, lockReasons, lockMessage, settingsProfile, mobileWallet, activationCode, creationDate, deletionDate, activationCodeExpiryDate, authenticationMethods, invalidActivationAttempts, userId, scaWalletTag, clientId, activationDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaWalletObjectScaWalletsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subStatus: ").append(toIndentedString(subStatus)).append("\n");
    sb.append("    passcodeStatus: ").append(toIndentedString(passcodeStatus)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockReasons: ").append(toIndentedString(lockReasons)).append("\n");
    sb.append("    lockMessage: ").append(toIndentedString(lockMessage)).append("\n");
    sb.append("    settingsProfile: ").append(toIndentedString(settingsProfile)).append("\n");
    sb.append("    mobileWallet: ").append(toIndentedString(mobileWallet)).append("\n");
    sb.append("    activationCode: ").append(toIndentedString(activationCode)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    activationCodeExpiryDate: ").append(toIndentedString(activationCodeExpiryDate)).append("\n");
    sb.append("    authenticationMethods: ").append(toIndentedString(authenticationMethods)).append("\n");
    sb.append("    invalidActivationAttempts: ").append(toIndentedString(invalidActivationAttempts)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    scaWalletTag: ").append(toIndentedString(scaWalletTag)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("subStatus");
    openapiFields.add("passcodeStatus");
    openapiFields.add("locked");
    openapiFields.add("lockReasons");
    openapiFields.add("lockMessage");
    openapiFields.add("settingsProfile");
    openapiFields.add("mobileWallet");
    openapiFields.add("activationCode");
    openapiFields.add("creationDate");
    openapiFields.add("deletionDate");
    openapiFields.add("activationCodeExpiryDate");
    openapiFields.add("authenticationMethods");
    openapiFields.add("invalidActivationAttempts");
    openapiFields.add("userId");
    openapiFields.add("scaWalletTag");
    openapiFields.add("clientId");
    openapiFields.add("activationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScaWalletObjectScaWalletsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScaWalletObjectScaWalletsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScaWalletObjectScaWalletsInner is not found in the empty JSON string", ScaWalletObjectScaWalletsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScaWalletObjectScaWalletsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScaWalletObjectScaWalletsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subStatus") != null && !jsonObj.get("subStatus").isJsonNull()) && !jsonObj.get("subStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subStatus").toString()));
      }
      // validate the optional field `subStatus`
      if (jsonObj.get("subStatus") != null && !jsonObj.get("subStatus").isJsonNull()) {
        SubStatusEnum.validateJsonElement(jsonObj.get("subStatus"));
      }
      if ((jsonObj.get("passcodeStatus") != null && !jsonObj.get("passcodeStatus").isJsonNull()) && !jsonObj.get("passcodeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passcodeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passcodeStatus").toString()));
      }
      // validate the optional field `passcodeStatus`
      if (jsonObj.get("passcodeStatus") != null && !jsonObj.get("passcodeStatus").isJsonNull()) {
        PasscodeStatusEnum.validateJsonElement(jsonObj.get("passcodeStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lockReasons") != null && !jsonObj.get("lockReasons").isJsonNull() && !jsonObj.get("lockReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockReasons` to be an array in the JSON string but got `%s`", jsonObj.get("lockReasons").toString()));
      }
      if ((jsonObj.get("lockMessage") != null && !jsonObj.get("lockMessage").isJsonNull()) && !jsonObj.get("lockMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockMessage").toString()));
      }
      if ((jsonObj.get("settingsProfile") != null && !jsonObj.get("settingsProfile").isJsonNull()) && !jsonObj.get("settingsProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settingsProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settingsProfile").toString()));
      }
      // validate the optional field `mobileWallet`
      if (jsonObj.get("mobileWallet") != null && !jsonObj.get("mobileWallet").isJsonNull()) {
        ScaWalletObjectScaWalletsInnerMobileWallet.validateJsonElement(jsonObj.get("mobileWallet"));
      }
      if ((jsonObj.get("activationCode") != null && !jsonObj.get("activationCode").isJsonNull()) && !jsonObj.get("activationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authenticationMethods") != null && !jsonObj.get("authenticationMethods").isJsonNull() && !jsonObj.get("authenticationMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authenticationMethods").toString()));
      }
      if ((jsonObj.get("invalidActivationAttempts") != null && !jsonObj.get("invalidActivationAttempts").isJsonNull()) && !jsonObj.get("invalidActivationAttempts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidActivationAttempts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalidActivationAttempts").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("scaWalletTag") != null && !jsonObj.get("scaWalletTag").isJsonNull()) && !jsonObj.get("scaWalletTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaWalletTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaWalletTag").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("activationDate") != null && !jsonObj.get("activationDate").isJsonNull()) && !jsonObj.get("activationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScaWalletObjectScaWalletsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScaWalletObjectScaWalletsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScaWalletObjectScaWalletsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScaWalletObjectScaWalletsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ScaWalletObjectScaWalletsInner>() {
           @Override
           public void write(JsonWriter out, ScaWalletObjectScaWalletsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScaWalletObjectScaWalletsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScaWalletObjectScaWalletsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScaWalletObjectScaWalletsInner
   * @throws IOException if the JSON string is invalid with respect to ScaWalletObjectScaWalletsInner
   */
  public static ScaWalletObjectScaWalletsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScaWalletObjectScaWalletsInner.class);
  }

  /**
   * Convert an instance of ScaWalletObjectScaWalletsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

