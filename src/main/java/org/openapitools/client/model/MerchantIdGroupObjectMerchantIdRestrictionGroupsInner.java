/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MerchantIdGroupObjectMerchantIdRestrictionGroupsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class MerchantIdGroupObjectMerchantIdRestrictionGroupsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_IS_WHITELIST = "isWhitelist";
  @SerializedName(SERIALIZED_NAME_IS_WHITELIST)
  @javax.annotation.Nullable
  private Boolean isWhitelist;

  public static final String SERIALIZED_NAME_MERCHANTS = "merchants";
  @SerializedName(SERIALIZED_NAME_MERCHANTS)
  @javax.annotation.Nullable
  private List<String> merchants = new ArrayList<>();

  /**
   * The status of the Merchant ID restriction group.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    CANCELED("CANCELED"),
    
    VALIDATED("VALIDATED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private String startDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private String createdDate;

  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner() {
  }

  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the Merchant ID restriction group.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the Merchant ID restriction group.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner isWhitelist(@javax.annotation.Nullable Boolean isWhitelist) {
    this.isWhitelist = isWhitelist;
    return this;
  }

  /**
   * Indicates the kind of restriction:  * &#x60;true&#x60; (default) – Allows only a specified list of merchant ids(whitelist) * &#x60;false&#x60; – Allows all merchant ids except the specified list (blacklist) 
   * @return isWhitelist
   */
  @javax.annotation.Nullable
  public Boolean getIsWhitelist() {
    return isWhitelist;
  }

  public void setIsWhitelist(@javax.annotation.Nullable Boolean isWhitelist) {
    this.isWhitelist = isWhitelist;
  }


  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner merchants(@javax.annotation.Nullable List<String> merchants) {
    this.merchants = merchants;
    return this;
  }

  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner addMerchantsItem(String merchantsItem) {
    if (this.merchants == null) {
      this.merchants = new ArrayList<>();
    }
    this.merchants.add(merchantsItem);
    return this;
  }

  /**
   * List of Merchant IDs (each item is a string).
   * @return merchants
   */
  @javax.annotation.Nullable
  public List<String> getMerchants() {
    return merchants;
  }

  public void setMerchants(@javax.annotation.Nullable List<String> merchants) {
    this.merchants = merchants;
  }


  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the Merchant ID restriction group.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner startDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS 
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
  }


  public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner createdDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS 
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantIdGroupObjectMerchantIdRestrictionGroupsInner merchantIdGroupObjectMerchantIdRestrictionGroupsInner = (MerchantIdGroupObjectMerchantIdRestrictionGroupsInner) o;
    return Objects.equals(this.id, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.id) &&
        Objects.equals(this.name, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.name) &&
        Objects.equals(this.isWhitelist, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.isWhitelist) &&
        Objects.equals(this.merchants, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.merchants) &&
        Objects.equals(this.status, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.status) &&
        Objects.equals(this.startDate, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.startDate) &&
        Objects.equals(this.createdDate, merchantIdGroupObjectMerchantIdRestrictionGroupsInner.createdDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, isWhitelist, merchants, status, startDate, createdDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantIdGroupObjectMerchantIdRestrictionGroupsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isWhitelist: ").append(toIndentedString(isWhitelist)).append("\n");
    sb.append("    merchants: ").append(toIndentedString(merchants)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("isWhitelist");
    openapiFields.add("merchants");
    openapiFields.add("status");
    openapiFields.add("startDate");
    openapiFields.add("createdDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantIdGroupObjectMerchantIdRestrictionGroupsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantIdGroupObjectMerchantIdRestrictionGroupsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantIdGroupObjectMerchantIdRestrictionGroupsInner is not found in the empty JSON string", MerchantIdGroupObjectMerchantIdRestrictionGroupsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantIdGroupObjectMerchantIdRestrictionGroupsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantIdGroupObjectMerchantIdRestrictionGroupsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("merchants") != null && !jsonObj.get("merchants").isJsonNull() && !jsonObj.get("merchants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchants` to be an array in the JSON string but got `%s`", jsonObj.get("merchants").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantIdGroupObjectMerchantIdRestrictionGroupsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantIdGroupObjectMerchantIdRestrictionGroupsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantIdGroupObjectMerchantIdRestrictionGroupsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantIdGroupObjectMerchantIdRestrictionGroupsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantIdGroupObjectMerchantIdRestrictionGroupsInner>() {
           @Override
           public void write(JsonWriter out, MerchantIdGroupObjectMerchantIdRestrictionGroupsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantIdGroupObjectMerchantIdRestrictionGroupsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantIdGroupObjectMerchantIdRestrictionGroupsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantIdGroupObjectMerchantIdRestrictionGroupsInner
   * @throws IOException if the JSON string is invalid with respect to MerchantIdGroupObjectMerchantIdRestrictionGroupsInner
   */
  public static MerchantIdGroupObjectMerchantIdRestrictionGroupsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantIdGroupObjectMerchantIdRestrictionGroupsInner.class);
  }

  /**
   * Convert an instance of MerchantIdGroupObjectMerchantIdRestrictionGroupsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

