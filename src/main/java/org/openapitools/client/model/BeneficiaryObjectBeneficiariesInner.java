/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BeneficiaryObjectBeneficiariesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class BeneficiaryObjectBeneficiariesInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private Integer userId;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  @javax.annotation.Nullable
  private String nickName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  @javax.annotation.Nullable
  private String iban;

  public static final String SERIALIZED_NAME_BIC = "bic";
  @SerializedName(SERIALIZED_NAME_BIC)
  @javax.annotation.Nullable
  private String bic;

  public static final String SERIALIZED_NAME_SEPA_CREDITOR_IDENTIFIER = "sepaCreditorIdentifier";
  @SerializedName(SERIALIZED_NAME_SEPA_CREDITOR_IDENTIFIER)
  @javax.annotation.Nullable
  private String sepaCreditorIdentifier;

  public static final String SERIALIZED_NAME_SDD_B2B_WHITELIST = "sddB2bWhitelist";
  @SerializedName(SERIALIZED_NAME_SDD_B2B_WHITELIST)
  @javax.annotation.Nullable
  private List<BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner> sddB2bWhitelist = new ArrayList<>();

  public static final String SERIALIZED_NAME_SDD_CORE_BLACKLIST = "sddCoreBlacklist";
  @SerializedName(SERIALIZED_NAME_SDD_CORE_BLACKLIST)
  @javax.annotation.Nullable
  private List<String> sddCoreBlacklist = new ArrayList<>();

  public static final String SERIALIZED_NAME_USABLE_FOR_SCT = "usableForSct";
  @SerializedName(SERIALIZED_NAME_USABLE_FOR_SCT)
  @javax.annotation.Nullable
  private Boolean usableForSct = false;

  public static final String SERIALIZED_NAME_SDD_CORE_KNOWN_UNIQUE_MANDATE_REFERENCE = "sddCoreKnownUniqueMandateReference";
  @SerializedName(SERIALIZED_NAME_SDD_CORE_KNOWN_UNIQUE_MANDATE_REFERENCE)
  @javax.annotation.Nullable
  private List<String> sddCoreKnownUniqueMandateReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isActive;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private String createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private String modifiedDate;

  public BeneficiaryObjectBeneficiariesInner() {
  }

  public BeneficiaryObjectBeneficiariesInner id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the Beneficiary. 
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public BeneficiaryObjectBeneficiariesInner tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Custom data that could be used by caller to search the instance. 
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public BeneficiaryObjectBeneficiariesInner userId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the User to which the Beneficiary is attached.
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
  }


  public BeneficiaryObjectBeneficiariesInner nickName(@javax.annotation.Nullable String nickName) {
    this.nickName = nickName;
    return this;
  }

  /**
   * Name choosen by end user to easily recognize the beneficiary. 
   * @return nickName
   */
  @javax.annotation.Nullable
  public String getNickName() {
    return nickName;
  }

  public void setNickName(@javax.annotation.Nullable String nickName) {
    this.nickName = nickName;
  }


  public BeneficiaryObjectBeneficiariesInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Beneficiary name, linked to bank account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public BeneficiaryObjectBeneficiariesInner address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * Beneficiary address, linked to bank account.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public BeneficiaryObjectBeneficiariesInner iban(@javax.annotation.Nullable String iban) {
    this.iban = iban;
    return this;
  }

  /**
   * Beneficiary International Bank Account Number.
   * @return iban
   */
  @javax.annotation.Nullable
  public String getIban() {
    return iban;
  }

  public void setIban(@javax.annotation.Nullable String iban) {
    this.iban = iban;
  }


  public BeneficiaryObjectBeneficiariesInner bic(@javax.annotation.Nullable String bic) {
    this.bic = bic;
    return this;
  }

  /**
   * Beneficiary Bank Identifier Code.
   * @return bic
   */
  @javax.annotation.Nullable
  public String getBic() {
    return bic;
  }

  public void setBic(@javax.annotation.Nullable String bic) {
    this.bic = bic;
  }


  public BeneficiaryObjectBeneficiariesInner sepaCreditorIdentifier(@javax.annotation.Nullable String sepaCreditorIdentifier) {
    this.sepaCreditorIdentifier = sepaCreditorIdentifier;
    return this;
  }

  /**
   * Beneficiary SEPA Creditor Identifier. Mandatory to validate B2B incoming direct debit, useless otherwise. Between 8 and 35 h. 
   * @return sepaCreditorIdentifier
   */
  @javax.annotation.Nullable
  public String getSepaCreditorIdentifier() {
    return sepaCreditorIdentifier;
  }

  public void setSepaCreditorIdentifier(@javax.annotation.Nullable String sepaCreditorIdentifier) {
    this.sepaCreditorIdentifier = sepaCreditorIdentifier;
  }


  public BeneficiaryObjectBeneficiariesInner sddB2bWhitelist(@javax.annotation.Nullable List<BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner> sddB2bWhitelist) {
    this.sddB2bWhitelist = sddB2bWhitelist;
    return this;
  }

  public BeneficiaryObjectBeneficiariesInner addSddB2bWhitelistItem(BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner sddB2bWhitelistItem) {
    if (this.sddB2bWhitelist == null) {
      this.sddB2bWhitelist = new ArrayList<>();
    }
    this.sddB2bWhitelist.add(sddB2bWhitelistItem);
    return this;
  }

  /**
   * Each unique mandate reference, with its frequency type, must be explicitely allowed when doing B2B Direct Debit. Furthermore, a mandate not used during more than 36 months will be automatically rejected even if in the white list. 
   * @return sddB2bWhitelist
   */
  @javax.annotation.Nullable
  public List<BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner> getSddB2bWhitelist() {
    return sddB2bWhitelist;
  }

  public void setSddB2bWhitelist(@javax.annotation.Nullable List<BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner> sddB2bWhitelist) {
    this.sddB2bWhitelist = sddB2bWhitelist;
  }


  public BeneficiaryObjectBeneficiariesInner sddCoreBlacklist(@javax.annotation.Nullable List<String> sddCoreBlacklist) {
    this.sddCoreBlacklist = sddCoreBlacklist;
    return this;
  }

  public BeneficiaryObjectBeneficiariesInner addSddCoreBlacklistItem(String sddCoreBlacklistItem) {
    if (this.sddCoreBlacklist == null) {
      this.sddCoreBlacklist = new ArrayList<>();
    }
    this.sddCoreBlacklist.add(sddCoreBlacklistItem);
    return this;
  }

  /**
   * Core Direct Debit are accepted by default. If a Core mandate is to be refused on reception, it has to be added to this list. If wild char * (star) is used instead of a UMR, all Direct Debit from this beneficiary will be refused. Note that the mandate ref entered is case sensitive. 
   * @return sddCoreBlacklist
   */
  @javax.annotation.Nullable
  public List<String> getSddCoreBlacklist() {
    return sddCoreBlacklist;
  }

  public void setSddCoreBlacklist(@javax.annotation.Nullable List<String> sddCoreBlacklist) {
    this.sddCoreBlacklist = sddCoreBlacklist;
  }


  public BeneficiaryObjectBeneficiariesInner usableForSct(@javax.annotation.Nullable Boolean usableForSct) {
    this.usableForSct = usableForSct;
    return this;
  }

  /**
   * Indicated if the beneficiary can be used for SEPA Credit Transfer. This field is a conveniant way to filter all beneficiaries for a user that would like to do a Credit Transfer. Indeed, beneficaries are created automatically when receiving a Core Direct Debit and therefor by looking at the list you won&#39;t be able to idnetify which beneficary to use on SCT. 
   * @return usableForSct
   */
  @javax.annotation.Nullable
  public Boolean getUsableForSct() {
    return usableForSct;
  }

  public void setUsableForSct(@javax.annotation.Nullable Boolean usableForSct) {
    this.usableForSct = usableForSct;
  }


  public BeneficiaryObjectBeneficiariesInner sddCoreKnownUniqueMandateReference(@javax.annotation.Nullable List<String> sddCoreKnownUniqueMandateReference) {
    this.sddCoreKnownUniqueMandateReference = sddCoreKnownUniqueMandateReference;
    return this;
  }

  public BeneficiaryObjectBeneficiariesInner addSddCoreKnownUniqueMandateReferenceItem(String sddCoreKnownUniqueMandateReferenceItem) {
    if (this.sddCoreKnownUniqueMandateReference == null) {
      this.sddCoreKnownUniqueMandateReference = new ArrayList<>();
    }
    this.sddCoreKnownUniqueMandateReference.add(sddCoreKnownUniqueMandateReferenceItem);
    return this;
  }

  /**
   * Get sddCoreKnownUniqueMandateReference
   * @return sddCoreKnownUniqueMandateReference
   */
  @javax.annotation.Nullable
  public List<String> getSddCoreKnownUniqueMandateReference() {
    return sddCoreKnownUniqueMandateReference;
  }

  public void setSddCoreKnownUniqueMandateReference(@javax.annotation.Nullable List<String> sddCoreKnownUniqueMandateReference) {
    this.sddCoreKnownUniqueMandateReference = sddCoreKnownUniqueMandateReference;
  }


  public BeneficiaryObjectBeneficiariesInner isActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Indicates whether or not the Beneficiary is active. This value is set to &#x60;true&#x60; by default.
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
  }


  public BeneficiaryObjectBeneficiariesInner createdDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Creation date.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
  }


  public BeneficiaryObjectBeneficiariesInner modifiedDate(@javax.annotation.Nullable String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Update date.
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeneficiaryObjectBeneficiariesInner beneficiaryObjectBeneficiariesInner = (BeneficiaryObjectBeneficiariesInner) o;
    return Objects.equals(this.id, beneficiaryObjectBeneficiariesInner.id) &&
        Objects.equals(this.tag, beneficiaryObjectBeneficiariesInner.tag) &&
        Objects.equals(this.userId, beneficiaryObjectBeneficiariesInner.userId) &&
        Objects.equals(this.nickName, beneficiaryObjectBeneficiariesInner.nickName) &&
        Objects.equals(this.name, beneficiaryObjectBeneficiariesInner.name) &&
        Objects.equals(this.address, beneficiaryObjectBeneficiariesInner.address) &&
        Objects.equals(this.iban, beneficiaryObjectBeneficiariesInner.iban) &&
        Objects.equals(this.bic, beneficiaryObjectBeneficiariesInner.bic) &&
        Objects.equals(this.sepaCreditorIdentifier, beneficiaryObjectBeneficiariesInner.sepaCreditorIdentifier) &&
        Objects.equals(this.sddB2bWhitelist, beneficiaryObjectBeneficiariesInner.sddB2bWhitelist) &&
        Objects.equals(this.sddCoreBlacklist, beneficiaryObjectBeneficiariesInner.sddCoreBlacklist) &&
        Objects.equals(this.usableForSct, beneficiaryObjectBeneficiariesInner.usableForSct) &&
        Objects.equals(this.sddCoreKnownUniqueMandateReference, beneficiaryObjectBeneficiariesInner.sddCoreKnownUniqueMandateReference) &&
        Objects.equals(this.isActive, beneficiaryObjectBeneficiariesInner.isActive) &&
        Objects.equals(this.createdDate, beneficiaryObjectBeneficiariesInner.createdDate) &&
        Objects.equals(this.modifiedDate, beneficiaryObjectBeneficiariesInner.modifiedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tag, userId, nickName, name, address, iban, bic, sepaCreditorIdentifier, sddB2bWhitelist, sddCoreBlacklist, usableForSct, sddCoreKnownUniqueMandateReference, isActive, createdDate, modifiedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeneficiaryObjectBeneficiariesInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
    sb.append("    sepaCreditorIdentifier: ").append(toIndentedString(sepaCreditorIdentifier)).append("\n");
    sb.append("    sddB2bWhitelist: ").append(toIndentedString(sddB2bWhitelist)).append("\n");
    sb.append("    sddCoreBlacklist: ").append(toIndentedString(sddCoreBlacklist)).append("\n");
    sb.append("    usableForSct: ").append(toIndentedString(usableForSct)).append("\n");
    sb.append("    sddCoreKnownUniqueMandateReference: ").append(toIndentedString(sddCoreKnownUniqueMandateReference)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("tag");
    openapiFields.add("userId");
    openapiFields.add("nickName");
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("iban");
    openapiFields.add("bic");
    openapiFields.add("sepaCreditorIdentifier");
    openapiFields.add("sddB2bWhitelist");
    openapiFields.add("sddCoreBlacklist");
    openapiFields.add("usableForSct");
    openapiFields.add("sddCoreKnownUniqueMandateReference");
    openapiFields.add("isActive");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BeneficiaryObjectBeneficiariesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BeneficiaryObjectBeneficiariesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BeneficiaryObjectBeneficiariesInner is not found in the empty JSON string", BeneficiaryObjectBeneficiariesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BeneficiaryObjectBeneficiariesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BeneficiaryObjectBeneficiariesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonNull()) && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("bic") != null && !jsonObj.get("bic").isJsonNull()) && !jsonObj.get("bic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bic").toString()));
      }
      if ((jsonObj.get("sepaCreditorIdentifier") != null && !jsonObj.get("sepaCreditorIdentifier").isJsonNull()) && !jsonObj.get("sepaCreditorIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sepaCreditorIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sepaCreditorIdentifier").toString()));
      }
      if (jsonObj.get("sddB2bWhitelist") != null && !jsonObj.get("sddB2bWhitelist").isJsonNull()) {
        JsonArray jsonArraysddB2bWhitelist = jsonObj.getAsJsonArray("sddB2bWhitelist");
        if (jsonArraysddB2bWhitelist != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sddB2bWhitelist").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sddB2bWhitelist` to be an array in the JSON string but got `%s`", jsonObj.get("sddB2bWhitelist").toString()));
          }

          // validate the optional field `sddB2bWhitelist` (array)
          for (int i = 0; i < jsonArraysddB2bWhitelist.size(); i++) {
            BeneficiaryObjectBeneficiariesInnerSddB2bWhitelistInner.validateJsonElement(jsonArraysddB2bWhitelist.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sddCoreBlacklist") != null && !jsonObj.get("sddCoreBlacklist").isJsonNull() && !jsonObj.get("sddCoreBlacklist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sddCoreBlacklist` to be an array in the JSON string but got `%s`", jsonObj.get("sddCoreBlacklist").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sddCoreKnownUniqueMandateReference") != null && !jsonObj.get("sddCoreKnownUniqueMandateReference").isJsonNull() && !jsonObj.get("sddCoreKnownUniqueMandateReference").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sddCoreKnownUniqueMandateReference` to be an array in the JSON string but got `%s`", jsonObj.get("sddCoreKnownUniqueMandateReference").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BeneficiaryObjectBeneficiariesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BeneficiaryObjectBeneficiariesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BeneficiaryObjectBeneficiariesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BeneficiaryObjectBeneficiariesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BeneficiaryObjectBeneficiariesInner>() {
           @Override
           public void write(JsonWriter out, BeneficiaryObjectBeneficiariesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BeneficiaryObjectBeneficiariesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BeneficiaryObjectBeneficiariesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BeneficiaryObjectBeneficiariesInner
   * @throws IOException if the JSON string is invalid with respect to BeneficiaryObjectBeneficiariesInner
   */
  public static BeneficiaryObjectBeneficiariesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BeneficiaryObjectBeneficiariesInner.class);
  }

  /**
   * Convert an instance of BeneficiaryObjectBeneficiariesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

