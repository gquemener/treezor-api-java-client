/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class Payin {
  public static final String SERIALIZED_NAME_MESSAGE_TO_USER = "messageToUser";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_USER)
  @javax.annotation.Nullable
  private String messageToUser;

  public static final String SERIALIZED_NAME_CODE_STATUS = "codeStatus";
  @SerializedName(SERIALIZED_NAME_CODE_STATUS)
  @javax.annotation.Nullable
  private String codeStatus;

  public static final String SERIALIZED_NAME_INFORMATION_STATUS = "informationStatus";
  @SerializedName(SERIALIZED_NAME_INFORMATION_STATUS)
  @javax.annotation.Nullable
  private String informationStatus;

  public static final String SERIALIZED_NAME_PAYIN_TAG = "payinTag";
  @SerializedName(SERIALIZED_NAME_PAYIN_TAG)
  @javax.annotation.Nullable
  private String payinTag;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  @javax.annotation.Nullable
  private List<String> additionalData;

  public static final String SERIALIZED_NAME_IBAN_FULLNAME = "ibanFullname";
  @SerializedName(SERIALIZED_NAME_IBAN_FULLNAME)
  @javax.annotation.Nullable
  private String ibanFullname;

  public static final String SERIALIZED_NAME_DBTR_I_B_A_N = "dbtrIBAN";
  @SerializedName(SERIALIZED_NAME_DBTR_I_B_A_N)
  @javax.annotation.Nullable
  private String dbtrIBAN;

  public static final String SERIALIZED_NAME_MANDATE_ID = "mandateId";
  @SerializedName(SERIALIZED_NAME_MANDATE_ID)
  @javax.annotation.Nullable
  private String mandateId;

  public static final String SERIALIZED_NAME_IBAN_TX_END_TO_END_ID = "ibanTxEndToEndId";
  @SerializedName(SERIALIZED_NAME_IBAN_TX_END_TO_END_ID)
  @javax.annotation.Nullable
  private String ibanTxEndToEndId;

  public static final String SERIALIZED_NAME_PAYIN_ID = "payinId";
  @SerializedName(SERIALIZED_NAME_PAYIN_ID)
  @javax.annotation.Nullable
  private String payinId;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtorName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  @javax.annotation.Nullable
  private String debtorName;

  public static final String SERIALIZED_NAME_UNIQUE_MANDATE_REFERENCE = "uniqueMandateReference";
  @SerializedName(SERIALIZED_NAME_UNIQUE_MANDATE_REFERENCE)
  @javax.annotation.Nullable
  private String uniqueMandateReference;

  public Payin() {
  }

  public Payin messageToUser(@javax.annotation.Nullable String messageToUser) {
    this.messageToUser = messageToUser;
    return this;
  }

  /**
   * Get messageToUser
   * @return messageToUser
   */
  @javax.annotation.Nullable
  public String getMessageToUser() {
    return messageToUser;
  }

  public void setMessageToUser(@javax.annotation.Nullable String messageToUser) {
    this.messageToUser = messageToUser;
  }


  public Payin codeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
    return this;
  }

  /**
   * Get codeStatus
   * @return codeStatus
   */
  @javax.annotation.Nullable
  public String getCodeStatus() {
    return codeStatus;
  }

  public void setCodeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
  }


  public Payin informationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
    return this;
  }

  /**
   * Get informationStatus
   * @return informationStatus
   */
  @javax.annotation.Nullable
  public String getInformationStatus() {
    return informationStatus;
  }

  public void setInformationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
  }


  public Payin payinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
    return this;
  }

  /**
   * Get payinTag
   * @return payinTag
   */
  @javax.annotation.Nullable
  public String getPayinTag() {
    return payinTag;
  }

  public void setPayinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
  }


  public Payin additionalData(@javax.annotation.Nullable List<String> additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  public Payin addAdditionalDataItem(String additionalDataItem) {
    if (this.additionalData == null) {
      this.additionalData = new ArrayList<>();
    }
    this.additionalData.add(additionalDataItem);
    return this;
  }

  /**
   * Get additionalData
   * @return additionalData
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(@javax.annotation.Nullable List<String> additionalData) {
    this.additionalData = additionalData;
  }


  public Payin ibanFullname(@javax.annotation.Nullable String ibanFullname) {
    this.ibanFullname = ibanFullname;
    return this;
  }

  /**
   * Get ibanFullname
   * @return ibanFullname
   */
  @javax.annotation.Nullable
  public String getIbanFullname() {
    return ibanFullname;
  }

  public void setIbanFullname(@javax.annotation.Nullable String ibanFullname) {
    this.ibanFullname = ibanFullname;
  }


  public Payin dbtrIBAN(@javax.annotation.Nullable String dbtrIBAN) {
    this.dbtrIBAN = dbtrIBAN;
    return this;
  }

  /**
   * Get dbtrIBAN
   * @return dbtrIBAN
   */
  @javax.annotation.Nullable
  public String getDbtrIBAN() {
    return dbtrIBAN;
  }

  public void setDbtrIBAN(@javax.annotation.Nullable String dbtrIBAN) {
    this.dbtrIBAN = dbtrIBAN;
  }


  public Payin mandateId(@javax.annotation.Nullable String mandateId) {
    this.mandateId = mandateId;
    return this;
  }

  /**
   * Get mandateId
   * @return mandateId
   */
  @javax.annotation.Nullable
  public String getMandateId() {
    return mandateId;
  }

  public void setMandateId(@javax.annotation.Nullable String mandateId) {
    this.mandateId = mandateId;
  }


  public Payin ibanTxEndToEndId(@javax.annotation.Nullable String ibanTxEndToEndId) {
    this.ibanTxEndToEndId = ibanTxEndToEndId;
    return this;
  }

  /**
   * Get ibanTxEndToEndId
   * @return ibanTxEndToEndId
   */
  @javax.annotation.Nullable
  public String getIbanTxEndToEndId() {
    return ibanTxEndToEndId;
  }

  public void setIbanTxEndToEndId(@javax.annotation.Nullable String ibanTxEndToEndId) {
    this.ibanTxEndToEndId = ibanTxEndToEndId;
  }


  public Payin payinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
    return this;
  }

  /**
   * Get payinId
   * @return payinId
   */
  @javax.annotation.Nullable
  public String getPayinId() {
    return payinId;
  }

  public void setPayinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
  }


  public Payin debtorName(@javax.annotation.Nullable String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * Get debtorName
   * @return debtorName
   */
  @javax.annotation.Nullable
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(@javax.annotation.Nullable String debtorName) {
    this.debtorName = debtorName;
  }


  public Payin uniqueMandateReference(@javax.annotation.Nullable String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
    return this;
  }

  /**
   * Get uniqueMandateReference
   * @return uniqueMandateReference
   */
  @javax.annotation.Nullable
  public String getUniqueMandateReference() {
    return uniqueMandateReference;
  }

  public void setUniqueMandateReference(@javax.annotation.Nullable String uniqueMandateReference) {
    this.uniqueMandateReference = uniqueMandateReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payin payin = (Payin) o;
    return Objects.equals(this.messageToUser, payin.messageToUser) &&
        Objects.equals(this.codeStatus, payin.codeStatus) &&
        Objects.equals(this.informationStatus, payin.informationStatus) &&
        Objects.equals(this.payinTag, payin.payinTag) &&
        Objects.equals(this.additionalData, payin.additionalData) &&
        Objects.equals(this.ibanFullname, payin.ibanFullname) &&
        Objects.equals(this.dbtrIBAN, payin.dbtrIBAN) &&
        Objects.equals(this.mandateId, payin.mandateId) &&
        Objects.equals(this.ibanTxEndToEndId, payin.ibanTxEndToEndId) &&
        Objects.equals(this.payinId, payin.payinId) &&
        Objects.equals(this.debtorName, payin.debtorName) &&
        Objects.equals(this.uniqueMandateReference, payin.uniqueMandateReference);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageToUser, codeStatus, informationStatus, payinTag, additionalData, ibanFullname, dbtrIBAN, mandateId, ibanTxEndToEndId, payinId, debtorName, uniqueMandateReference);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payin {\n");
    sb.append("    messageToUser: ").append(toIndentedString(messageToUser)).append("\n");
    sb.append("    codeStatus: ").append(toIndentedString(codeStatus)).append("\n");
    sb.append("    informationStatus: ").append(toIndentedString(informationStatus)).append("\n");
    sb.append("    payinTag: ").append(toIndentedString(payinTag)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    ibanFullname: ").append(toIndentedString(ibanFullname)).append("\n");
    sb.append("    dbtrIBAN: ").append(toIndentedString(dbtrIBAN)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    ibanTxEndToEndId: ").append(toIndentedString(ibanTxEndToEndId)).append("\n");
    sb.append("    payinId: ").append(toIndentedString(payinId)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    uniqueMandateReference: ").append(toIndentedString(uniqueMandateReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageToUser");
    openapiFields.add("codeStatus");
    openapiFields.add("informationStatus");
    openapiFields.add("payinTag");
    openapiFields.add("additionalData");
    openapiFields.add("ibanFullname");
    openapiFields.add("dbtrIBAN");
    openapiFields.add("mandateId");
    openapiFields.add("ibanTxEndToEndId");
    openapiFields.add("payinId");
    openapiFields.add("debtorName");
    openapiFields.add("uniqueMandateReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payin is not found in the empty JSON string", Payin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("messageToUser") != null && !jsonObj.get("messageToUser").isJsonNull()) && !jsonObj.get("messageToUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageToUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageToUser").toString()));
      }
      if ((jsonObj.get("codeStatus") != null && !jsonObj.get("codeStatus").isJsonNull()) && !jsonObj.get("codeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeStatus").toString()));
      }
      if ((jsonObj.get("informationStatus") != null && !jsonObj.get("informationStatus").isJsonNull()) && !jsonObj.get("informationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informationStatus").toString()));
      }
      if ((jsonObj.get("payinTag") != null && !jsonObj.get("payinTag").isJsonNull()) && !jsonObj.get("payinTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinTag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonNull() && !jsonObj.get("additionalData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be an array in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      if ((jsonObj.get("ibanFullname") != null && !jsonObj.get("ibanFullname").isJsonNull()) && !jsonObj.get("ibanFullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanFullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanFullname").toString()));
      }
      if ((jsonObj.get("dbtrIBAN") != null && !jsonObj.get("dbtrIBAN").isJsonNull()) && !jsonObj.get("dbtrIBAN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbtrIBAN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbtrIBAN").toString()));
      }
      if ((jsonObj.get("mandateId") != null && !jsonObj.get("mandateId").isJsonNull()) && !jsonObj.get("mandateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateId").toString()));
      }
      if ((jsonObj.get("ibanTxEndToEndId") != null && !jsonObj.get("ibanTxEndToEndId").isJsonNull()) && !jsonObj.get("ibanTxEndToEndId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanTxEndToEndId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanTxEndToEndId").toString()));
      }
      if ((jsonObj.get("payinId") != null && !jsonObj.get("payinId").isJsonNull()) && !jsonObj.get("payinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinId").toString()));
      }
      if ((jsonObj.get("debtorName") != null && !jsonObj.get("debtorName").isJsonNull()) && !jsonObj.get("debtorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorName").toString()));
      }
      if ((jsonObj.get("uniqueMandateReference") != null && !jsonObj.get("uniqueMandateReference").isJsonNull()) && !jsonObj.get("uniqueMandateReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueMandateReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueMandateReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payin.class));

       return (TypeAdapter<T>) new TypeAdapter<Payin>() {
           @Override
           public void write(JsonWriter out, Payin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payin
   * @throws IOException if the JSON string is invalid with respect to Payin
   */
  public static Payin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payin.class);
  }

  /**
   * Convert an instance of Payin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

