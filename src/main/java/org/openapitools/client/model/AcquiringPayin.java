/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AcquiringPayin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class AcquiringPayin {
  public static final String SERIALIZED_NAME_PAYIN_ID = "payinId";
  @SerializedName(SERIALIZED_NAME_PAYIN_ID)
  @javax.annotation.Nullable
  private String payinId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  @javax.annotation.Nullable
  private String walletId;

  public static final String SERIALIZED_NAME_USER_FIRST_NAME = "userFirstName";
  @SerializedName(SERIALIZED_NAME_USER_FIRST_NAME)
  @javax.annotation.Nullable
  private String userFirstName;

  public static final String SERIALIZED_NAME_WALLET_EVENT_NAME = "walletEventName";
  @SerializedName(SERIALIZED_NAME_WALLET_EVENT_NAME)
  @javax.annotation.Nullable
  private String walletEventName;

  public static final String SERIALIZED_NAME_WALLET_ALIAS = "walletAlias";
  @SerializedName(SERIALIZED_NAME_WALLET_ALIAS)
  @javax.annotation.Nullable
  private String walletAlias;

  public static final String SERIALIZED_NAME_USER_LAST_NAME = "userLastName";
  @SerializedName(SERIALIZED_NAME_USER_LAST_NAME)
  @javax.annotation.Nullable
  private String userLastName;

  public static final String SERIALIZED_NAME_MESSAGE_TO_USER = "messageToUser";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_USER)
  @javax.annotation.Nullable
  private String messageToUser;

  /**
   * Status of the payin.   Possible values:   - *PENDING*   - *CANCELED*   - *VALIDATED*
   */
  @JsonAdapter(PayinStatusEnum.Adapter.class)
  public enum PayinStatusEnum {
    PENDING("PENDING"),
    
    CANCELED("CANCELED"),
    
    VALIDATED("VALIDATED");

    private String value;

    PayinStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayinStatusEnum fromValue(String value) {
      for (PayinStatusEnum b : PayinStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayinStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayinStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayinStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayinStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayinStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYIN_STATUS = "payinStatus";
  @SerializedName(SERIALIZED_NAME_PAYIN_STATUS)
  @javax.annotation.Nullable
  private PayinStatusEnum payinStatus;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "paymentMethodId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  @javax.annotation.Nullable
  private String paymentMethodId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private String createdDate;

  public static final String SERIALIZED_NAME_CODE_STATUS = "codeStatus";
  @SerializedName(SERIALIZED_NAME_CODE_STATUS)
  @javax.annotation.Nullable
  private String codeStatus;

  public static final String SERIALIZED_NAME_INFORMATION_STATUS = "informationStatus";
  @SerializedName(SERIALIZED_NAME_INFORMATION_STATUS)
  @javax.annotation.Nullable
  private String informationStatus;

  public static final String SERIALIZED_NAME_REFUND_AMOUNT = "refundAmount";
  @SerializedName(SERIALIZED_NAME_REFUND_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal refundAmount;

  public static final String SERIALIZED_NAME_CREATED_IP = "createdIp";
  @SerializedName(SERIALIZED_NAME_CREATED_IP)
  @javax.annotation.Nullable
  private String createdIp;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private String profile;

  public static final String SERIALIZED_NAME_PAYIN_TAG = "payinTag";
  @SerializedName(SERIALIZED_NAME_PAYIN_TAG)
  @javax.annotation.Nullable
  private String payinTag = "null";

  public static final String SERIALIZED_NAME_PAYIN_DATE = "payinDate";
  @SerializedName(SERIALIZED_NAME_PAYIN_DATE)
  @javax.annotation.Nullable
  private String payinDate = "null";

  public static final String SERIALIZED_NAME_CART_ID = "cartId";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  @javax.annotation.Nullable
  private BigDecimal cartId;

  public static final String SERIALIZED_NAME_SUBTOTAL_ITEMS = "subtotalItems";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_ITEMS)
  @javax.annotation.Nullable
  private String subtotalItems = "null";

  public static final String SERIALIZED_NAME_SUBTOTAL_SERVICES = "subtotalServices";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_SERVICES)
  @javax.annotation.Nullable
  private String subtotalServices = "null";

  public static final String SERIALIZED_NAME_SUBTOTAL_TAX = "subtotalTax";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_TAX)
  @javax.annotation.Nullable
  private String subtotalTax = "null";

  public static final String SERIALIZED_NAME_DISTRIBUTOR_FEE = "distributorFee";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTOR_FEE)
  @javax.annotation.Nullable
  private String distributorFee = "null";

  public static final String SERIALIZED_NAME_PAYMENT_HTML = "paymentHtml";
  @SerializedName(SERIALIZED_NAME_PAYMENT_HTML)
  @javax.annotation.Nullable
  private String paymentHtml = "null";

  public static final String SERIALIZED_NAME_PAYMENT_LANGUAGE = "paymentLanguage";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LANGUAGE)
  @javax.annotation.Nullable
  private String paymentLanguage = "null";

  public static final String SERIALIZED_NAME_PAYMENT_POST_URL = "paymentPostUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_POST_URL)
  @javax.annotation.Nullable
  private String paymentPostUrl = "null";

  public static final String SERIALIZED_NAME_PAYMENT_POST_DATA_URL = "paymentPostDataUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_POST_DATA_URL)
  @javax.annotation.Nullable
  private String paymentPostDataUrl = "null";

  public static final String SERIALIZED_NAME_PAYMENT_ACCEPTED_URL = "paymentAcceptedUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCEPTED_URL)
  @javax.annotation.Nullable
  private String paymentAcceptedUrl = "null";

  public static final String SERIALIZED_NAME_PAYMENT_WAITING_URL = "paymentWaitingUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_WAITING_URL)
  @javax.annotation.Nullable
  private String paymentWaitingUrl = "null";

  public static final String SERIALIZED_NAME_PAYMENT_CANCELED_URL = "paymentCanceledUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CANCELED_URL)
  @javax.annotation.Nullable
  private String paymentCanceledUrl = "null";

  public static final String SERIALIZED_NAME_PAYMENT_REFUSED_URL = "paymentRefusedUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REFUSED_URL)
  @javax.annotation.Nullable
  private String paymentRefusedUrl = "null";

  public static final String SERIALIZED_NAME_PAYMENT_EXCEPTION_URL = "paymentExceptionUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_EXCEPTION_URL)
  @javax.annotation.Nullable
  private String paymentExceptionUrl = "null";

  public static final String SERIALIZED_NAME_IBAN_FULLNAME = "ibanFullname";
  @SerializedName(SERIALIZED_NAME_IBAN_FULLNAME)
  @javax.annotation.Nullable
  private String ibanFullname = "null";

  public static final String SERIALIZED_NAME_IBAN_ID = "ibanId";
  @SerializedName(SERIALIZED_NAME_IBAN_ID)
  @javax.annotation.Nullable
  private String ibanId = "null";

  public static final String SERIALIZED_NAME_IBAN_BIC = "ibanBic";
  @SerializedName(SERIALIZED_NAME_IBAN_BIC)
  @javax.annotation.Nullable
  private String ibanBic = "null";

  public static final String SERIALIZED_NAME_IBAN_TX_END_TO_END_ID = "ibanTxEndToEndId";
  @SerializedName(SERIALIZED_NAME_IBAN_TX_END_TO_END_ID)
  @javax.annotation.Nullable
  private String ibanTxEndToEndId = "null";

  public static final String SERIALIZED_NAME_IBAN_TX_ID = "ibanTxId";
  @SerializedName(SERIALIZED_NAME_IBAN_TX_ID)
  @javax.annotation.Nullable
  private String ibanTxId = "null";

  public static final String SERIALIZED_NAME_FORWARD_URL = "forwardUrl";
  @SerializedName(SERIALIZED_NAME_FORWARD_URL)
  @javax.annotation.Nullable
  private String forwardUrl = "null";

  public static final String SERIALIZED_NAME_MANDATE_ID = "mandateId";
  @SerializedName(SERIALIZED_NAME_MANDATE_ID)
  @javax.annotation.Nullable
  private BigDecimal mandateId = new BigDecimal("0");

  public static final String SERIALIZED_NAME_CREDITOR_NAME = "creditorName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME)
  @javax.annotation.Nullable
  private String creditorName = "null";

  public static final String SERIALIZED_NAME_CREDITOR_ADDRESS_LINE = "creditorAddressLine";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ADDRESS_LINE)
  @javax.annotation.Nullable
  private String creditorAddressLine = "null";

  public static final String SERIALIZED_NAME_CREDITOR_COUNTRY = "creditorCountry";
  @SerializedName(SERIALIZED_NAME_CREDITOR_COUNTRY)
  @javax.annotation.Nullable
  private String creditorCountry = "null";

  public static final String SERIALIZED_NAME_CREDITOR_IBAN = "creditorIban";
  @SerializedName(SERIALIZED_NAME_CREDITOR_IBAN)
  @javax.annotation.Nullable
  private String creditorIban = "null";

  public static final String SERIALIZED_NAME_CREDITOR_B_I_C = "creditorBIC";
  @SerializedName(SERIALIZED_NAME_CREDITOR_B_I_C)
  @javax.annotation.Nullable
  private String creditorBIC = "null";

  public static final String SERIALIZED_NAME_VIRTUAL_IBAN_ID = "virtualIbanId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_IBAN_ID)
  @javax.annotation.Nullable
  private BigDecimal virtualIbanId;

  public static final String SERIALIZED_NAME_VIRTUAL_IBAN_REFERENCE = "virtualIbanReference";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_IBAN_REFERENCE)
  @javax.annotation.Nullable
  private String virtualIbanReference = "null";

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  @javax.annotation.Nullable
  private String additionalData = "null";

  public AcquiringPayin() {
  }

  public AcquiringPayin payinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
    return this;
  }

  /**
   * The universally unique identifier (UUID) of the payin
   * @return payinId
   */
  @javax.annotation.Nullable
  public String getPayinId() {
    return payinId;
  }

  public void setPayinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
  }


  public AcquiringPayin userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique identifier of the User requesting the payin
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public AcquiringPayin walletId(@javax.annotation.Nullable String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * The unique identifier of the wallet to be credited
   * @return walletId
   */
  @javax.annotation.Nullable
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(@javax.annotation.Nullable String walletId) {
    this.walletId = walletId;
  }


  public AcquiringPayin userFirstName(@javax.annotation.Nullable String userFirstName) {
    this.userFirstName = userFirstName;
    return this;
  }

  /**
   * The firstname of the user
   * @return userFirstName
   */
  @javax.annotation.Nullable
  public String getUserFirstName() {
    return userFirstName;
  }

  public void setUserFirstName(@javax.annotation.Nullable String userFirstName) {
    this.userFirstName = userFirstName;
  }


  public AcquiringPayin walletEventName(@javax.annotation.Nullable String walletEventName) {
    this.walletEventName = walletEventName;
    return this;
  }

  /**
   * The name of the wallet
   * @return walletEventName
   */
  @javax.annotation.Nullable
  public String getWalletEventName() {
    return walletEventName;
  }

  public void setWalletEventName(@javax.annotation.Nullable String walletEventName) {
    this.walletEventName = walletEventName;
  }


  public AcquiringPayin walletAlias(@javax.annotation.Nullable String walletAlias) {
    this.walletAlias = walletAlias;
    return this;
  }

  /**
   * Short URL wallet name
   * @return walletAlias
   */
  @javax.annotation.Nullable
  public String getWalletAlias() {
    return walletAlias;
  }

  public void setWalletAlias(@javax.annotation.Nullable String walletAlias) {
    this.walletAlias = walletAlias;
  }


  public AcquiringPayin userLastName(@javax.annotation.Nullable String userLastName) {
    this.userLastName = userLastName;
    return this;
  }

  /**
   * The lastname of the user
   * @return userLastName
   */
  @javax.annotation.Nullable
  public String getUserLastName() {
    return userLastName;
  }

  public void setUserLastName(@javax.annotation.Nullable String userLastName) {
    this.userLastName = userLastName;
  }


  public AcquiringPayin messageToUser(@javax.annotation.Nullable String messageToUser) {
    this.messageToUser = messageToUser;
    return this;
  }

  /**
   * Message to send to user owning the wallet
   * @return messageToUser
   */
  @javax.annotation.Nullable
  public String getMessageToUser() {
    return messageToUser;
  }

  public void setMessageToUser(@javax.annotation.Nullable String messageToUser) {
    this.messageToUser = messageToUser;
  }


  public AcquiringPayin payinStatus(@javax.annotation.Nullable PayinStatusEnum payinStatus) {
    this.payinStatus = payinStatus;
    return this;
  }

  /**
   * Status of the payin.   Possible values:   - *PENDING*   - *CANCELED*   - *VALIDATED*
   * @return payinStatus
   */
  @javax.annotation.Nullable
  public PayinStatusEnum getPayinStatus() {
    return payinStatus;
  }

  public void setPayinStatus(@javax.annotation.Nullable PayinStatusEnum payinStatus) {
    this.payinStatus = payinStatus;
  }


  public AcquiringPayin paymentMethodId(@javax.annotation.Nullable String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
    return this;
  }

  /**
   * Treezor internal payment method identifier
   * @return paymentMethodId
   */
  @javax.annotation.Nullable
  public String getPaymentMethodId() {
    return paymentMethodId;
  }

  public void setPaymentMethodId(@javax.annotation.Nullable String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
  }


  public AcquiringPayin amount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payin.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
  }


  public AcquiringPayin currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Base currency for thisthe payin.  This three-character currency code must comply with ISO-4217
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public AcquiringPayin createdDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The ceation date of the payin
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable String createdDate) {
    this.createdDate = createdDate;
  }


  public AcquiringPayin codeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
    return this;
  }

  /**
   * Treezor status code mixed with HiPay notification status code: 150000 + (status code).   Example: For a successful payin, the HiPay notification status code will be 118. The codeStatus will be 150118 
   * @return codeStatus
   */
  @javax.annotation.Nullable
  public String getCodeStatus() {
    return codeStatus;
  }

  public void setCodeStatus(@javax.annotation.Nullable String codeStatus) {
    this.codeStatus = codeStatus;
  }


  public AcquiringPayin informationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
    return this;
  }

  /**
   * Informational message related to the HiPay status code. This message is destined to the user 
   * @return informationStatus
   */
  @javax.annotation.Nullable
  public String getInformationStatus() {
    return informationStatus;
  }

  public void setInformationStatus(@javax.annotation.Nullable String informationStatus) {
    this.informationStatus = informationStatus;
  }


  public AcquiringPayin refundAmount(@javax.annotation.Nullable BigDecimal refundAmount) {
    this.refundAmount = refundAmount;
    return this;
  }

  /**
   * Refunded amount
   * @return refundAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundAmount() {
    return refundAmount;
  }

  public void setRefundAmount(@javax.annotation.Nullable BigDecimal refundAmount) {
    this.refundAmount = refundAmount;
  }


  public AcquiringPayin createdIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
    return this;
  }

  /**
   * The IP address of the end user making a top-up
   * @return createdIp
   */
  @javax.annotation.Nullable
  public String getCreatedIp() {
    return createdIp;
  }

  public void setCreatedIp(@javax.annotation.Nullable String createdIp) {
    this.createdIp = createdIp;
  }


  public AcquiringPayin profile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Your HiPay Merchant ID.
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
  }


  public AcquiringPayin payinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
    return this;
  }

  /**
   * This field is not used, always empty
   * @return payinTag
   */
  @javax.annotation.Nullable
  public String getPayinTag() {
    return payinTag;
  }

  public void setPayinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
  }


  public AcquiringPayin payinDate(@javax.annotation.Nullable String payinDate) {
    this.payinDate = payinDate;
    return this;
  }

  /**
   * This field is not used, always 0000-00-00
   * @return payinDate
   */
  @javax.annotation.Nullable
  public String getPayinDate() {
    return payinDate;
  }

  public void setPayinDate(@javax.annotation.Nullable String payinDate) {
    this.payinDate = payinDate;
  }


  public AcquiringPayin cartId(@javax.annotation.Nullable BigDecimal cartId) {
    this.cartId = cartId;
    return this;
  }

  /**
   * This field is not used, always 0
   * @return cartId
   */
  @javax.annotation.Nullable
  public BigDecimal getCartId() {
    return cartId;
  }

  public void setCartId(@javax.annotation.Nullable BigDecimal cartId) {
    this.cartId = cartId;
  }


  public AcquiringPayin subtotalItems(@javax.annotation.Nullable String subtotalItems) {
    this.subtotalItems = subtotalItems;
    return this;
  }

  /**
   * This field is not used, always 0.00
   * @return subtotalItems
   */
  @javax.annotation.Nullable
  public String getSubtotalItems() {
    return subtotalItems;
  }

  public void setSubtotalItems(@javax.annotation.Nullable String subtotalItems) {
    this.subtotalItems = subtotalItems;
  }


  public AcquiringPayin subtotalServices(@javax.annotation.Nullable String subtotalServices) {
    this.subtotalServices = subtotalServices;
    return this;
  }

  /**
   * This field is not used always 0.00
   * @return subtotalServices
   */
  @javax.annotation.Nullable
  public String getSubtotalServices() {
    return subtotalServices;
  }

  public void setSubtotalServices(@javax.annotation.Nullable String subtotalServices) {
    this.subtotalServices = subtotalServices;
  }


  public AcquiringPayin subtotalTax(@javax.annotation.Nullable String subtotalTax) {
    this.subtotalTax = subtotalTax;
    return this;
  }

  /**
   * This field is not used always 0.00
   * @return subtotalTax
   */
  @javax.annotation.Nullable
  public String getSubtotalTax() {
    return subtotalTax;
  }

  public void setSubtotalTax(@javax.annotation.Nullable String subtotalTax) {
    this.subtotalTax = subtotalTax;
  }


  public AcquiringPayin distributorFee(@javax.annotation.Nullable String distributorFee) {
    this.distributorFee = distributorFee;
    return this;
  }

  /**
   * This field is not used, always null
   * @return distributorFee
   */
  @javax.annotation.Nullable
  public String getDistributorFee() {
    return distributorFee;
  }

  public void setDistributorFee(@javax.annotation.Nullable String distributorFee) {
    this.distributorFee = distributorFee;
  }


  public AcquiringPayin paymentHtml(@javax.annotation.Nullable String paymentHtml) {
    this.paymentHtml = paymentHtml;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentHtml
   */
  @javax.annotation.Nullable
  public String getPaymentHtml() {
    return paymentHtml;
  }

  public void setPaymentHtml(@javax.annotation.Nullable String paymentHtml) {
    this.paymentHtml = paymentHtml;
  }


  public AcquiringPayin paymentLanguage(@javax.annotation.Nullable String paymentLanguage) {
    this.paymentLanguage = paymentLanguage;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentLanguage
   */
  @javax.annotation.Nullable
  public String getPaymentLanguage() {
    return paymentLanguage;
  }

  public void setPaymentLanguage(@javax.annotation.Nullable String paymentLanguage) {
    this.paymentLanguage = paymentLanguage;
  }


  public AcquiringPayin paymentPostUrl(@javax.annotation.Nullable String paymentPostUrl) {
    this.paymentPostUrl = paymentPostUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentPostUrl
   */
  @javax.annotation.Nullable
  public String getPaymentPostUrl() {
    return paymentPostUrl;
  }

  public void setPaymentPostUrl(@javax.annotation.Nullable String paymentPostUrl) {
    this.paymentPostUrl = paymentPostUrl;
  }


  public AcquiringPayin paymentPostDataUrl(@javax.annotation.Nullable String paymentPostDataUrl) {
    this.paymentPostDataUrl = paymentPostDataUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentPostDataUrl
   */
  @javax.annotation.Nullable
  public String getPaymentPostDataUrl() {
    return paymentPostDataUrl;
  }

  public void setPaymentPostDataUrl(@javax.annotation.Nullable String paymentPostDataUrl) {
    this.paymentPostDataUrl = paymentPostDataUrl;
  }


  public AcquiringPayin paymentAcceptedUrl(@javax.annotation.Nullable String paymentAcceptedUrl) {
    this.paymentAcceptedUrl = paymentAcceptedUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentAcceptedUrl
   */
  @javax.annotation.Nullable
  public String getPaymentAcceptedUrl() {
    return paymentAcceptedUrl;
  }

  public void setPaymentAcceptedUrl(@javax.annotation.Nullable String paymentAcceptedUrl) {
    this.paymentAcceptedUrl = paymentAcceptedUrl;
  }


  public AcquiringPayin paymentWaitingUrl(@javax.annotation.Nullable String paymentWaitingUrl) {
    this.paymentWaitingUrl = paymentWaitingUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentWaitingUrl
   */
  @javax.annotation.Nullable
  public String getPaymentWaitingUrl() {
    return paymentWaitingUrl;
  }

  public void setPaymentWaitingUrl(@javax.annotation.Nullable String paymentWaitingUrl) {
    this.paymentWaitingUrl = paymentWaitingUrl;
  }


  public AcquiringPayin paymentCanceledUrl(@javax.annotation.Nullable String paymentCanceledUrl) {
    this.paymentCanceledUrl = paymentCanceledUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentCanceledUrl
   */
  @javax.annotation.Nullable
  public String getPaymentCanceledUrl() {
    return paymentCanceledUrl;
  }

  public void setPaymentCanceledUrl(@javax.annotation.Nullable String paymentCanceledUrl) {
    this.paymentCanceledUrl = paymentCanceledUrl;
  }


  public AcquiringPayin paymentRefusedUrl(@javax.annotation.Nullable String paymentRefusedUrl) {
    this.paymentRefusedUrl = paymentRefusedUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentRefusedUrl
   */
  @javax.annotation.Nullable
  public String getPaymentRefusedUrl() {
    return paymentRefusedUrl;
  }

  public void setPaymentRefusedUrl(@javax.annotation.Nullable String paymentRefusedUrl) {
    this.paymentRefusedUrl = paymentRefusedUrl;
  }


  public AcquiringPayin paymentExceptionUrl(@javax.annotation.Nullable String paymentExceptionUrl) {
    this.paymentExceptionUrl = paymentExceptionUrl;
    return this;
  }

  /**
   * This field is not used, always null
   * @return paymentExceptionUrl
   */
  @javax.annotation.Nullable
  public String getPaymentExceptionUrl() {
    return paymentExceptionUrl;
  }

  public void setPaymentExceptionUrl(@javax.annotation.Nullable String paymentExceptionUrl) {
    this.paymentExceptionUrl = paymentExceptionUrl;
  }


  public AcquiringPayin ibanFullname(@javax.annotation.Nullable String ibanFullname) {
    this.ibanFullname = ibanFullname;
    return this;
  }

  /**
   * This field is not used, always null
   * @return ibanFullname
   */
  @javax.annotation.Nullable
  public String getIbanFullname() {
    return ibanFullname;
  }

  public void setIbanFullname(@javax.annotation.Nullable String ibanFullname) {
    this.ibanFullname = ibanFullname;
  }


  public AcquiringPayin ibanId(@javax.annotation.Nullable String ibanId) {
    this.ibanId = ibanId;
    return this;
  }

  /**
   * This field is not used, always null
   * @return ibanId
   */
  @javax.annotation.Nullable
  public String getIbanId() {
    return ibanId;
  }

  public void setIbanId(@javax.annotation.Nullable String ibanId) {
    this.ibanId = ibanId;
  }


  public AcquiringPayin ibanBic(@javax.annotation.Nullable String ibanBic) {
    this.ibanBic = ibanBic;
    return this;
  }

  /**
   * This field is not used, always null
   * @return ibanBic
   */
  @javax.annotation.Nullable
  public String getIbanBic() {
    return ibanBic;
  }

  public void setIbanBic(@javax.annotation.Nullable String ibanBic) {
    this.ibanBic = ibanBic;
  }


  public AcquiringPayin ibanTxEndToEndId(@javax.annotation.Nullable String ibanTxEndToEndId) {
    this.ibanTxEndToEndId = ibanTxEndToEndId;
    return this;
  }

  /**
   * This field is not used, always null
   * @return ibanTxEndToEndId
   */
  @javax.annotation.Nullable
  public String getIbanTxEndToEndId() {
    return ibanTxEndToEndId;
  }

  public void setIbanTxEndToEndId(@javax.annotation.Nullable String ibanTxEndToEndId) {
    this.ibanTxEndToEndId = ibanTxEndToEndId;
  }


  public AcquiringPayin ibanTxId(@javax.annotation.Nullable String ibanTxId) {
    this.ibanTxId = ibanTxId;
    return this;
  }

  /**
   * This field is not used, always null
   * @return ibanTxId
   */
  @javax.annotation.Nullable
  public String getIbanTxId() {
    return ibanTxId;
  }

  public void setIbanTxId(@javax.annotation.Nullable String ibanTxId) {
    this.ibanTxId = ibanTxId;
  }


  public AcquiringPayin forwardUrl(@javax.annotation.Nullable String forwardUrl) {
    this.forwardUrl = forwardUrl;
    return this;
  }

  /**
   * For some payment methods, the end-user must be redirected to this URL in order for him to enter additional payment information. 
   * @return forwardUrl
   */
  @javax.annotation.Nullable
  public String getForwardUrl() {
    return forwardUrl;
  }

  public void setForwardUrl(@javax.annotation.Nullable String forwardUrl) {
    this.forwardUrl = forwardUrl;
  }


  public AcquiringPayin mandateId(@javax.annotation.Nullable BigDecimal mandateId) {
    this.mandateId = mandateId;
    return this;
  }

  /**
   * This field is not used, always 0
   * @return mandateId
   */
  @javax.annotation.Nullable
  public BigDecimal getMandateId() {
    return mandateId;
  }

  public void setMandateId(@javax.annotation.Nullable BigDecimal mandateId) {
    this.mandateId = mandateId;
  }


  public AcquiringPayin creditorName(@javax.annotation.Nullable String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * This field is not used, always null
   * @return creditorName
   */
  @javax.annotation.Nullable
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(@javax.annotation.Nullable String creditorName) {
    this.creditorName = creditorName;
  }


  public AcquiringPayin creditorAddressLine(@javax.annotation.Nullable String creditorAddressLine) {
    this.creditorAddressLine = creditorAddressLine;
    return this;
  }

  /**
   * This field is not used, always null
   * @return creditorAddressLine
   */
  @javax.annotation.Nullable
  public String getCreditorAddressLine() {
    return creditorAddressLine;
  }

  public void setCreditorAddressLine(@javax.annotation.Nullable String creditorAddressLine) {
    this.creditorAddressLine = creditorAddressLine;
  }


  public AcquiringPayin creditorCountry(@javax.annotation.Nullable String creditorCountry) {
    this.creditorCountry = creditorCountry;
    return this;
  }

  /**
   * This field is not used, always null
   * @return creditorCountry
   */
  @javax.annotation.Nullable
  public String getCreditorCountry() {
    return creditorCountry;
  }

  public void setCreditorCountry(@javax.annotation.Nullable String creditorCountry) {
    this.creditorCountry = creditorCountry;
  }


  public AcquiringPayin creditorIban(@javax.annotation.Nullable String creditorIban) {
    this.creditorIban = creditorIban;
    return this;
  }

  /**
   * This field is not used, always null
   * @return creditorIban
   */
  @javax.annotation.Nullable
  public String getCreditorIban() {
    return creditorIban;
  }

  public void setCreditorIban(@javax.annotation.Nullable String creditorIban) {
    this.creditorIban = creditorIban;
  }


  public AcquiringPayin creditorBIC(@javax.annotation.Nullable String creditorBIC) {
    this.creditorBIC = creditorBIC;
    return this;
  }

  /**
   * This field is not used, always null
   * @return creditorBIC
   */
  @javax.annotation.Nullable
  public String getCreditorBIC() {
    return creditorBIC;
  }

  public void setCreditorBIC(@javax.annotation.Nullable String creditorBIC) {
    this.creditorBIC = creditorBIC;
  }


  public AcquiringPayin virtualIbanId(@javax.annotation.Nullable BigDecimal virtualIbanId) {
    this.virtualIbanId = virtualIbanId;
    return this;
  }

  /**
   * This field is not used, always null
   * @return virtualIbanId
   */
  @javax.annotation.Nullable
  public BigDecimal getVirtualIbanId() {
    return virtualIbanId;
  }

  public void setVirtualIbanId(@javax.annotation.Nullable BigDecimal virtualIbanId) {
    this.virtualIbanId = virtualIbanId;
  }


  public AcquiringPayin virtualIbanReference(@javax.annotation.Nullable String virtualIbanReference) {
    this.virtualIbanReference = virtualIbanReference;
    return this;
  }

  /**
   * This field is not used, always null
   * @return virtualIbanReference
   */
  @javax.annotation.Nullable
  public String getVirtualIbanReference() {
    return virtualIbanReference;
  }

  public void setVirtualIbanReference(@javax.annotation.Nullable String virtualIbanReference) {
    this.virtualIbanReference = virtualIbanReference;
  }


  public AcquiringPayin additionalData(@javax.annotation.Nullable String additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  /**
   * This field is not used, always empty
   * @return additionalData
   */
  @javax.annotation.Nullable
  public String getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(@javax.annotation.Nullable String additionalData) {
    this.additionalData = additionalData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AcquiringPayin acquiringPayin = (AcquiringPayin) o;
    return Objects.equals(this.payinId, acquiringPayin.payinId) &&
        Objects.equals(this.userId, acquiringPayin.userId) &&
        Objects.equals(this.walletId, acquiringPayin.walletId) &&
        Objects.equals(this.userFirstName, acquiringPayin.userFirstName) &&
        Objects.equals(this.walletEventName, acquiringPayin.walletEventName) &&
        Objects.equals(this.walletAlias, acquiringPayin.walletAlias) &&
        Objects.equals(this.userLastName, acquiringPayin.userLastName) &&
        Objects.equals(this.messageToUser, acquiringPayin.messageToUser) &&
        Objects.equals(this.payinStatus, acquiringPayin.payinStatus) &&
        Objects.equals(this.paymentMethodId, acquiringPayin.paymentMethodId) &&
        Objects.equals(this.amount, acquiringPayin.amount) &&
        Objects.equals(this.currency, acquiringPayin.currency) &&
        Objects.equals(this.createdDate, acquiringPayin.createdDate) &&
        Objects.equals(this.codeStatus, acquiringPayin.codeStatus) &&
        Objects.equals(this.informationStatus, acquiringPayin.informationStatus) &&
        Objects.equals(this.refundAmount, acquiringPayin.refundAmount) &&
        Objects.equals(this.createdIp, acquiringPayin.createdIp) &&
        Objects.equals(this.profile, acquiringPayin.profile) &&
        Objects.equals(this.payinTag, acquiringPayin.payinTag) &&
        Objects.equals(this.payinDate, acquiringPayin.payinDate) &&
        Objects.equals(this.cartId, acquiringPayin.cartId) &&
        Objects.equals(this.subtotalItems, acquiringPayin.subtotalItems) &&
        Objects.equals(this.subtotalServices, acquiringPayin.subtotalServices) &&
        Objects.equals(this.subtotalTax, acquiringPayin.subtotalTax) &&
        Objects.equals(this.distributorFee, acquiringPayin.distributorFee) &&
        Objects.equals(this.paymentHtml, acquiringPayin.paymentHtml) &&
        Objects.equals(this.paymentLanguage, acquiringPayin.paymentLanguage) &&
        Objects.equals(this.paymentPostUrl, acquiringPayin.paymentPostUrl) &&
        Objects.equals(this.paymentPostDataUrl, acquiringPayin.paymentPostDataUrl) &&
        Objects.equals(this.paymentAcceptedUrl, acquiringPayin.paymentAcceptedUrl) &&
        Objects.equals(this.paymentWaitingUrl, acquiringPayin.paymentWaitingUrl) &&
        Objects.equals(this.paymentCanceledUrl, acquiringPayin.paymentCanceledUrl) &&
        Objects.equals(this.paymentRefusedUrl, acquiringPayin.paymentRefusedUrl) &&
        Objects.equals(this.paymentExceptionUrl, acquiringPayin.paymentExceptionUrl) &&
        Objects.equals(this.ibanFullname, acquiringPayin.ibanFullname) &&
        Objects.equals(this.ibanId, acquiringPayin.ibanId) &&
        Objects.equals(this.ibanBic, acquiringPayin.ibanBic) &&
        Objects.equals(this.ibanTxEndToEndId, acquiringPayin.ibanTxEndToEndId) &&
        Objects.equals(this.ibanTxId, acquiringPayin.ibanTxId) &&
        Objects.equals(this.forwardUrl, acquiringPayin.forwardUrl) &&
        Objects.equals(this.mandateId, acquiringPayin.mandateId) &&
        Objects.equals(this.creditorName, acquiringPayin.creditorName) &&
        Objects.equals(this.creditorAddressLine, acquiringPayin.creditorAddressLine) &&
        Objects.equals(this.creditorCountry, acquiringPayin.creditorCountry) &&
        Objects.equals(this.creditorIban, acquiringPayin.creditorIban) &&
        Objects.equals(this.creditorBIC, acquiringPayin.creditorBIC) &&
        Objects.equals(this.virtualIbanId, acquiringPayin.virtualIbanId) &&
        Objects.equals(this.virtualIbanReference, acquiringPayin.virtualIbanReference) &&
        Objects.equals(this.additionalData, acquiringPayin.additionalData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(payinId, userId, walletId, userFirstName, walletEventName, walletAlias, userLastName, messageToUser, payinStatus, paymentMethodId, amount, currency, createdDate, codeStatus, informationStatus, refundAmount, createdIp, profile, payinTag, payinDate, cartId, subtotalItems, subtotalServices, subtotalTax, distributorFee, paymentHtml, paymentLanguage, paymentPostUrl, paymentPostDataUrl, paymentAcceptedUrl, paymentWaitingUrl, paymentCanceledUrl, paymentRefusedUrl, paymentExceptionUrl, ibanFullname, ibanId, ibanBic, ibanTxEndToEndId, ibanTxId, forwardUrl, mandateId, creditorName, creditorAddressLine, creditorCountry, creditorIban, creditorBIC, virtualIbanId, virtualIbanReference, additionalData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AcquiringPayin {\n");
    sb.append("    payinId: ").append(toIndentedString(payinId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    userFirstName: ").append(toIndentedString(userFirstName)).append("\n");
    sb.append("    walletEventName: ").append(toIndentedString(walletEventName)).append("\n");
    sb.append("    walletAlias: ").append(toIndentedString(walletAlias)).append("\n");
    sb.append("    userLastName: ").append(toIndentedString(userLastName)).append("\n");
    sb.append("    messageToUser: ").append(toIndentedString(messageToUser)).append("\n");
    sb.append("    payinStatus: ").append(toIndentedString(payinStatus)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    codeStatus: ").append(toIndentedString(codeStatus)).append("\n");
    sb.append("    informationStatus: ").append(toIndentedString(informationStatus)).append("\n");
    sb.append("    refundAmount: ").append(toIndentedString(refundAmount)).append("\n");
    sb.append("    createdIp: ").append(toIndentedString(createdIp)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    payinTag: ").append(toIndentedString(payinTag)).append("\n");
    sb.append("    payinDate: ").append(toIndentedString(payinDate)).append("\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    subtotalItems: ").append(toIndentedString(subtotalItems)).append("\n");
    sb.append("    subtotalServices: ").append(toIndentedString(subtotalServices)).append("\n");
    sb.append("    subtotalTax: ").append(toIndentedString(subtotalTax)).append("\n");
    sb.append("    distributorFee: ").append(toIndentedString(distributorFee)).append("\n");
    sb.append("    paymentHtml: ").append(toIndentedString(paymentHtml)).append("\n");
    sb.append("    paymentLanguage: ").append(toIndentedString(paymentLanguage)).append("\n");
    sb.append("    paymentPostUrl: ").append(toIndentedString(paymentPostUrl)).append("\n");
    sb.append("    paymentPostDataUrl: ").append(toIndentedString(paymentPostDataUrl)).append("\n");
    sb.append("    paymentAcceptedUrl: ").append(toIndentedString(paymentAcceptedUrl)).append("\n");
    sb.append("    paymentWaitingUrl: ").append(toIndentedString(paymentWaitingUrl)).append("\n");
    sb.append("    paymentCanceledUrl: ").append(toIndentedString(paymentCanceledUrl)).append("\n");
    sb.append("    paymentRefusedUrl: ").append(toIndentedString(paymentRefusedUrl)).append("\n");
    sb.append("    paymentExceptionUrl: ").append(toIndentedString(paymentExceptionUrl)).append("\n");
    sb.append("    ibanFullname: ").append(toIndentedString(ibanFullname)).append("\n");
    sb.append("    ibanId: ").append(toIndentedString(ibanId)).append("\n");
    sb.append("    ibanBic: ").append(toIndentedString(ibanBic)).append("\n");
    sb.append("    ibanTxEndToEndId: ").append(toIndentedString(ibanTxEndToEndId)).append("\n");
    sb.append("    ibanTxId: ").append(toIndentedString(ibanTxId)).append("\n");
    sb.append("    forwardUrl: ").append(toIndentedString(forwardUrl)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    creditorAddressLine: ").append(toIndentedString(creditorAddressLine)).append("\n");
    sb.append("    creditorCountry: ").append(toIndentedString(creditorCountry)).append("\n");
    sb.append("    creditorIban: ").append(toIndentedString(creditorIban)).append("\n");
    sb.append("    creditorBIC: ").append(toIndentedString(creditorBIC)).append("\n");
    sb.append("    virtualIbanId: ").append(toIndentedString(virtualIbanId)).append("\n");
    sb.append("    virtualIbanReference: ").append(toIndentedString(virtualIbanReference)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payinId");
    openapiFields.add("userId");
    openapiFields.add("walletId");
    openapiFields.add("userFirstName");
    openapiFields.add("walletEventName");
    openapiFields.add("walletAlias");
    openapiFields.add("userLastName");
    openapiFields.add("messageToUser");
    openapiFields.add("payinStatus");
    openapiFields.add("paymentMethodId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("createdDate");
    openapiFields.add("codeStatus");
    openapiFields.add("informationStatus");
    openapiFields.add("refundAmount");
    openapiFields.add("createdIp");
    openapiFields.add("profile");
    openapiFields.add("payinTag");
    openapiFields.add("payinDate");
    openapiFields.add("cartId");
    openapiFields.add("subtotalItems");
    openapiFields.add("subtotalServices");
    openapiFields.add("subtotalTax");
    openapiFields.add("distributorFee");
    openapiFields.add("paymentHtml");
    openapiFields.add("paymentLanguage");
    openapiFields.add("paymentPostUrl");
    openapiFields.add("paymentPostDataUrl");
    openapiFields.add("paymentAcceptedUrl");
    openapiFields.add("paymentWaitingUrl");
    openapiFields.add("paymentCanceledUrl");
    openapiFields.add("paymentRefusedUrl");
    openapiFields.add("paymentExceptionUrl");
    openapiFields.add("ibanFullname");
    openapiFields.add("ibanId");
    openapiFields.add("ibanBic");
    openapiFields.add("ibanTxEndToEndId");
    openapiFields.add("ibanTxId");
    openapiFields.add("forwardUrl");
    openapiFields.add("mandateId");
    openapiFields.add("creditorName");
    openapiFields.add("creditorAddressLine");
    openapiFields.add("creditorCountry");
    openapiFields.add("creditorIban");
    openapiFields.add("creditorBIC");
    openapiFields.add("virtualIbanId");
    openapiFields.add("virtualIbanReference");
    openapiFields.add("additionalData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AcquiringPayin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AcquiringPayin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AcquiringPayin is not found in the empty JSON string", AcquiringPayin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AcquiringPayin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AcquiringPayin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payinId") != null && !jsonObj.get("payinId").isJsonNull()) && !jsonObj.get("payinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if ((jsonObj.get("userFirstName") != null && !jsonObj.get("userFirstName").isJsonNull()) && !jsonObj.get("userFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userFirstName").toString()));
      }
      if ((jsonObj.get("walletEventName") != null && !jsonObj.get("walletEventName").isJsonNull()) && !jsonObj.get("walletEventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletEventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletEventName").toString()));
      }
      if ((jsonObj.get("walletAlias") != null && !jsonObj.get("walletAlias").isJsonNull()) && !jsonObj.get("walletAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletAlias").toString()));
      }
      if ((jsonObj.get("userLastName") != null && !jsonObj.get("userLastName").isJsonNull()) && !jsonObj.get("userLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLastName").toString()));
      }
      if ((jsonObj.get("messageToUser") != null && !jsonObj.get("messageToUser").isJsonNull()) && !jsonObj.get("messageToUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageToUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageToUser").toString()));
      }
      if ((jsonObj.get("payinStatus") != null && !jsonObj.get("payinStatus").isJsonNull()) && !jsonObj.get("payinStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinStatus").toString()));
      }
      // validate the optional field `payinStatus`
      if (jsonObj.get("payinStatus") != null && !jsonObj.get("payinStatus").isJsonNull()) {
        PayinStatusEnum.validateJsonElement(jsonObj.get("payinStatus"));
      }
      if ((jsonObj.get("paymentMethodId") != null && !jsonObj.get("paymentMethodId").isJsonNull()) && !jsonObj.get("paymentMethodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethodId").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("codeStatus") != null && !jsonObj.get("codeStatus").isJsonNull()) && !jsonObj.get("codeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeStatus").toString()));
      }
      if ((jsonObj.get("informationStatus") != null && !jsonObj.get("informationStatus").isJsonNull()) && !jsonObj.get("informationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informationStatus").toString()));
      }
      if ((jsonObj.get("createdIp") != null && !jsonObj.get("createdIp").isJsonNull()) && !jsonObj.get("createdIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdIp").toString()));
      }
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
      if ((jsonObj.get("payinTag") != null && !jsonObj.get("payinTag").isJsonNull()) && !jsonObj.get("payinTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinTag").toString()));
      }
      if ((jsonObj.get("payinDate") != null && !jsonObj.get("payinDate").isJsonNull()) && !jsonObj.get("payinDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinDate").toString()));
      }
      if ((jsonObj.get("subtotalItems") != null && !jsonObj.get("subtotalItems").isJsonNull()) && !jsonObj.get("subtotalItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotalItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotalItems").toString()));
      }
      if ((jsonObj.get("subtotalServices") != null && !jsonObj.get("subtotalServices").isJsonNull()) && !jsonObj.get("subtotalServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotalServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotalServices").toString()));
      }
      if ((jsonObj.get("subtotalTax") != null && !jsonObj.get("subtotalTax").isJsonNull()) && !jsonObj.get("subtotalTax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotalTax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotalTax").toString()));
      }
      if ((jsonObj.get("distributorFee") != null && !jsonObj.get("distributorFee").isJsonNull()) && !jsonObj.get("distributorFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributorFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distributorFee").toString()));
      }
      if ((jsonObj.get("paymentHtml") != null && !jsonObj.get("paymentHtml").isJsonNull()) && !jsonObj.get("paymentHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentHtml").toString()));
      }
      if ((jsonObj.get("paymentLanguage") != null && !jsonObj.get("paymentLanguage").isJsonNull()) && !jsonObj.get("paymentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentLanguage").toString()));
      }
      if ((jsonObj.get("paymentPostUrl") != null && !jsonObj.get("paymentPostUrl").isJsonNull()) && !jsonObj.get("paymentPostUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPostUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPostUrl").toString()));
      }
      if ((jsonObj.get("paymentPostDataUrl") != null && !jsonObj.get("paymentPostDataUrl").isJsonNull()) && !jsonObj.get("paymentPostDataUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPostDataUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPostDataUrl").toString()));
      }
      if ((jsonObj.get("paymentAcceptedUrl") != null && !jsonObj.get("paymentAcceptedUrl").isJsonNull()) && !jsonObj.get("paymentAcceptedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAcceptedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAcceptedUrl").toString()));
      }
      if ((jsonObj.get("paymentWaitingUrl") != null && !jsonObj.get("paymentWaitingUrl").isJsonNull()) && !jsonObj.get("paymentWaitingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentWaitingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentWaitingUrl").toString()));
      }
      if ((jsonObj.get("paymentCanceledUrl") != null && !jsonObj.get("paymentCanceledUrl").isJsonNull()) && !jsonObj.get("paymentCanceledUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCanceledUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCanceledUrl").toString()));
      }
      if ((jsonObj.get("paymentRefusedUrl") != null && !jsonObj.get("paymentRefusedUrl").isJsonNull()) && !jsonObj.get("paymentRefusedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentRefusedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentRefusedUrl").toString()));
      }
      if ((jsonObj.get("paymentExceptionUrl") != null && !jsonObj.get("paymentExceptionUrl").isJsonNull()) && !jsonObj.get("paymentExceptionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentExceptionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentExceptionUrl").toString()));
      }
      if ((jsonObj.get("ibanFullname") != null && !jsonObj.get("ibanFullname").isJsonNull()) && !jsonObj.get("ibanFullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanFullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanFullname").toString()));
      }
      if ((jsonObj.get("ibanId") != null && !jsonObj.get("ibanId").isJsonNull()) && !jsonObj.get("ibanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanId").toString()));
      }
      if ((jsonObj.get("ibanBic") != null && !jsonObj.get("ibanBic").isJsonNull()) && !jsonObj.get("ibanBic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanBic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanBic").toString()));
      }
      if ((jsonObj.get("ibanTxEndToEndId") != null && !jsonObj.get("ibanTxEndToEndId").isJsonNull()) && !jsonObj.get("ibanTxEndToEndId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanTxEndToEndId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanTxEndToEndId").toString()));
      }
      if ((jsonObj.get("ibanTxId") != null && !jsonObj.get("ibanTxId").isJsonNull()) && !jsonObj.get("ibanTxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibanTxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibanTxId").toString()));
      }
      if ((jsonObj.get("forwardUrl") != null && !jsonObj.get("forwardUrl").isJsonNull()) && !jsonObj.get("forwardUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardUrl").toString()));
      }
      if ((jsonObj.get("creditorName") != null && !jsonObj.get("creditorName").isJsonNull()) && !jsonObj.get("creditorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorName").toString()));
      }
      if ((jsonObj.get("creditorAddressLine") != null && !jsonObj.get("creditorAddressLine").isJsonNull()) && !jsonObj.get("creditorAddressLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorAddressLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorAddressLine").toString()));
      }
      if ((jsonObj.get("creditorCountry") != null && !jsonObj.get("creditorCountry").isJsonNull()) && !jsonObj.get("creditorCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorCountry").toString()));
      }
      if ((jsonObj.get("creditorIban") != null && !jsonObj.get("creditorIban").isJsonNull()) && !jsonObj.get("creditorIban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorIban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorIban").toString()));
      }
      if ((jsonObj.get("creditorBIC") != null && !jsonObj.get("creditorBIC").isJsonNull()) && !jsonObj.get("creditorBIC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorBIC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorBIC").toString()));
      }
      if ((jsonObj.get("virtualIbanReference") != null && !jsonObj.get("virtualIbanReference").isJsonNull()) && !jsonObj.get("virtualIbanReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualIbanReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualIbanReference").toString()));
      }
      if ((jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonNull()) && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AcquiringPayin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AcquiringPayin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AcquiringPayin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AcquiringPayin.class));

       return (TypeAdapter<T>) new TypeAdapter<AcquiringPayin>() {
           @Override
           public void write(JsonWriter out, AcquiringPayin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AcquiringPayin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AcquiringPayin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AcquiringPayin
   * @throws IOException if the JSON string is invalid with respect to AcquiringPayin
   */
  public static AcquiringPayin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AcquiringPayin.class);
  }

  /**
   * Convert an instance of AcquiringPayin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

