/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SupportUserObjectClientsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SupportUserObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class SupportUserObject {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_SAML_KEY = "samlKey";
  @SerializedName(SERIALIZED_NAME_SAML_KEY)
  @javax.annotation.Nullable
  private String samlKey;

  public static final String SERIALIZED_NAME_KEY_PAIR_ID = "keyPairId";
  @SerializedName(SERIALIZED_NAME_KEY_PAIR_ID)
  @javax.annotation.Nullable
  private String keyPairId;

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  @javax.annotation.Nullable
  private List<SupportUserObjectClientsInner> clients = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRONG_PWD_ATTEMPTS = "wrongPwdAttempts";
  @SerializedName(SERIALIZED_NAME_WRONG_PWD_ATTEMPTS)
  @javax.annotation.Nullable
  private Integer wrongPwdAttempts;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Object metadata;

  public SupportUserObject() {
  }

  public SupportUserObject id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public SupportUserObject username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public SupportUserObject password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public SupportUserObject samlKey(@javax.annotation.Nullable String samlKey) {
    this.samlKey = samlKey;
    return this;
  }

  /**
   * Get samlKey
   * @return samlKey
   */
  @javax.annotation.Nullable
  public String getSamlKey() {
    return samlKey;
  }

  public void setSamlKey(@javax.annotation.Nullable String samlKey) {
    this.samlKey = samlKey;
  }


  public SupportUserObject keyPairId(@javax.annotation.Nullable String keyPairId) {
    this.keyPairId = keyPairId;
    return this;
  }

  /**
   * Get keyPairId
   * @return keyPairId
   */
  @javax.annotation.Nullable
  public String getKeyPairId() {
    return keyPairId;
  }

  public void setKeyPairId(@javax.annotation.Nullable String keyPairId) {
    this.keyPairId = keyPairId;
  }


  public SupportUserObject clients(@javax.annotation.Nullable List<SupportUserObjectClientsInner> clients) {
    this.clients = clients;
    return this;
  }

  public SupportUserObject addClientsItem(SupportUserObjectClientsInner clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public List<SupportUserObjectClientsInner> getClients() {
    return clients;
  }

  public void setClients(@javax.annotation.Nullable List<SupportUserObjectClientsInner> clients) {
    this.clients = clients;
  }


  public SupportUserObject wrongPwdAttempts(@javax.annotation.Nullable Integer wrongPwdAttempts) {
    this.wrongPwdAttempts = wrongPwdAttempts;
    return this;
  }

  /**
   * Get wrongPwdAttempts
   * @return wrongPwdAttempts
   */
  @javax.annotation.Nullable
  public Integer getWrongPwdAttempts() {
    return wrongPwdAttempts;
  }

  public void setWrongPwdAttempts(@javax.annotation.Nullable Integer wrongPwdAttempts) {
    this.wrongPwdAttempts = wrongPwdAttempts;
  }


  public SupportUserObject metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportUserObject supportUserObject = (SupportUserObject) o;
    return Objects.equals(this.id, supportUserObject.id) &&
        Objects.equals(this.username, supportUserObject.username) &&
        Objects.equals(this.password, supportUserObject.password) &&
        Objects.equals(this.samlKey, supportUserObject.samlKey) &&
        Objects.equals(this.keyPairId, supportUserObject.keyPairId) &&
        Objects.equals(this.clients, supportUserObject.clients) &&
        Objects.equals(this.wrongPwdAttempts, supportUserObject.wrongPwdAttempts) &&
        Objects.equals(this.metadata, supportUserObject.metadata);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, password, samlKey, keyPairId, clients, wrongPwdAttempts, metadata);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportUserObject {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    samlKey: ").append(toIndentedString(samlKey)).append("\n");
    sb.append("    keyPairId: ").append(toIndentedString(keyPairId)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    wrongPwdAttempts: ").append(toIndentedString(wrongPwdAttempts)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("samlKey");
    openapiFields.add("keyPairId");
    openapiFields.add("clients");
    openapiFields.add("wrongPwdAttempts");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupportUserObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportUserObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportUserObject is not found in the empty JSON string", SupportUserObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportUserObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportUserObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("samlKey") != null && !jsonObj.get("samlKey").isJsonNull()) && !jsonObj.get("samlKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samlKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samlKey").toString()));
      }
      if ((jsonObj.get("keyPairId") != null && !jsonObj.get("keyPairId").isJsonNull()) && !jsonObj.get("keyPairId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPairId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyPairId").toString()));
      }
      if (jsonObj.get("clients") != null && !jsonObj.get("clients").isJsonNull()) {
        JsonArray jsonArrayclients = jsonObj.getAsJsonArray("clients");
        if (jsonArrayclients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
          }

          // validate the optional field `clients` (array)
          for (int i = 0; i < jsonArrayclients.size(); i++) {
            SupportUserObjectClientsInner.validateJsonElement(jsonArrayclients.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportUserObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportUserObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportUserObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportUserObject.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportUserObject>() {
           @Override
           public void write(JsonWriter out, SupportUserObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportUserObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupportUserObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupportUserObject
   * @throws IOException if the JSON string is invalid with respect to SupportUserObject
   */
  public static SupportUserObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportUserObject.class);
  }

  /**
   * Convert an instance of SupportUserObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

