/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Chargeback
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class Chargeback {
  public static final String SERIALIZED_NAME_PAYIN_ID = "payinId";
  @SerializedName(SERIALIZED_NAME_PAYIN_ID)
  @javax.annotation.Nullable
  private String payinId;

  public static final String SERIALIZED_NAME_PAYIN_REFUND_ID = "payinRefundId";
  @SerializedName(SERIALIZED_NAME_PAYIN_REFUND_ID)
  @javax.annotation.Nullable
  private String payinRefundId;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "transactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  @javax.annotation.Nullable
  private String transactionReference;

  public static final String SERIALIZED_NAME_PAYIN_TAG = "payinTag";
  @SerializedName(SERIALIZED_NAME_PAYIN_TAG)
  @javax.annotation.Nullable
  private String payinTag;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  @javax.annotation.Nullable
  private List<String> additionalData = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHARGEBACK_REASON = "chargebackReason";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_REASON)
  @javax.annotation.Nullable
  private String chargebackReason;

  public Chargeback() {
  }

  public Chargeback payinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
    return this;
  }

  /**
   * Get payinId
   * @return payinId
   */
  @javax.annotation.Nullable
  public String getPayinId() {
    return payinId;
  }

  public void setPayinId(@javax.annotation.Nullable String payinId) {
    this.payinId = payinId;
  }


  public Chargeback payinRefundId(@javax.annotation.Nullable String payinRefundId) {
    this.payinRefundId = payinRefundId;
    return this;
  }

  /**
   * Get payinRefundId
   * @return payinRefundId
   */
  @javax.annotation.Nullable
  public String getPayinRefundId() {
    return payinRefundId;
  }

  public void setPayinRefundId(@javax.annotation.Nullable String payinRefundId) {
    this.payinRefundId = payinRefundId;
  }


  public Chargeback transactionReference(@javax.annotation.Nullable String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * Get transactionReference
   * @return transactionReference
   */
  @javax.annotation.Nullable
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(@javax.annotation.Nullable String transactionReference) {
    this.transactionReference = transactionReference;
  }


  public Chargeback payinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
    return this;
  }

  /**
   * Get payinTag
   * @return payinTag
   */
  @javax.annotation.Nullable
  public String getPayinTag() {
    return payinTag;
  }

  public void setPayinTag(@javax.annotation.Nullable String payinTag) {
    this.payinTag = payinTag;
  }


  public Chargeback additionalData(@javax.annotation.Nullable List<String> additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  public Chargeback addAdditionalDataItem(String additionalDataItem) {
    if (this.additionalData == null) {
      this.additionalData = new ArrayList<>();
    }
    this.additionalData.add(additionalDataItem);
    return this;
  }

  /**
   * Get additionalData
   * @return additionalData
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(@javax.annotation.Nullable List<String> additionalData) {
    this.additionalData = additionalData;
  }


  public Chargeback chargebackReason(@javax.annotation.Nullable String chargebackReason) {
    this.chargebackReason = chargebackReason;
    return this;
  }

  /**
   * Get chargebackReason
   * @return chargebackReason
   */
  @javax.annotation.Nullable
  public String getChargebackReason() {
    return chargebackReason;
  }

  public void setChargebackReason(@javax.annotation.Nullable String chargebackReason) {
    this.chargebackReason = chargebackReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chargeback chargeback = (Chargeback) o;
    return Objects.equals(this.payinId, chargeback.payinId) &&
        Objects.equals(this.payinRefundId, chargeback.payinRefundId) &&
        Objects.equals(this.transactionReference, chargeback.transactionReference) &&
        Objects.equals(this.payinTag, chargeback.payinTag) &&
        Objects.equals(this.additionalData, chargeback.additionalData) &&
        Objects.equals(this.chargebackReason, chargeback.chargebackReason);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(payinId, payinRefundId, transactionReference, payinTag, additionalData, chargebackReason);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chargeback {\n");
    sb.append("    payinId: ").append(toIndentedString(payinId)).append("\n");
    sb.append("    payinRefundId: ").append(toIndentedString(payinRefundId)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("    payinTag: ").append(toIndentedString(payinTag)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    chargebackReason: ").append(toIndentedString(chargebackReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payinId");
    openapiFields.add("payinRefundId");
    openapiFields.add("transactionReference");
    openapiFields.add("payinTag");
    openapiFields.add("additionalData");
    openapiFields.add("chargebackReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Chargeback
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Chargeback.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Chargeback is not found in the empty JSON string", Chargeback.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Chargeback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Chargeback` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("payinId") != null && !jsonObj.get("payinId").isJsonNull()) && !jsonObj.get("payinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinId").toString()));
      }
      if ((jsonObj.get("payinRefundId") != null && !jsonObj.get("payinRefundId").isJsonNull()) && !jsonObj.get("payinRefundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinRefundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinRefundId").toString()));
      }
      if ((jsonObj.get("transactionReference") != null && !jsonObj.get("transactionReference").isJsonNull()) && !jsonObj.get("transactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionReference").toString()));
      }
      if ((jsonObj.get("payinTag") != null && !jsonObj.get("payinTag").isJsonNull()) && !jsonObj.get("payinTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payinTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payinTag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonNull() && !jsonObj.get("additionalData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be an array in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      if ((jsonObj.get("chargebackReason") != null && !jsonObj.get("chargebackReason").isJsonNull()) && !jsonObj.get("chargebackReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargebackReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargebackReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Chargeback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Chargeback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Chargeback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Chargeback.class));

       return (TypeAdapter<T>) new TypeAdapter<Chargeback>() {
           @Override
           public void write(JsonWriter out, Chargeback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Chargeback read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Chargeback given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Chargeback
   * @throws IOException if the JSON string is invalid with respect to Chargeback
   */
  public static Chargeback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Chargeback.class);
  }

  /**
   * Convert an instance of Chargeback to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

