/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetRawStatement200ResponseFirstBalance;
import org.openapitools.client.model.GetRawStatement200ResponseLastBalance;
import org.openapitools.client.model.GetRawStatement200ResponseOperationsInner;
import org.openapitools.client.model.GetRawStatement200ResponseUser;
import org.openapitools.client.model.GetRawStatement200ResponseWallet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRawStatement200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class GetRawStatement200Response {
  public static final String SERIALIZED_NAME_FIRST_BALANCE = "firstBalance";
  @SerializedName(SERIALIZED_NAME_FIRST_BALANCE)
  @javax.annotation.Nullable
  private GetRawStatement200ResponseFirstBalance firstBalance;

  public static final String SERIALIZED_NAME_LAST_BALANCE = "lastBalance";
  @SerializedName(SERIALIZED_NAME_LAST_BALANCE)
  @javax.annotation.Nullable
  private GetRawStatement200ResponseLastBalance lastBalance;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  @javax.annotation.Nullable
  private List<GetRawStatement200ResponseOperationsInner> operations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_DEBIT = "totalDebit";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEBIT)
  @javax.annotation.Nullable
  private String totalDebit;

  public static final String SERIALIZED_NAME_TOTAL_CREDIT = "totalCredit";
  @SerializedName(SERIALIZED_NAME_TOTAL_CREDIT)
  @javax.annotation.Nullable
  private String totalCredit;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private GetRawStatement200ResponseUser user;

  public static final String SERIALIZED_NAME_WALLET = "wallet";
  @SerializedName(SERIALIZED_NAME_WALLET)
  @javax.annotation.Nullable
  private GetRawStatement200ResponseWallet wallet;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_FEES = "totalAmountFees";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_FEES)
  @javax.annotation.Nullable
  private Integer totalAmountFees;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CREDIT_NOTE = "totalAmountCreditNote";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CREDIT_NOTE)
  @javax.annotation.Nullable
  private Integer totalAmountCreditNote;

  public GetRawStatement200Response() {
  }

  public GetRawStatement200Response firstBalance(@javax.annotation.Nullable GetRawStatement200ResponseFirstBalance firstBalance) {
    this.firstBalance = firstBalance;
    return this;
  }

  /**
   * Get firstBalance
   * @return firstBalance
   */
  @javax.annotation.Nullable
  public GetRawStatement200ResponseFirstBalance getFirstBalance() {
    return firstBalance;
  }

  public void setFirstBalance(@javax.annotation.Nullable GetRawStatement200ResponseFirstBalance firstBalance) {
    this.firstBalance = firstBalance;
  }


  public GetRawStatement200Response lastBalance(@javax.annotation.Nullable GetRawStatement200ResponseLastBalance lastBalance) {
    this.lastBalance = lastBalance;
    return this;
  }

  /**
   * Get lastBalance
   * @return lastBalance
   */
  @javax.annotation.Nullable
  public GetRawStatement200ResponseLastBalance getLastBalance() {
    return lastBalance;
  }

  public void setLastBalance(@javax.annotation.Nullable GetRawStatement200ResponseLastBalance lastBalance) {
    this.lastBalance = lastBalance;
  }


  public GetRawStatement200Response operations(@javax.annotation.Nullable List<GetRawStatement200ResponseOperationsInner> operations) {
    this.operations = operations;
    return this;
  }

  public GetRawStatement200Response addOperationsItem(GetRawStatement200ResponseOperationsInner operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * Get operations
   * @return operations
   */
  @javax.annotation.Nullable
  public List<GetRawStatement200ResponseOperationsInner> getOperations() {
    return operations;
  }

  public void setOperations(@javax.annotation.Nullable List<GetRawStatement200ResponseOperationsInner> operations) {
    this.operations = operations;
  }


  public GetRawStatement200Response totalDebit(@javax.annotation.Nullable String totalDebit) {
    this.totalDebit = totalDebit;
    return this;
  }

  /**
   * Get totalDebit
   * @return totalDebit
   */
  @javax.annotation.Nullable
  public String getTotalDebit() {
    return totalDebit;
  }

  public void setTotalDebit(@javax.annotation.Nullable String totalDebit) {
    this.totalDebit = totalDebit;
  }


  public GetRawStatement200Response totalCredit(@javax.annotation.Nullable String totalCredit) {
    this.totalCredit = totalCredit;
    return this;
  }

  /**
   * Get totalCredit
   * @return totalCredit
   */
  @javax.annotation.Nullable
  public String getTotalCredit() {
    return totalCredit;
  }

  public void setTotalCredit(@javax.annotation.Nullable String totalCredit) {
    this.totalCredit = totalCredit;
  }


  public GetRawStatement200Response user(@javax.annotation.Nullable GetRawStatement200ResponseUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public GetRawStatement200ResponseUser getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable GetRawStatement200ResponseUser user) {
    this.user = user;
  }


  public GetRawStatement200Response wallet(@javax.annotation.Nullable GetRawStatement200ResponseWallet wallet) {
    this.wallet = wallet;
    return this;
  }

  /**
   * Get wallet
   * @return wallet
   */
  @javax.annotation.Nullable
  public GetRawStatement200ResponseWallet getWallet() {
    return wallet;
  }

  public void setWallet(@javax.annotation.Nullable GetRawStatement200ResponseWallet wallet) {
    this.wallet = wallet;
  }


  public GetRawStatement200Response totalAmountFees(@javax.annotation.Nullable Integer totalAmountFees) {
    this.totalAmountFees = totalAmountFees;
    return this;
  }

  /**
   * Get totalAmountFees
   * @return totalAmountFees
   */
  @javax.annotation.Nullable
  public Integer getTotalAmountFees() {
    return totalAmountFees;
  }

  public void setTotalAmountFees(@javax.annotation.Nullable Integer totalAmountFees) {
    this.totalAmountFees = totalAmountFees;
  }


  public GetRawStatement200Response totalAmountCreditNote(@javax.annotation.Nullable Integer totalAmountCreditNote) {
    this.totalAmountCreditNote = totalAmountCreditNote;
    return this;
  }

  /**
   * Get totalAmountCreditNote
   * @return totalAmountCreditNote
   */
  @javax.annotation.Nullable
  public Integer getTotalAmountCreditNote() {
    return totalAmountCreditNote;
  }

  public void setTotalAmountCreditNote(@javax.annotation.Nullable Integer totalAmountCreditNote) {
    this.totalAmountCreditNote = totalAmountCreditNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRawStatement200Response getRawStatement200Response = (GetRawStatement200Response) o;
    return Objects.equals(this.firstBalance, getRawStatement200Response.firstBalance) &&
        Objects.equals(this.lastBalance, getRawStatement200Response.lastBalance) &&
        Objects.equals(this.operations, getRawStatement200Response.operations) &&
        Objects.equals(this.totalDebit, getRawStatement200Response.totalDebit) &&
        Objects.equals(this.totalCredit, getRawStatement200Response.totalCredit) &&
        Objects.equals(this.user, getRawStatement200Response.user) &&
        Objects.equals(this.wallet, getRawStatement200Response.wallet) &&
        Objects.equals(this.totalAmountFees, getRawStatement200Response.totalAmountFees) &&
        Objects.equals(this.totalAmountCreditNote, getRawStatement200Response.totalAmountCreditNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstBalance, lastBalance, operations, totalDebit, totalCredit, user, wallet, totalAmountFees, totalAmountCreditNote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRawStatement200Response {\n");
    sb.append("    firstBalance: ").append(toIndentedString(firstBalance)).append("\n");
    sb.append("    lastBalance: ").append(toIndentedString(lastBalance)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    totalDebit: ").append(toIndentedString(totalDebit)).append("\n");
    sb.append("    totalCredit: ").append(toIndentedString(totalCredit)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("    totalAmountFees: ").append(toIndentedString(totalAmountFees)).append("\n");
    sb.append("    totalAmountCreditNote: ").append(toIndentedString(totalAmountCreditNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstBalance");
    openapiFields.add("lastBalance");
    openapiFields.add("operations");
    openapiFields.add("totalDebit");
    openapiFields.add("totalCredit");
    openapiFields.add("user");
    openapiFields.add("wallet");
    openapiFields.add("totalAmountFees");
    openapiFields.add("totalAmountCreditNote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRawStatement200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRawStatement200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRawStatement200Response is not found in the empty JSON string", GetRawStatement200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRawStatement200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRawStatement200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstBalance`
      if (jsonObj.get("firstBalance") != null && !jsonObj.get("firstBalance").isJsonNull()) {
        GetRawStatement200ResponseFirstBalance.validateJsonElement(jsonObj.get("firstBalance"));
      }
      // validate the optional field `lastBalance`
      if (jsonObj.get("lastBalance") != null && !jsonObj.get("lastBalance").isJsonNull()) {
        GetRawStatement200ResponseLastBalance.validateJsonElement(jsonObj.get("lastBalance"));
      }
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull()) {
        JsonArray jsonArrayoperations = jsonObj.getAsJsonArray("operations");
        if (jsonArrayoperations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operations` to be an array in the JSON string but got `%s`", jsonObj.get("operations").toString()));
          }

          // validate the optional field `operations` (array)
          for (int i = 0; i < jsonArrayoperations.size(); i++) {
            GetRawStatement200ResponseOperationsInner.validateJsonElement(jsonArrayoperations.get(i));
          };
        }
      }
      if ((jsonObj.get("totalDebit") != null && !jsonObj.get("totalDebit").isJsonNull()) && !jsonObj.get("totalDebit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalDebit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalDebit").toString()));
      }
      if ((jsonObj.get("totalCredit") != null && !jsonObj.get("totalCredit").isJsonNull()) && !jsonObj.get("totalCredit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCredit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCredit").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        GetRawStatement200ResponseUser.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `wallet`
      if (jsonObj.get("wallet") != null && !jsonObj.get("wallet").isJsonNull()) {
        GetRawStatement200ResponseWallet.validateJsonElement(jsonObj.get("wallet"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRawStatement200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRawStatement200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRawStatement200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRawStatement200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRawStatement200Response>() {
           @Override
           public void write(JsonWriter out, GetRawStatement200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRawStatement200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRawStatement200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRawStatement200Response
   * @throws IOException if the JSON string is invalid with respect to GetRawStatement200Response
   */
  public static GetRawStatement200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRawStatement200Response.class);
  }

  /**
   * Convert an instance of GetRawStatement200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

