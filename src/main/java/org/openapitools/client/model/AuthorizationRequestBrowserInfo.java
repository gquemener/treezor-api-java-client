/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthorizationRequestBrowserInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class AuthorizationRequestBrowserInfo {
  public static final String SERIALIZED_NAME_JAVA_ENABLED = "javaEnabled";
  @SerializedName(SERIALIZED_NAME_JAVA_ENABLED)
  @javax.annotation.Nullable
  private Boolean javaEnabled;

  public static final String SERIALIZED_NAME_JAVASCRIPT_ENABLED = "javascriptEnabled";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT_ENABLED)
  @javax.annotation.Nullable
  private Boolean javascriptEnabled;

  public static final String SERIALIZED_NAME_IPADDR = "ipaddr";
  @SerializedName(SERIALIZED_NAME_IPADDR)
  @javax.annotation.Nullable
  private String ipaddr;

  public static final String SERIALIZED_NAME_HTTP_ACCEPT = "httpAccept";
  @SerializedName(SERIALIZED_NAME_HTTP_ACCEPT)
  @javax.annotation.Nullable
  private String httpAccept;

  public static final String SERIALIZED_NAME_HTTP_USER_AGENT = "httpUserAgent";
  @SerializedName(SERIALIZED_NAME_HTTP_USER_AGENT)
  @javax.annotation.Nullable
  private String httpUserAgent;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  /**
   * Value representing the depth of the color palette to display an image, in bits/pixel 
   */
  @JsonAdapter(ColorDepthEnum.Adapter.class)
  public enum ColorDepthEnum {
    NUMBER_1(1),
    
    NUMBER_4(4),
    
    NUMBER_8(8),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_32(32),
    
    NUMBER_48(48);

    private Integer value;

    ColorDepthEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorDepthEnum fromValue(Integer value) {
      for (ColorDepthEnum b : ColorDepthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorDepthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorDepthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorDepthEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ColorDepthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ColorDepthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR_DEPTH = "colorDepth";
  @SerializedName(SERIALIZED_NAME_COLOR_DEPTH)
  @javax.annotation.Nullable
  private ColorDepthEnum colorDepth;

  public static final String SERIALIZED_NAME_SCREEN_HEIGHT = "screenHeight";
  @SerializedName(SERIALIZED_NAME_SCREEN_HEIGHT)
  @javax.annotation.Nullable
  private Integer screenHeight;

  public static final String SERIALIZED_NAME_SCREEN_WIDTH = "screenWidth";
  @SerializedName(SERIALIZED_NAME_SCREEN_WIDTH)
  @javax.annotation.Nullable
  private Integer screenWidth;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_DEVICE_FINGERPRINT = "deviceFingerprint";
  @SerializedName(SERIALIZED_NAME_DEVICE_FINGERPRINT)
  @javax.annotation.Nullable
  private String deviceFingerprint;

  public AuthorizationRequestBrowserInfo() {
  }

  public AuthorizationRequestBrowserInfo javaEnabled(@javax.annotation.Nullable Boolean javaEnabled) {
    this.javaEnabled = javaEnabled;
    return this;
  }

  /**
   * Represents the ability of the device&#39;s browser to run Java, when applicable 
   * @return javaEnabled
   */
  @javax.annotation.Nullable
  public Boolean getJavaEnabled() {
    return javaEnabled;
  }

  public void setJavaEnabled(@javax.annotation.Nullable Boolean javaEnabled) {
    this.javaEnabled = javaEnabled;
  }


  public AuthorizationRequestBrowserInfo javascriptEnabled(@javax.annotation.Nullable Boolean javascriptEnabled) {
    this.javascriptEnabled = javascriptEnabled;
    return this;
  }

  /**
   * Represents the ability for the client&#39;s browser to run JavaScript 
   * @return javascriptEnabled
   */
  @javax.annotation.Nullable
  public Boolean getJavascriptEnabled() {
    return javascriptEnabled;
  }

  public void setJavascriptEnabled(@javax.annotation.Nullable Boolean javascriptEnabled) {
    this.javascriptEnabled = javascriptEnabled;
  }


  public AuthorizationRequestBrowserInfo ipaddr(@javax.annotation.Nullable String ipaddr) {
    this.ipaddr = ipaddr;
    return this;
  }

  /**
   * The IP address of the end-user making a top-up
   * @return ipaddr
   */
  @javax.annotation.Nullable
  public String getIpaddr() {
    return ipaddr;
  }

  public void setIpaddr(@javax.annotation.Nullable String ipaddr) {
    this.ipaddr = ipaddr;
  }


  public AuthorizationRequestBrowserInfo httpAccept(@javax.annotation.Nullable String httpAccept) {
    this.httpAccept = httpAccept;
    return this;
  }

  /**
   * This element must include the exact content of the HTTP Accept header, as sent to the Treezor customer from the end-user 
   * @return httpAccept
   */
  @javax.annotation.Nullable
  public String getHttpAccept() {
    return httpAccept;
  }

  public void setHttpAccept(@javax.annotation.Nullable String httpAccept) {
    this.httpAccept = httpAccept;
  }


  public AuthorizationRequestBrowserInfo httpUserAgent(@javax.annotation.Nullable String httpUserAgent) {
    this.httpUserAgent = httpUserAgent;
    return this;
  }

  /**
   * This element must include the exact content of the User_Agent HTTP header, as sent to the Treezor customer from the end-user 
   * @return httpUserAgent
   */
  @javax.annotation.Nullable
  public String getHttpUserAgent() {
    return httpUserAgent;
  }

  public void setHttpUserAgent(@javax.annotation.Nullable String httpUserAgent) {
    this.httpUserAgent = httpUserAgent;
  }


  public AuthorizationRequestBrowserInfo language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Value representing the client&#39;s browser language as defined in IETF-BCP47 
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public AuthorizationRequestBrowserInfo colorDepth(@javax.annotation.Nullable ColorDepthEnum colorDepth) {
    this.colorDepth = colorDepth;
    return this;
  }

  /**
   * Value representing the depth of the color palette to display an image, in bits/pixel 
   * @return colorDepth
   */
  @javax.annotation.Nullable
  public ColorDepthEnum getColorDepth() {
    return colorDepth;
  }

  public void setColorDepth(@javax.annotation.Nullable ColorDepthEnum colorDepth) {
    this.colorDepth = colorDepth;
  }


  public AuthorizationRequestBrowserInfo screenHeight(@javax.annotation.Nullable Integer screenHeight) {
    this.screenHeight = screenHeight;
    return this;
  }

  /**
   * Total height of the device screen (in pixels), when applicable
   * @return screenHeight
   */
  @javax.annotation.Nullable
  public Integer getScreenHeight() {
    return screenHeight;
  }

  public void setScreenHeight(@javax.annotation.Nullable Integer screenHeight) {
    this.screenHeight = screenHeight;
  }


  public AuthorizationRequestBrowserInfo screenWidth(@javax.annotation.Nullable Integer screenWidth) {
    this.screenWidth = screenWidth;
    return this;
  }

  /**
   * Total width of the end-user screen (in pixels)
   * @return screenWidth
   */
  @javax.annotation.Nullable
  public Integer getScreenWidth() {
    return screenWidth;
  }

  public void setScreenWidth(@javax.annotation.Nullable Integer screenWidth) {
    this.screenWidth = screenWidth;
  }


  public AuthorizationRequestBrowserInfo timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Time difference in minutes between UTC and cardholder&#39;s browser local time 
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public AuthorizationRequestBrowserInfo deviceFingerprint(@javax.annotation.Nullable String deviceFingerprint) {
    this.deviceFingerprint = deviceFingerprint;
    return this;
  }

  /**
   * Get deviceFingerprint
   * @return deviceFingerprint
   */
  @javax.annotation.Nullable
  public String getDeviceFingerprint() {
    return deviceFingerprint;
  }

  public void setDeviceFingerprint(@javax.annotation.Nullable String deviceFingerprint) {
    this.deviceFingerprint = deviceFingerprint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationRequestBrowserInfo authorizationRequestBrowserInfo = (AuthorizationRequestBrowserInfo) o;
    return Objects.equals(this.javaEnabled, authorizationRequestBrowserInfo.javaEnabled) &&
        Objects.equals(this.javascriptEnabled, authorizationRequestBrowserInfo.javascriptEnabled) &&
        Objects.equals(this.ipaddr, authorizationRequestBrowserInfo.ipaddr) &&
        Objects.equals(this.httpAccept, authorizationRequestBrowserInfo.httpAccept) &&
        Objects.equals(this.httpUserAgent, authorizationRequestBrowserInfo.httpUserAgent) &&
        Objects.equals(this.language, authorizationRequestBrowserInfo.language) &&
        Objects.equals(this.colorDepth, authorizationRequestBrowserInfo.colorDepth) &&
        Objects.equals(this.screenHeight, authorizationRequestBrowserInfo.screenHeight) &&
        Objects.equals(this.screenWidth, authorizationRequestBrowserInfo.screenWidth) &&
        Objects.equals(this.timezone, authorizationRequestBrowserInfo.timezone) &&
        Objects.equals(this.deviceFingerprint, authorizationRequestBrowserInfo.deviceFingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(javaEnabled, javascriptEnabled, ipaddr, httpAccept, httpUserAgent, language, colorDepth, screenHeight, screenWidth, timezone, deviceFingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationRequestBrowserInfo {\n");
    sb.append("    javaEnabled: ").append(toIndentedString(javaEnabled)).append("\n");
    sb.append("    javascriptEnabled: ").append(toIndentedString(javascriptEnabled)).append("\n");
    sb.append("    ipaddr: ").append(toIndentedString(ipaddr)).append("\n");
    sb.append("    httpAccept: ").append(toIndentedString(httpAccept)).append("\n");
    sb.append("    httpUserAgent: ").append(toIndentedString(httpUserAgent)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    colorDepth: ").append(toIndentedString(colorDepth)).append("\n");
    sb.append("    screenHeight: ").append(toIndentedString(screenHeight)).append("\n");
    sb.append("    screenWidth: ").append(toIndentedString(screenWidth)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    deviceFingerprint: ").append(toIndentedString(deviceFingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("javaEnabled");
    openapiFields.add("javascriptEnabled");
    openapiFields.add("ipaddr");
    openapiFields.add("httpAccept");
    openapiFields.add("httpUserAgent");
    openapiFields.add("language");
    openapiFields.add("colorDepth");
    openapiFields.add("screenHeight");
    openapiFields.add("screenWidth");
    openapiFields.add("timezone");
    openapiFields.add("deviceFingerprint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizationRequestBrowserInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationRequestBrowserInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationRequestBrowserInfo is not found in the empty JSON string", AuthorizationRequestBrowserInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationRequestBrowserInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationRequestBrowserInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipaddr") != null && !jsonObj.get("ipaddr").isJsonNull()) && !jsonObj.get("ipaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipaddr").toString()));
      }
      if ((jsonObj.get("httpAccept") != null && !jsonObj.get("httpAccept").isJsonNull()) && !jsonObj.get("httpAccept").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpAccept` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpAccept").toString()));
      }
      if ((jsonObj.get("httpUserAgent") != null && !jsonObj.get("httpUserAgent").isJsonNull()) && !jsonObj.get("httpUserAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpUserAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpUserAgent").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `colorDepth`
      if (jsonObj.get("colorDepth") != null && !jsonObj.get("colorDepth").isJsonNull()) {
        ColorDepthEnum.validateJsonElement(jsonObj.get("colorDepth"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("deviceFingerprint") != null && !jsonObj.get("deviceFingerprint").isJsonNull()) && !jsonObj.get("deviceFingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceFingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceFingerprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationRequestBrowserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationRequestBrowserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationRequestBrowserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationRequestBrowserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationRequestBrowserInfo>() {
           @Override
           public void write(JsonWriter out, AuthorizationRequestBrowserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationRequestBrowserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizationRequestBrowserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizationRequestBrowserInfo
   * @throws IOException if the JSON string is invalid with respect to AuthorizationRequestBrowserInfo
   */
  public static AuthorizationRequestBrowserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationRequestBrowserInfo.class);
  }

  /**
   * Convert an instance of AuthorizationRequestBrowserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

