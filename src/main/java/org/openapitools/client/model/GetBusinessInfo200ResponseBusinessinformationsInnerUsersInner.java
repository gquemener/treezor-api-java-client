/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner {
  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  @javax.annotation.Nullable
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  @javax.annotation.Nullable
  private String lastname;

  public static final String SERIALIZED_NAME_FULLNAMES = "fullnames";
  @SerializedName(SERIALIZED_NAME_FULLNAMES)
  @javax.annotation.Nullable
  private String fullnames;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  @javax.annotation.Nullable
  private String birthday;

  /**
   * Representative&#39;s position in company
   */
  @JsonAdapter(ParentTypeEnum.Adapter.class)
  public enum ParentTypeEnum {
    HONORARY_PRESIDENT("Honorary president"),
    
    NOT_ASSOCIATED_MANAGER("Not associated manager"),
    
    PRESIDENT_OF_THE_CONTROL_COUNCIL("President of the control council"),
    
    MEMBER_OF_THE_MANAGEMENT_BOARD("Member of the management board"),
    
    MEMBER_OF_THE_SUPERVISORY_COUNCIL("Member of the supervisory council"),
    
    MEMBER_OF_THE_CONTROL_COMMITTEE("Member of the control committee"),
    
    PARTNER("Partner"),
    
    MANAGEMENT_ADVISOR_("Management advisor "),
    
    DEPUTY_MANAGING_DIRECTOR("Deputy managing director"),
    
    VICE_PRESIDENT_OF_THE_MANAGEMENT_BOARD("Vice-president of the management board"),
    
    VICE_PRESIDENT_OF_THE_SUPERVISORY_COUNCIL("Vice-president of the supervisory council"),
    
    DEVELOPER("Developer"),
    
    OTHER_MANAGER("Other manager"),
    
    RECEIVER("Receiver"),
    
    AUTHORIZED_AGENT("Authorized agent"),
    
    PERSON_IN_CHARGE_ABROAD("Person in charge abroad"),
    
    REPRESENTATIVE_IN_FRANCE("Representative in France"),
    
    MEMBER_OF_THE_MANAGEMENT_COUNCIL("Member of the management council"),
    
    MEMBER_OF_THE_CONTROL_COUNCIL("Member of the control council"),
    
    TREASURER("Treasurer"),
    
    SECRETARY("Secretary"),
    
    MEMBER("Member"),
    
    ADMINISTRATIVE_DIRECTOR("Administrative director"),
    
    SALES_DIRECTOR("Sales director"),
    
    FINANCIAL_DIRECTOR("Financial director"),
    
    CHIEF_TECHNICAL_OFFICER("Chief Technical Officer"),
    
    GENERAL_SECRETARY("General secretary"),
    
    CHIEF_ACCOUNTANT("Chief accountant"),
    
    GUARDIAN("Guardian"),
    
    PLAN_COMMISSIONER_("Plan commissioner "),
    
    MANAGEMENT_AGENT("Management agent"),
    
    CONCORDAT_COMMISSIONER("Concordat commissioner"),
    
    REPRESENTATIVE_OF_THE_CREDITORS("Representative of the creditors"),
    
    JUDICIAL_REPRESENTATIVE("Judicial representative"),
    
    SUBSTITUTE_JUDGE_COMMISSIONER("Substitute judge-commissioner"),
    
    JUDGE_COMMISSIONER("Judge-commissioner"),
    
    RECEIVER_REPRESENTATIVE_OF_THE_CREDITORS("Receiver/representative of the creditors"),
    
    CONCILIATOR("Conciliator"),
    
    AUDITOR("Auditor"),
    
    STATUTORY_AUDITOR("Statutory auditor"),
    
    SUPERVISION_COMMISSIONER("Supervision commissioner"),
    
    DEPUTY_AUDITOR("Deputy auditor"),
    
    SPOUSE_ASSOCIATE("Spouse-associate"),
    
    ACCOUNTS_CONTROLLER("Accounts controller"),
    
    CENSOR("Censor"),
    
    CHIEF_EXECUTIVE_OFFICER("Chief Executive Officer"),
    
    PRESIDENT("President"),
    
    CHAIRMAN_OF_THE_BOARD("Chairman of the Board"),
    
    GOVERNOR("Governor"),
    
    DEPUTY_GOVERNOR("Deputy governor"),
    
    PERSON_HAVING_THE_POWER_TO_USUALLY_INVOLVE_THE_COMPANY("Person having the power to usually involve the company"),
    
    MANAGER("Manager"),
    
    CO_MANAGING_PARTNER("Co-managing partner"),
    
    MANAGING_DIRECTOR("Managing director"),
    
    MANAGING_DIRECTOR_NOT_ADMINISTRATOR("Managing director not administrator"),
    
    UNIQUE_MANAGING_DIRECTOR("Unique managing director"),
    
    DELEGATED_MANAGING_DIRECTOR("Delegated managing director"),
    
    VICE_PRESIDENT("Vice-president"),
    
    ADMINISTRATOR("Administrator"),
    
    DELEGATED_ADMINISTRATOR("Delegated administrator"),
    
    PRESIDENT_OF_THE_MANAGEMENT_BOARD("President of the management board"),
    
    PRESIDENT_OF_THE_SUPERVISORY_COUNCIL("President of the supervisory council"),
    
    ACTIVE_PARTNER("Active partner"),
    
    MANAGEMENT_CONTROLLER("Management controller"),
    
    LIQUIDATOR("Liquidator"),
    
    TEMPORARY_ADMINISTRATOR("Temporary administrator"),
    
    REPRESENTATIVE_IN_FRANCE_OF_A_FOREIGN_COMPANY("Representative in France of a foreign company"),
    
    PERSONAL_BUSINESS_MANAGER("Personal business manager");

    private String value;

    ParentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParentTypeEnum fromValue(String value) {
      for (ParentTypeEnum b : ParentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ParentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARENT_TYPE = "parentType";
  @SerializedName(SERIALIZED_NAME_PARENT_TYPE)
  @javax.annotation.Nullable
  private ParentTypeEnum parentType;

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner() {
  }

  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner firstname(@javax.annotation.Nullable String firstname) {
    this.firstname = firstname;
    return this;
  }

  /**
   * Representative&#39;s first name.
   * @return firstname
   */
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(@javax.annotation.Nullable String firstname) {
    this.firstname = firstname;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner lastname(@javax.annotation.Nullable String lastname) {
    this.lastname = lastname;
    return this;
  }

  /**
   * Representative&#39;s last name.
   * @return lastname
   */
  @javax.annotation.Nullable
  public String getLastname() {
    return lastname;
  }

  public void setLastname(@javax.annotation.Nullable String lastname) {
    this.lastname = lastname;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner fullnames(@javax.annotation.Nullable String fullnames) {
    this.fullnames = fullnames;
    return this;
  }

  /**
   * Representative&#39;s full names.
   * @return fullnames
   */
  @javax.annotation.Nullable
  public String getFullnames() {
    return fullnames;
  }

  public void setFullnames(@javax.annotation.Nullable String fullnames) {
    this.fullnames = fullnames;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner birthday(@javax.annotation.Nullable String birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Representative&#39;s birthdate. Format YYYY-MM-DD
   * @return birthday
   */
  @javax.annotation.Nullable
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(@javax.annotation.Nullable String birthday) {
    this.birthday = birthday;
  }


  public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner parentType(@javax.annotation.Nullable ParentTypeEnum parentType) {
    this.parentType = parentType;
    return this;
  }

  /**
   * Representative&#39;s position in company
   * @return parentType
   */
  @javax.annotation.Nullable
  public ParentTypeEnum getParentType() {
    return parentType;
  }

  public void setParentType(@javax.annotation.Nullable ParentTypeEnum parentType) {
    this.parentType = parentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner getBusinessInfo200ResponseBusinessinformationsInnerUsersInner = (GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner) o;
    return Objects.equals(this.firstname, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.firstname) &&
        Objects.equals(this.lastname, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.lastname) &&
        Objects.equals(this.fullnames, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.fullnames) &&
        Objects.equals(this.birthday, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.birthday) &&
        Objects.equals(this.parentType, getBusinessInfo200ResponseBusinessinformationsInnerUsersInner.parentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstname, lastname, fullnames, birthday, parentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner {\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    fullnames: ").append(toIndentedString(fullnames)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    parentType: ").append(toIndentedString(parentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("fullnames");
    openapiFields.add("birthday");
    openapiFields.add("parentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner is not found in the empty JSON string", GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if ((jsonObj.get("lastname") != null && !jsonObj.get("lastname").isJsonNull()) && !jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("fullnames") != null && !jsonObj.get("fullnames").isJsonNull()) && !jsonObj.get("fullnames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullnames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullnames").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("parentType") != null && !jsonObj.get("parentType").isJsonNull()) && !jsonObj.get("parentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentType").toString()));
      }
      // validate the optional field `parentType`
      if (jsonObj.get("parentType") != null && !jsonObj.get("parentType").isJsonNull()) {
        ParentTypeEnum.validateJsonElement(jsonObj.get("parentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner>() {
           @Override
           public void write(JsonWriter out, GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner
   * @throws IOException if the JSON string is invalid with respect to GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner
   */
  public static GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner.class);
  }

  /**
   * Convert an instance of GetBusinessInfo200ResponseBusinessinformationsInnerUsersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

