/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SwapSCAWalletsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class SwapSCAWalletsRequest {
  public static final String SERIALIZED_NAME_REMOVE_SCA_WALLET_ID = "removeScaWalletId";
  @SerializedName(SERIALIZED_NAME_REMOVE_SCA_WALLET_ID)
  @javax.annotation.Nonnull
  private String removeScaWalletId;

  /**
   * The reason for swapping SCA Wallet.
   */
  @JsonAdapter(SwapReasonEnum.Adapter.class)
  public enum SwapReasonEnum {
    LOST("LOST"),
    
    STOLEN("STOLEN"),
    
    OTHER("OTHER");

    private String value;

    SwapReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SwapReasonEnum fromValue(String value) {
      for (SwapReasonEnum b : SwapReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SwapReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SwapReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SwapReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SwapReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SwapReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SWAP_REASON = "swapReason";
  @SerializedName(SERIALIZED_NAME_SWAP_REASON)
  @javax.annotation.Nonnull
  private SwapReasonEnum swapReason;

  /**
   * Gets or Sets authMethod
   */
  @JsonAdapter(AuthMethodEnum.Adapter.class)
  public enum AuthMethodEnum {
    ID("ID"),
    
    OTP_SMS("OTP SMS"),
    
    OTP_EMAIL("OTP EMAIL"),
    
    OTHER("OTHER");

    private String value;

    AuthMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthMethodEnum fromValue(String value) {
      for (AuthMethodEnum b : AuthMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_METHOD = "authMethod";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD)
  @javax.annotation.Nullable
  private List<AuthMethodEnum> authMethod = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCA = "sca";
  @SerializedName(SERIALIZED_NAME_SCA)
  @javax.annotation.Nullable
  private String sca;

  public static final String SERIALIZED_NAME_SCA_WALLET_TAG = "scaWalletTag";
  @SerializedName(SERIALIZED_NAME_SCA_WALLET_TAG)
  @javax.annotation.Nullable
  private String scaWalletTag;

  public SwapSCAWalletsRequest() {
  }

  public SwapSCAWalletsRequest removeScaWalletId(@javax.annotation.Nonnull String removeScaWalletId) {
    this.removeScaWalletId = removeScaWalletId;
    return this;
  }

  /**
   * The unique identifier of the SCA Wallet to be deleted.
   * @return removeScaWalletId
   */
  @javax.annotation.Nonnull
  public String getRemoveScaWalletId() {
    return removeScaWalletId;
  }

  public void setRemoveScaWalletId(@javax.annotation.Nonnull String removeScaWalletId) {
    this.removeScaWalletId = removeScaWalletId;
  }


  public SwapSCAWalletsRequest swapReason(@javax.annotation.Nonnull SwapReasonEnum swapReason) {
    this.swapReason = swapReason;
    return this;
  }

  /**
   * The reason for swapping SCA Wallet.
   * @return swapReason
   */
  @javax.annotation.Nonnull
  public SwapReasonEnum getSwapReason() {
    return swapReason;
  }

  public void setSwapReason(@javax.annotation.Nonnull SwapReasonEnum swapReason) {
    this.swapReason = swapReason;
  }


  public SwapSCAWalletsRequest authMethod(@javax.annotation.Nullable List<AuthMethodEnum> authMethod) {
    this.authMethod = authMethod;
    return this;
  }

  public SwapSCAWalletsRequest addAuthMethodItem(AuthMethodEnum authMethodItem) {
    if (this.authMethod == null) {
      this.authMethod = new ArrayList<>();
    }
    this.authMethod.add(authMethodItem);
    return this;
  }

  /**
   * The chosen methods for the 2-factor authentication. Required if no &#x60;scaProof&#x60; is provided. 
   * @return authMethod
   */
  @javax.annotation.Nullable
  public List<AuthMethodEnum> getAuthMethod() {
    return authMethod;
  }

  public void setAuthMethod(@javax.annotation.Nullable List<AuthMethodEnum> authMethod) {
    this.authMethod = authMethod;
  }


  public SwapSCAWalletsRequest sca(@javax.annotation.Nullable String sca) {
    this.sca = sca;
    return this;
  }

  /**
   * The valid proof that authenticated the swap. Required if no &#x60;authMethod&#x60; is provided.
   * @return sca
   */
  @javax.annotation.Nullable
  public String getSca() {
    return sca;
  }

  public void setSca(@javax.annotation.Nullable String sca) {
    this.sca = sca;
  }


  public SwapSCAWalletsRequest scaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = scaWalletTag;
    return this;
  }

  /**
   * Custom value for the SCA Wallet. Can be used to name the device for which the new SCA Wallet is created. Max length: 256 characters. 
   * @return scaWalletTag
   */
  @javax.annotation.Nullable
  public String getScaWalletTag() {
    return scaWalletTag;
  }

  public void setScaWalletTag(@javax.annotation.Nullable String scaWalletTag) {
    this.scaWalletTag = scaWalletTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwapSCAWalletsRequest swapSCAWalletsRequest = (SwapSCAWalletsRequest) o;
    return Objects.equals(this.removeScaWalletId, swapSCAWalletsRequest.removeScaWalletId) &&
        Objects.equals(this.swapReason, swapSCAWalletsRequest.swapReason) &&
        Objects.equals(this.authMethod, swapSCAWalletsRequest.authMethod) &&
        Objects.equals(this.sca, swapSCAWalletsRequest.sca) &&
        Objects.equals(this.scaWalletTag, swapSCAWalletsRequest.scaWalletTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(removeScaWalletId, swapReason, authMethod, sca, scaWalletTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwapSCAWalletsRequest {\n");
    sb.append("    removeScaWalletId: ").append(toIndentedString(removeScaWalletId)).append("\n");
    sb.append("    swapReason: ").append(toIndentedString(swapReason)).append("\n");
    sb.append("    authMethod: ").append(toIndentedString(authMethod)).append("\n");
    sb.append("    sca: ").append(toIndentedString(sca)).append("\n");
    sb.append("    scaWalletTag: ").append(toIndentedString(scaWalletTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("removeScaWalletId");
    openapiFields.add("swapReason");
    openapiFields.add("authMethod");
    openapiFields.add("sca");
    openapiFields.add("scaWalletTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("removeScaWalletId");
    openapiRequiredFields.add("swapReason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SwapSCAWalletsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SwapSCAWalletsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SwapSCAWalletsRequest is not found in the empty JSON string", SwapSCAWalletsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SwapSCAWalletsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SwapSCAWalletsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SwapSCAWalletsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("removeScaWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeScaWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("removeScaWalletId").toString()));
      }
      if (!jsonObj.get("swapReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swapReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swapReason").toString()));
      }
      // validate the required field `swapReason`
      SwapReasonEnum.validateJsonElement(jsonObj.get("swapReason"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("authMethod") != null && !jsonObj.get("authMethod").isJsonNull() && !jsonObj.get("authMethod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMethod` to be an array in the JSON string but got `%s`", jsonObj.get("authMethod").toString()));
      }
      if ((jsonObj.get("sca") != null && !jsonObj.get("sca").isJsonNull()) && !jsonObj.get("sca").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sca` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sca").toString()));
      }
      if ((jsonObj.get("scaWalletTag") != null && !jsonObj.get("scaWalletTag").isJsonNull()) && !jsonObj.get("scaWalletTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaWalletTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaWalletTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SwapSCAWalletsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SwapSCAWalletsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SwapSCAWalletsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SwapSCAWalletsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SwapSCAWalletsRequest>() {
           @Override
           public void write(JsonWriter out, SwapSCAWalletsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SwapSCAWalletsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SwapSCAWalletsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SwapSCAWalletsRequest
   * @throws IOException if the JSON string is invalid with respect to SwapSCAWalletsRequest
   */
  public static SwapSCAWalletsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SwapSCAWalletsRequest.class);
  }

  /**
   * Convert an instance of SwapSCAWalletsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

