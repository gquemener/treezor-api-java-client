/*
 * Treezor API
 * Official endpoint documentation for Treezor.
 *
 * The version of the OpenAPI document: 24.11.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostExtOperationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T10:05:33.742486471+01:00[Europe/Paris]", comments = "Generator version: 7.10.0")
public class PostExtOperationRequest {
  /**
   * The end user action that was secured by an SCA. See [list of actions](/guide/strong-customer-authentication/endpoints-and-data.html#action-names-actionname) for more information. 
   */
  @JsonAdapter(ActionNameEnum.Adapter.class)
  public enum ActionNameEnum {
    EXTERNAL_GET_BALANCE("externalGetBalance"),
    
    EXTERNAL_OPERATION_VIEW("externalOperationView"),
    
    EXTERNAL_OPERATION_VIEW90_DAYS("externalOperationView90Days"),
    
    EXTERNAL_DISPLAY_ACCOUNT_DETAILS("externalDisplayAccountDetails"),
    
    EXTERNAL_GET_STATEMENT("externalGetStatement"),
    
    EXTERNAL_MASS_PAYOUT_ORDER_CREATION("externalMassPayoutOrderCreation"),
    
    EXTERNAL_MASS_TRANSFER_ORDER_CREATION("externalMassTransferOrderCreation"),
    
    EXTERNAL_SCHEDULED_PAYOUT_ORDER("externalScheduledPayoutOrder"),
    
    EXTERNAL_SCHEDULED_TRANSFER_ORDER("externalScheduledTransferOrder"),
    
    EXTERNAL_UPDATE_LIMITS_CARD("externalUpdateLimitsCard"),
    
    INTERNAL_CHECK("internalCheck");

    private String value;

    ActionNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionNameEnum fromValue(String value) {
      for (ActionNameEnum b : ActionNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  @javax.annotation.Nullable
  private ActionNameEnum actionName;

  public static final String SERIALIZED_NAME_SCA_PROOF = "scaProof";
  @SerializedName(SERIALIZED_NAME_SCA_PROOF)
  @javax.annotation.Nullable
  private String scaProof;

  public static final String SERIALIZED_NAME_ACTION_DATE = "actionDate";
  @SerializedName(SERIALIZED_NAME_ACTION_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime actionDate;

  public static final String SERIALIZED_NAME_RESOURCE_IDS = "resourceIds";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDS)
  @javax.annotation.Nullable
  private List<String> resourceIds;

  public PostExtOperationRequest() {
  }

  public PostExtOperationRequest actionName(@javax.annotation.Nullable ActionNameEnum actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * The end user action that was secured by an SCA. See [list of actions](/guide/strong-customer-authentication/endpoints-and-data.html#action-names-actionname) for more information. 
   * @return actionName
   */
  @javax.annotation.Nullable
  public ActionNameEnum getActionName() {
    return actionName;
  }

  public void setActionName(@javax.annotation.Nullable ActionNameEnum actionName) {
    this.actionName = actionName;
  }


  public PostExtOperationRequest scaProof(@javax.annotation.Nullable String scaProof) {
    this.scaProof = scaProof;
    return this;
  }

  /**
   * The valid proof that authenticated the end user&#39;s action. Required if &#x60;actionName&#x60; is covered by a per-operation SCA. 
   * @return scaProof
   */
  @javax.annotation.Nullable
  public String getScaProof() {
    return scaProof;
  }

  public void setScaProof(@javax.annotation.Nullable String scaProof) {
    this.scaProof = scaProof;
  }


  public PostExtOperationRequest actionDate(@javax.annotation.Nullable OffsetDateTime actionDate) {
    this.actionDate = actionDate;
    return this;
  }

  /**
   * The date on which the declared action took place. (Format: RFC3339). 
   * @return actionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActionDate() {
    return actionDate;
  }

  public void setActionDate(@javax.annotation.Nullable OffsetDateTime actionDate) {
    this.actionDate = actionDate;
  }


  public PostExtOperationRequest resourceIds(@javax.annotation.Nullable List<String> resourceIds) {
    this.resourceIds = resourceIds;
    return this;
  }

  public PostExtOperationRequest addResourceIdsItem(String resourceIdsItem) {
    if (this.resourceIds == null) {
      this.resourceIds = new ArrayList<>();
    }
    this.resourceIds.add(resourceIdsItem);
    return this;
  }

  /**
   * The list of unique identifiers (strings) of the objects, conditionned by the type of action. Must be:  * **walletId** for &#x60;externalGetStatement&#x60;, &#x60;externalGetBalance&#x60;, &#x60;externalOperationView&#x60;, &#x60;externalOperationView90Days&#x60;, and &#x60;externalDisplayAccountDetails&#x60; * **payoutId** for **transferId** in case of a payout or transfer * **cardId** for &#x60;externalUpdateLimitsCard&#x60; 
   * @return resourceIds
   */
  @javax.annotation.Nullable
  public List<String> getResourceIds() {
    return resourceIds;
  }

  public void setResourceIds(@javax.annotation.Nullable List<String> resourceIds) {
    this.resourceIds = resourceIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostExtOperationRequest postExtOperationRequest = (PostExtOperationRequest) o;
    return Objects.equals(this.actionName, postExtOperationRequest.actionName) &&
        Objects.equals(this.scaProof, postExtOperationRequest.scaProof) &&
        Objects.equals(this.actionDate, postExtOperationRequest.actionDate) &&
        Objects.equals(this.resourceIds, postExtOperationRequest.resourceIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, scaProof, actionDate, resourceIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostExtOperationRequest {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    scaProof: ").append(toIndentedString(scaProof)).append("\n");
    sb.append("    actionDate: ").append(toIndentedString(actionDate)).append("\n");
    sb.append("    resourceIds: ").append(toIndentedString(resourceIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("scaProof");
    openapiFields.add("actionDate");
    openapiFields.add("resourceIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostExtOperationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostExtOperationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostExtOperationRequest is not found in the empty JSON string", PostExtOperationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostExtOperationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostExtOperationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) && !jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      // validate the optional field `actionName`
      if (jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) {
        ActionNameEnum.validateJsonElement(jsonObj.get("actionName"));
      }
      if ((jsonObj.get("scaProof") != null && !jsonObj.get("scaProof").isJsonNull()) && !jsonObj.get("scaProof").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaProof` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaProof").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceIds") != null && !jsonObj.get("resourceIds").isJsonNull() && !jsonObj.get("resourceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIds` to be an array in the JSON string but got `%s`", jsonObj.get("resourceIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostExtOperationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostExtOperationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostExtOperationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostExtOperationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostExtOperationRequest>() {
           @Override
           public void write(JsonWriter out, PostExtOperationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostExtOperationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostExtOperationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostExtOperationRequest
   * @throws IOException if the JSON string is invalid with respect to PostExtOperationRequest
   */
  public static PostExtOperationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostExtOperationRequest.class);
  }

  /**
   * Convert an instance of PostExtOperationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

